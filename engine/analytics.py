#!/usr/bin/env python3
"""
üìä Analytics - –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≤–æ—Ä–æ–Ω–∫–∏
–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å: —Ç–µ—Å—Ç ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Üí –∫–æ—Ä–∑–∏–Ω–∞ ‚Üí –ø–æ–∫—É–ø–∫–∞
"""

import json
import time
import logging
from typing import Dict, List, Optional, Any, Union
from dataclasses import dataclass, asdict
from pathlib import Path

from engine.business_metrics import get_metrics_tracker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
logger = logging.getLogger("analytics")
logger.setLevel(logging.INFO)

# –ï—Å–ª–∏ —Ö—ç–Ω–¥–ª–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
if not logger.handlers:
    handler = logging.StreamHandler()
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π formatter –±–µ–∑ [err] –ø—Ä–µ—Ñ–∏–∫—Å–∞
    formatter = logging.Formatter("%(asctime)s | ANALYTICS | %(levelname)s | %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)


@dataclass
class AnalyticsEvent:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""

    event_type: str
    user_id: int
    timestamp: float
    payload: Dict[str, Any]
    session_id: Optional[str] = None


class AnalyticsTracker:
    """–¢—Ä–µ–∫–µ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π –≤–æ—Ä–æ–Ω–∫–∏"""

    def __init__(self, analytics_dir: str = "data/analytics"):
        self.analytics_dir = Path(analytics_dir)
        self.analytics_dir.mkdir(parents=True, exist_ok=True)

        # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.events_file = self.analytics_dir / "events.jsonl"

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –º–µ—Ç—Ä–∏–∫
        self.metrics_tracker = get_metrics_tracker()

        # –°–æ–±—ã—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–ø–æ—Ç–æ–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–∞
        self.skincare_events = {
            "recommendations_viewed": "branch=skincare",
            "category_opened": "name",
            "product_opened": "pid,source",
            "variant_selected": "pid,vid",
            "product_added_to_cart": "pid,vid,source,price",
            "oos_shown": "pid",
            "alternatives_shown": "pid,base_category,alternatives_count",
            "error_shown": "code,place",
        }

    def emit(
        self,
        event_type: str,
        user_id: int,
        payload: Dict[str, Any] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏

        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (user_started_test, product_added_to_cart, etc.)
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payload: –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            session_id: ID —Å–µ—Å—Å–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        try:
            event = AnalyticsEvent(
                event_type=event_type,
                user_id=user_id,
                timestamp=time.time(),
                payload=payload or {},
                session_id=session_id,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª —Å–æ–±—ã—Ç–∏–π
            self._save_event(event)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            logger.info(
                f"Analytics: {event_type}",
                extra={
                    "event_type": event_type,
                    "user_id": user_id,
                    "payload": payload,
                    "session_id": session_id,
                },
            )

            # –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –º–µ—Ç—Ä–∏–∫ –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
            self._integrate_with_business_metrics(event)

        except Exception as e:
            logger.error(f"Failed to emit analytics event {event_type}: {e}")

    def user_started_test(
        self, user_id: int, test_type: str, session_id: Optional[str] = None
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ç–µ—Å—Ç (palette|skin)"""
        self.emit(
            "user_started_test",
            user_id,
            {"test_type": test_type, "started_at": time.time()},
            session_id,
        )

    def user_completed_test(
        self,
        user_id: int,
        test_type: str,
        duration_seconds: Optional[float] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç"""
        payload = {"test_type": test_type, "completed_at": time.time()}
        if duration_seconds is not None:
            payload["duration_seconds"] = duration_seconds

        self.emit("user_completed_test", user_id, payload, session_id)

    def recommendations_viewed(
        self, user_id: int, branch: str, products_count: int = 0, session_id: Optional[str] = None
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (makeup|skincare)"""
        self.emit(
            "recommendations_viewed",
            user_id,
            {"branch": branch, "products_count": products_count, "viewed_at": time.time()},
            session_id,
        )

    def product_added_to_cart(
        self,
        user_id: int,
        product_id: str,
        variant_id: Optional[str] = None,
        source: Optional[str] = None,
        price: Optional[float] = None,
        category: Optional[str] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É"""
        payload = {"product_id": product_id, "added_at": time.time()}

        if variant_id:
            payload["variant_id"] = variant_id
        if source:
            payload["source"] = source
        if price is not None:
            payload["price"] = price
        if category:
            payload["category"] = category

        self.emit("product_added_to_cart", user_id, payload, session_id)

    def cart_viewed(
        self,
        user_id: int,
        items_count: int,
        total_value: float,
        currency: str = "RUB",
        session_id: Optional[str] = None,
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ—Ä–∑–∏–Ω—É"""
        self.emit(
            "cart_viewed",
            user_id,
            {
                "items_count": items_count,
                "total_value": total_value,
                "currency": currency,
                "viewed_at": time.time(),
            },
            session_id,
        )

    def cart_item_updated(
        self,
        user_id: int,
        product_id: str,
        variant_id: Optional[str] = None,
        qty_before: int = 0,
        qty_after: int = 0,
        session_id: Optional[str] = None,
    ) -> None:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ"""
        payload = {
            "product_id": product_id,
            "qty_before": qty_before,
            "qty_after": qty_after,
            "updated_at": time.time(),
        }

        if variant_id:
            payload["variant_id"] = variant_id

        self.emit("cart_item_updated", user_id, payload, session_id)

    def cart_item_removed(
        self,
        user_id: int,
        product_id: str,
        variant_id: Optional[str] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
        payload = {"product_id": product_id, "removed_at": time.time()}

        if variant_id:
            payload["variant_id"] = variant_id

        self.emit("cart_item_removed", user_id, payload, session_id)

    def checkout_clicked(
        self,
        user_id: int,
        items_count: int,
        total_value: float,
        currency: str = "RUB",
        session_id: Optional[str] = None,
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        self.emit(
            "checkout_clicked",
            user_id,
            {
                "items_count": items_count,
                "total_value": total_value,
                "currency": currency,
                "clicked_at": time.time(),
            },
            session_id,
        )

    def external_checkout_opened(
        self,
        user_id: int,
        partner: str,
        product_id: Optional[str] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–û—Ç–∫—Ä—ã—Ç –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        payload = {"partner": partner, "opened_at": time.time()}

        if product_id:
            payload["product_id"] = product_id

        self.emit("external_checkout_opened", user_id, payload, session_id)

    def error_shown(
        self,
        user_id: int,
        error_code: str,
        place: str,
        error_message: Optional[str] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–∫–∞–∑–∞–Ω–∞ –æ—à–∏–±–∫–∞"""
        payload = {"error_code": error_code, "place": place, "shown_at": time.time()}

        if error_message:
            payload["error_message"] = error_message

        self.emit("error_shown", user_id, payload, session_id)

    def page_viewed(
        self,
        user_id: int,
        page_name: str,
        source: Optional[str] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É/—ç–∫—Ä–∞–Ω"""
        payload = {"page_name": page_name, "viewed_at": time.time()}

        if source:
            payload["source"] = source

        self.emit("page_viewed", user_id, payload, session_id)

    def user_action(
        self,
        user_id: int,
        action: str,
        context: Optional[Dict[str, Any]] = None,
        session_id: Optional[str] = None,
    ) -> None:
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        payload = {"action": action, "performed_at": time.time()}

        if context:
            payload["context"] = context

        self.emit("user_action", user_id, payload, session_id)

    def get_events_summary(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        cutoff_time = time.time() - (days * 24 * 3600)
        events = self._load_recent_events(cutoff_time)

        if not events:
            return {"error": "No events found", "period_days": days}

        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
        event_counts = {}
        user_counts = set()

        for event in events:
            event_type = event.event_type
            event_counts[event_type] = event_counts.get(event_type, 0) + 1
            user_counts.add(event.user_id)

        # –í–æ—Ä–æ–Ω–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        funnel_events = {
            "test_starts": event_counts.get("user_started_test", 0),
            "test_completions": event_counts.get("user_completed_test", 0),
            "recommendations_views": event_counts.get("recommendations_viewed", 0),
            "cart_additions": event_counts.get("product_added_to_cart", 0),
            "cart_views": event_counts.get("cart_viewed", 0),
            "checkout_clicks": event_counts.get("checkout_clicked", 0),
            "external_checkouts": event_counts.get("external_checkout_opened", 0),
        }

        # –†–∞—Å—á–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π
        test_completion_rate = (
            (funnel_events["test_completions"] / funnel_events["test_starts"])
            if funnel_events["test_starts"] > 0
            else 0
        )
        cart_conversion_rate = (
            (funnel_events["cart_additions"] / funnel_events["recommendations_views"])
            if funnel_events["recommendations_views"] > 0
            else 0
        )
        checkout_conversion_rate = (
            (funnel_events["checkout_clicks"] / funnel_events["cart_views"])
            if funnel_events["cart_views"] > 0
            else 0
        )

        return {
            "period_days": days,
            "total_events": len(events),
            "unique_users": len(user_counts),
            "event_breakdown": event_counts,
            "funnel_metrics": {
                **funnel_events,
                "test_completion_rate": test_completion_rate,
                "cart_conversion_rate": cart_conversion_rate,
                "checkout_conversion_rate": checkout_conversion_rate,
            },
        }

    def _save_event(self, event: AnalyticsEvent) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ JSONL —Ñ–∞–π–ª"""
        try:
            with open(self.events_file, "a", encoding="utf-8") as f:
                f.write(json.dumps(asdict(event), ensure_ascii=False) + "\n")
        except Exception as e:
            logger.error(f"Failed to save analytics event: {e}")

    def _load_recent_events(self, cutoff_time: float) -> List[AnalyticsEvent]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        events = []

        if not self.events_file.exists():
            return events

        try:
            with open(self.events_file, "r", encoding="utf-8") as f:
                for line in f:
                    try:
                        data = json.loads(line.strip())
                        if data.get("timestamp", 0) >= cutoff_time:
                            events.append(AnalyticsEvent(**data))
                    except (json.JSONDecodeError, TypeError):
                        continue
        except Exception as e:
            logger.error(f"Failed to load analytics events: {e}")

        return events

    def _integrate_with_business_metrics(self, event: AnalyticsEvent) -> None:
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –±–∏–∑–Ω–µ—Å-–º–µ—Ç—Ä–∏–∫"""
        try:
            # –ú–∞–ø–∏–º —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            if event.event_type == "product_added_to_cart":
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π track_event –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
                self.metrics_tracker.track_event(
                    "cart_add_success",
                    event.user_id,
                    {
                        "product_id": event.payload.get("product_id"),
                        "category": event.payload.get("category", "unknown"),
                        "price": event.payload.get("price", 0),
                        "source": event.payload.get("source"),
                    },
                )

            elif event.event_type == "recommendations_viewed":
                # –°–æ–∑–¥–∞–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                session_id = event.session_id or f"analytics_{event.user_id}_{int(event.timestamp)}"
                self.metrics_tracker.track_interaction(
                    user_id=event.user_id,
                    session_id=session_id,
                    product_id="recommendations_page",
                    product_category=event.payload.get("branch", "unknown"),
                    interaction_type="view",
                    additional_data=event.payload,
                )

            elif event.event_type == "external_checkout_opened":
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–∫ –∫–ª–∏–∫ –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–µ
                session_id = event.session_id or f"analytics_{event.user_id}_{int(event.timestamp)}"
                self.metrics_tracker.track_interaction(
                    user_id=event.user_id,
                    session_id=session_id,
                    product_id=event.payload.get("product_id", "unknown"),
                    product_category="checkout",
                    interaction_type="click",
                    additional_data=event.payload,
                )

        except Exception as e:
            logger.warning(f"Failed to integrate with business metrics: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
_analytics_tracker = None


def get_analytics_tracker() -> AnalyticsTracker:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    global _analytics_tracker
    if _analytics_tracker is None:
        _analytics_tracker = AnalyticsTracker()
    return _analytics_tracker


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
def emit_event(
    event_type: str, user_id: int, payload: Dict[str, Any] = None, session_id: Optional[str] = None
) -> None:
    """–ë—ã—Å—Ç—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    tracker = get_analytics_tracker()
    tracker.emit(event_type, user_id, payload, session_id)


def track_user_started_test(user_id: int, test_type: str, session_id: Optional[str] = None) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞"""
    tracker = get_analytics_tracker()
    tracker.user_started_test(user_id, test_type, session_id)


def track_user_completed_test(
    user_id: int,
    test_type: str,
    duration_seconds: Optional[float] = None,
    session_id: Optional[str] = None,
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞"""
    tracker = get_analytics_tracker()
    tracker.user_completed_test(user_id, test_type, duration_seconds, session_id)


def track_recommendations_viewed(
    user_id: int, branch: str, products_count: int = 0, session_id: Optional[str] = None
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    tracker = get_analytics_tracker()
    tracker.recommendations_viewed(user_id, branch, products_count, session_id)


def track_cart_event(event_type: str, user_id: int, **kwargs) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã"""
    tracker = get_analytics_tracker()
    method_name = event_type.replace("cart_", "").replace("product_added_to_", "product_added_to_")


# –°–æ–±—ã—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–ø–æ—Ç–æ–∫–∞ –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–∞
def track_skincare_recommendations_viewed(user_id: int, session_id: Optional[str] = None) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–∞"""
    tracker = get_analytics_tracker()
    tracker.emit("recommendations_viewed", user_id, {"branch": "skincare"}, session_id)


def track_category_opened(
    user_id: int, category_name: str, session_id: Optional[str] = None
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    tracker = get_analytics_tracker()
    tracker.emit("category_opened", user_id, {"name": category_name}, session_id)


def track_product_opened(
    user_id: int, product_id: str, source: str, session_id: Optional[str] = None
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"""
    tracker = get_analytics_tracker()
    tracker.emit("product_opened", user_id, {"pid": product_id, "source": source}, session_id)


def track_variant_selected(
    user_id: int, product_id: str, variant_id: str, session_id: Optional[str] = None
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞"""
    tracker = get_analytics_tracker()
    tracker.emit("variant_selected", user_id, {"pid": product_id, "vid": variant_id}, session_id)


def track_oos_shown(user_id: int, product_id: str, session_id: Optional[str] = None) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞ '–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'"""
    tracker = get_analytics_tracker()
    tracker.emit("oos_shown", user_id, {"pid": product_id}, session_id)


def track_alternatives_shown(
    user_id: int,
    product_id: str,
    base_category: str,
    alternatives_count: int,
    session_id: Optional[str] = None,
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ–∫–∞–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
    tracker = get_analytics_tracker()
    tracker.emit(
        "alternatives_shown",
        user_id,
        {
            "pid": product_id,
            "base_category": base_category,
            "alternatives_count": alternatives_count,
        },
        session_id,
    )


def track_skincare_error(
    user_id: int, error_code: str, place: str, session_id: Optional[str] = None
) -> None:
    """–û—Ç—Å–ª–µ–¥–∏—Ç—å –æ—à–∏–±–∫—É –≤ –∏–Ω–ª–∞–π–Ω-–ø–æ—Ç–æ–∫–µ —É—Ö–æ–¥–∞"""
    tracker = get_analytics_tracker()
    tracker.emit("error_shown", user_id, {"code": error_code, "place": place}, session_id)


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    print("üìä ANALYTICS TEST")
    print("=" * 40)

    tracker = AnalyticsTracker("data/test_analytics")

    # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—É—Ç–∏
    user_id = 12345
    session_id = "test_session_123"

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ç–µ—Å—Ç
    tracker.user_started_test(user_id, "palette", session_id)

    # –ó–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç
    tracker.user_completed_test(user_id, "palette", 120.5, session_id)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    tracker.recommendations_viewed(user_id, "makeup", 5, session_id)

    # –î–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    tracker.product_added_to_cart(
        user_id, "product_123", "shade_01", "goldapple", 2500.0, "foundation", session_id
    )

    # –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–æ—Ä–∑–∏–Ω—É
    tracker.cart_viewed(user_id, 1, 2500.0, "RUB", session_id)

    # –ù–∞–∂–∞–ª –æ—Ñ–æ—Ä–º–∏—Ç—å
    tracker.checkout_clicked(user_id, 1, 2500.0, "RUB", session_id)

    # –û—Ç–∫—Ä—ã–ª –≤–Ω–µ—à–Ω–∏–π —Å–∞–π—Ç
    tracker.external_checkout_opened(user_id, "goldapple", "product_123", session_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("\nAnalytics Summary:")
    summary = tracker.get_events_summary(1)
    for key, value in summary.items():
        print(f"  {key}: {value}")

    print("\n‚úÖ Analytics test completed!")
