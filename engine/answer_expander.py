from __future__ import annotations

import yaml
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path

from .models import UserProfile, Product, Routine, ReportData, Undertone, Season, SkinType


class AnswerExpanderV2:
    """Engine v2 Answer Expander with TL;DR/FULL reports and rules application"""

    def __init__(self, rules_path: str = "deliverables/Engine_v2/RULES"):
        self.rules_path = Path(rules_path)
        self._compatibility_rules = self._load_compatibility_rules()
        self._layering_rules = self._load_layering_rules()
        self._cautions = self._load_cautions()

    def _load_compatibility_rules(self) -> Dict[str, Any]:
        """Load active ingredient compatibility matrix"""
        try:
            with open(self.rules_path / "compatibility_matrix.yaml", "r", encoding="utf-8") as f:
                return yaml.safe_load(f) or {}
        except Exception:
            return {
                "incompatible_pairs": [
                    ["retinol", "vitamin_c"],
                    ["retinol", "aha"],
                    ["retinol", "bha"],
                    ["vitamin_c", "niacinamide"],
                    ["benzoyl_peroxide", "retinol"],
                ],
                "avoid_with_sensitive": ["retinol", "aha", "bha", "fragrance"],
            }

    def _load_layering_rules(self) -> Dict[str, Any]:
        """Load product layering order rules"""
        try:
            with open(self.rules_path / "layering_order.yaml", "r", encoding="utf-8") as f:
                return yaml.safe_load(f) or {}
        except Exception:
            return {
                "morning_order": ["cleanser", "toner", "serum", "moisturizer", "spf"],
                "evening_order": ["cleanser", "toner", "treatment", "serum", "moisturizer", "oil"],
                "ph_order": ["low_ph_first", "water_based", "oil_based", "occlusive"],
            }

    def _load_cautions(self) -> Dict[str, Any]:
        """Load cautions and warnings"""
        try:
            with open(self.rules_path / "cautions.yaml", "r", encoding="utf-8") as f:
                return yaml.safe_load(f) or {}
        except Exception:
            return {
                "pregnancy_avoid": ["retinol", "retinoids", "high_salicylic_acid", "hydroquinone"],
                "sensitive_skin_avoid": ["fragrance", "essential_oils", "high_alcohol"],
                "sun_sensitivity": ["retinol", "aha", "bha", "vitamin_c"],
            }

    def generate_tldr_report(self, report_data: ReportData) -> str:
        """Generate TL;DR (short) report"""
        profile = report_data.user_profile

        # Color analysis
        color_summary = self._analyze_color_profile(profile)

        # Skin analysis
        skin_summary = self._analyze_skin_profile(profile)

        # Product count
        skincare_count = len(report_data.skincare_products)
        makeup_count = len(report_data.makeup_products)

        # Key warnings
        warnings = self._get_key_warnings(profile, report_data.skincare_products)

        tldr = f"""üé® **–í–ê–®–ê –ü–ê–õ–ò–¢–†–ê**: {color_summary}

üß¥ **–¢–ò–ü –ö–û–ñ–ò**: {skin_summary}

üì¶ **–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–û**: 
‚Ä¢ –£—Ö–æ–¥: {skincare_count} —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ –ú–∞–∫–∏—è–∂: {makeup_count} —Å—Ä–µ–¥—Å—Ç–≤

‚ö†Ô∏è **–í–ê–ñ–ù–û**: {warnings if warnings else "–û—Å–æ–±—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç"}

üí° **–ì–õ–ê–í–ù–´–ô –°–û–í–ï–¢**: {self._get_main_tip(profile)}"""

        return tldr

    def generate_full_report(self, report_data: ReportData) -> str:
        """Generate FULL (detailed) report"""
        profile = report_data.user_profile

        sections = []

        # 1. Color profile analysis
        sections.append(self._generate_color_analysis(profile))

        # 2. Skin analysis
        sections.append(self._generate_skin_analysis(profile))

        # 3. Product recommendations with reasoning
        sections.append(self._generate_product_analysis(report_data))

        # 4. Routine suggestions
        sections.append(self._generate_routine_suggestions(report_data))

        # 5. Warnings and compatibility
        sections.append(self._generate_warnings_section(profile, report_data.skincare_products))

        # 6. Professional tips
        sections.append(self._generate_pro_tips(profile))

        return "\n\n".join(sections)

    def _analyze_color_profile(self, profile: UserProfile) -> str:
        """Analyze color profile for TL;DR"""
        if profile.season:
            season_name = (
                profile.season.value.title()
                if hasattr(profile.season, "value")
                else str(profile.season).title()
            )
            undertone_desc = ""
            if profile.undertone and profile.undertone != Undertone.UNKNOWN:
                undertone_desc = f" ({profile.undertone.value if hasattr(profile.undertone, 'value') else profile.undertone} –ø–æ–¥—Ç–æ–Ω)"
            return f"{season_name}{undertone_desc}"
        elif profile.undertone and profile.undertone != Undertone.UNKNOWN:
            undertone_val = (
                profile.undertone.value
                if hasattr(profile.undertone, "value")
                else profile.undertone
            )
            return f"{undertone_val.title()} –ø–æ–¥—Ç–æ–Ω"
        else:
            return "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞"

    def _analyze_skin_profile(self, profile: UserProfile) -> str:
        """Analyze skin profile for TL;DR"""
        skin_parts = []

        if profile.skin_type:
            skin_type = (
                profile.skin_type.value
                if hasattr(profile.skin_type, "value")
                else profile.skin_type
            )
            skin_parts.append(skin_type)

        if profile.dehydrated:
            skin_parts.append("–æ–±–µ–∑–≤–æ–∂–µ–Ω–Ω–∞—è")

        if profile.sensitivity:
            sens_val = (
                profile.sensitivity.value
                if hasattr(profile.sensitivity, "value")
                else profile.sensitivity
            )
            skin_parts.append(f"—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {sens_val}")

        if profile.concerns:
            main_concern = profile.concerns[0] if profile.concerns else None
            if main_concern:
                concern_map = {
                    "acne": "–∞–∫–Ω–µ",
                    "pigmentation": "–ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—è",
                    "wrinkles": "–≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                    "redness": "–ø–æ–∫—Ä–∞—Å–Ω–µ–Ω–∏—è",
                }
                concern_desc = concern_map.get(main_concern, main_concern)
                skin_parts.append(concern_desc)

        return ", ".join(skin_parts) or "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∫–æ–∂–∞"

    def _get_key_warnings(self, profile: UserProfile, products: List[Product]) -> str:
        """Get key warnings for TL;DR"""
        warnings = []

        # Pregnancy warnings
        if profile.pregnant_or_lactating:
            dangerous_actives = []
            for product in products:
                for active in product.actives:
                    if active.lower() in ["retinol", "retinoid", "salicylic"]:
                        dangerous_actives.append(active)
            if dangerous_actives:
                warnings.append("–ò–∑–±–µ–≥–∞–π—Ç–µ —Ä–µ—Ç–∏–Ω–æ–∏–¥–æ–≤ –∏ —Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç—ã")

        # Sensitivity warnings
        if profile.sensitivity and (
            (hasattr(profile.sensitivity, "value") and profile.sensitivity.value == "high")
            or profile.sensitivity == "high"
        ):
            warnings.append("–ù–∞—á–∏–Ω–∞–π—Ç–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–π")

        # Sun protection
        has_photosensitizing = any(
            any(active.lower() in ["retinol", "aha", "bha"] for active in product.actives)
            for product in products
        )
        if has_photosensitizing:
            warnings.append("–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SPF")

        return "; ".join(warnings)

    def _get_main_tip(self, profile: UserProfile) -> str:
        """Get main tip based on profile"""
        skin_type_val = (
            profile.skin_type.value if hasattr(profile.skin_type, "value") else profile.skin_type
        )
        season_val = profile.season.value if hasattr(profile.season, "value") else profile.season

        if skin_type_val == "dry":
            return "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ ‚Äî –≤–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–æ–º–µ—Ä –æ–¥–∏–Ω"
        elif skin_type_val == "oily":
            return "–ö–æ–Ω—Ç—Ä–æ–ª—å –∂–∏—Ä–Ω–æ—Å—Ç–∏ –±–µ–∑ –ø–µ—Ä–µ—Å—É—à–∏–≤–∞–Ω–∏—è –∫–æ–∂–∏"
        elif profile.dehydrated:
            return "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∏–¥—Ä–æ–±–∞–ª–∞–Ω—Å–∞ –∫–æ–∂–∏"
        elif "acne" in (profile.concerns or []):
            return "–ú—è–≥–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ + —Ç–æ—á–µ—á–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ"
        elif season_val == "spring":
            return "–Ø—Ä–∫–∏–µ, —á–∏—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –≤–∞—à—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É"
        elif season_val == "summer":
            return "–ü—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–µ, –ø—Ä–æ—Ö–ª–∞–¥–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ ‚Äî –≤–∞—à–∞ —Å–∏–ª–∞"
        elif season_val == "autumn":
            return "–¢—ë–ø–ª—ã–µ, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–¥—É—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –æ–±—Ä–∞–∑"
        elif season_val == "winter":
            return "–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ, —á–∏—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞ ‚Äî –≤–∞—à–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ"
        else:
            return "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å —É—á—ë—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–π –∫–æ–∂–∏"

    def _generate_color_analysis(self, profile: UserProfile) -> str:
        """Generate detailed color analysis"""
        analysis = "# üé® –ê–ù–ê–õ–ò–ó –¶–í–ï–¢–û–¢–ò–ü–ê\n\n"

        if profile.season:
            season_val = (
                profile.season.value if hasattr(profile.season, "value") else profile.season
            )
            season_descriptions = {
                "spring": "**–í–µ—Å–Ω–∞** ‚Äî —è—Ä–∫–∞—è, —Ç—ë–ø–ª–∞—è, –ª—É—á–∏—Å—Ç–∞—è. –í–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç —á–∏—Å—Ç—ã–µ, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ —Å —Ç—ë–ø–ª—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º.",
                "summer": "**–õ–µ—Ç–æ** ‚Äî –º—è–≥–∫–∞—è, –ø—Ä–æ—Ö–ª–∞–¥–Ω–∞—è, –ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω–∞—è. –í–∞—à–∏ —Ü–≤–µ—Ç–∞ ‚Äî –Ω–µ–∂–Ω—ã–µ, –ø—ã–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ —Å —Ö–æ–ª–æ–¥–Ω—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º.",
                "autumn": "**–û—Å–µ–Ω—å** ‚Äî –≥–ª—É–±–æ–∫–∞—è, —Ç—ë–ø–ª–∞—è, –Ω–∞—Å—ã—â–µ–Ω–Ω–∞—è. –í–∞–º –∫ –ª–∏—Ü—É –±–æ–≥–∞—Ç—ã–µ, –∑–µ–º–ª–∏—Å—Ç—ã–µ —Ü–≤–µ—Ç–∞ —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º.",
                "winter": "**–ó–∏–º–∞** ‚Äî —è—Ä–∫–∞—è, —Ö–æ–ª–æ–¥–Ω–∞—è, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è. –í–∞—à–∏ —Ü–≤–µ—Ç–∞ ‚Äî —á–∏—Å—Ç—ã–µ, –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Å —Ö–æ–ª–æ–¥–Ω—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º.",
            }
            analysis += season_descriptions.get(season_val, "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞")

        if profile.undertone:
            undertone_val = (
                profile.undertone.value
                if hasattr(profile.undertone, "value")
                else profile.undertone
            )
            analysis += f"\n\n**–ü–æ–¥—Ç–æ–Ω –∫–æ–∂–∏**: {undertone_val}"

        if profile.contrast:
            contrast_val = (
                profile.contrast.value if hasattr(profile.contrast, "value") else profile.contrast
            )
            analysis += f"\n**–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å**: {contrast_val}"

        if profile.eye_color:
            eye_val = (
                profile.eye_color.value
                if hasattr(profile.eye_color, "value")
                else profile.eye_color
            )
            analysis += f"\n**–¶–≤–µ—Ç –≥–ª–∞–∑**: {eye_val} ‚Äî –ø–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –∫–æ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω—ã–º–∏ –æ—Ç—Ç–µ–Ω–∫–∞–º–∏"

        return analysis

    def _generate_skin_analysis(self, profile: UserProfile) -> str:
        """Generate detailed skin analysis"""
        analysis = "# üß¥ –ê–ù–ê–õ–ò–ó –ö–û–ñ–ò\n\n"

        if profile.fitzpatrick:
            fitz_val = (
                profile.fitzpatrick.value
                if hasattr(profile.fitzpatrick, "value")
                else profile.fitzpatrick
            )
            fitz_descriptions = {
                "I": "–û—á–µ–Ω—å —Å–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ –æ–±–≥–æ—Ä–∞–µ—Ç, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç",
                "II": "–°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –ª–µ–≥–∫–æ –æ–±–≥–æ—Ä–∞–µ—Ç, —Å–ª–∞–±–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
                "III": "–°–≤–µ—Ç–ª–∞—è –∫–æ–∂–∞, –∏–Ω–æ–≥–¥–∞ –æ–±–≥–æ—Ä–∞–µ—Ç, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
                "IV": "–û–ª–∏–≤–∫–æ–≤–∞—è –∫–æ–∂–∞, —Ä–µ–¥–∫–æ –æ–±–≥–æ—Ä–∞–µ—Ç, —Ö–æ—Ä–æ—à–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
                "V": "–°–º—É–≥–ª–∞—è –∫–æ–∂–∞, –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ –æ–±–≥–æ—Ä–∞–µ—Ç, –ª–µ–≥–∫–æ –∑–∞–≥–æ—Ä–∞–µ—Ç",
                "VI": "–û—á–µ–Ω—å —Å–º—É–≥–ª–∞—è –∫–æ–∂–∞, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –æ–±–≥–æ—Ä–∞–µ—Ç",
            }
            analysis += (
                f"**–§–æ—Ç–æ—Ç–∏–ø –ø–æ –§–∏—Ü–ø–∞—Ç—Ä–∏–∫—É**: {fitz_val} ‚Äî {fitz_descriptions.get(fitz_val, '')}\n\n"
            )

        if profile.baumann:
            analysis += f"**–¢–∏–ø –∫–æ–∂–∏ –ø–æ –ë–∞—É–º–∞–Ω—É**: {profile.baumann}\n"
            analysis += self._decode_baumann(profile.baumann) + "\n\n"

        if profile.skin_type:
            skin_val = (
                profile.skin_type.value
                if hasattr(profile.skin_type, "value")
                else profile.skin_type
            )
            analysis += f"**–ë–∞–∑–æ–≤—ã–π —Ç–∏–ø**: {skin_val}\n\n"

        if profile.concerns:
            analysis += f"**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã**: {', '.join(profile.concerns)}\n\n"

        if profile.allergies:
            analysis += f"**–ê–ª–ª–µ—Ä–≥–∏–∏**: {', '.join(profile.allergies)}\n\n"

        return analysis

    def _decode_baumann(self, baumann: str) -> str:
        """Decode Baumann skin type"""
        if len(baumann) != 4:
            return ""

        o_d = "–ñ–∏—Ä–Ω–∞—è" if baumann[0] == "O" else "–°—É—Ö–∞—è"
        s_r = "–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è" if baumann[1] == "S" else "–£—Å—Ç–æ–π—á–∏–≤–∞—è"
        p_n = "–ü–∏–≥–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è" if baumann[2] == "P" else "–ù–µ —Å–∫–ª–æ–Ω–Ω–∞—è –∫ –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"
        w_t = "–°–∫–ª–æ–Ω–Ω–∞—è –∫ –º–æ—Ä—â–∏–Ω–∞–º" if baumann[3] == "W" else "–£–ø—Ä—É–≥–∞—è"

        return f"{o_d}, {s_r.lower()}, {p_n.lower()}, {w_t.lower()}"

    def _generate_product_analysis(self, report_data: ReportData) -> str:
        """Generate product recommendations with reasoning"""
        analysis = "# üíé –†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–´–ï –°–†–ï–î–°–¢–í–ê\n\n"

        if report_data.skincare_products:
            analysis += "## –£—Ö–æ–¥–æ–≤–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞\n\n"
            for product in report_data.skincare_products:
                analysis += f"**{product.brand} {product.title}**\n"
                analysis += f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è*: {product.category}\n"
                if product.actives:
                    analysis += f"*–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã*: {', '.join(product.actives)}\n"
                analysis += f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ*: {self._get_product_reasoning(product, report_data.user_profile)}\n\n"

        if report_data.makeup_products:
            analysis += "## –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Å–º–µ—Ç–∏–∫–∞\n\n"
            for product in report_data.makeup_products:
                analysis += f"**{product.brand} {product.title}**\n"
                analysis += f"*–ö–∞—Ç–µ–≥–æ—Ä–∏—è*: {product.category}\n"
                if product.shade_name:
                    analysis += f"*–û—Ç—Ç–µ–Ω–æ–∫*: {product.shade_name}\n"
                analysis += f"*–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ*: {self._get_makeup_reasoning(product, report_data.user_profile)}\n\n"

        return analysis

    def _get_product_reasoning(self, product: Product, profile: UserProfile) -> str:
        """Get reasoning for skincare product recommendation"""
        reasons = []
        skin_type_val = (
            profile.skin_type.value if hasattr(profile.skin_type, "value") else profile.skin_type
        )

        # Match actives to concerns
        for active in product.actives:
            if "hyaluronic" in active.lower() and profile.dehydrated:
                reasons.append("–≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞ –¥–ª—è —É–≤–ª–∞–∂–Ω–µ–Ω–∏—è")
            elif "niacinamide" in active.lower() and skin_type_val == "oily":
                reasons.append("–Ω–∏–∞—Ü–∏–Ω–∞–º–∏–¥ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∂–∏—Ä–Ω–æ—Å—Ç–∏")
            elif "retinol" in active.lower() and "wrinkles" in (profile.concerns or []):
                reasons.append("—Ä–µ—Ç–∏–Ω–æ–ª –¥–ª—è –±–æ—Ä—å–±—ã —Å –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏")
            elif "vitamin_c" in active.lower() and "pigmentation" in (profile.concerns or []):
                reasons.append("–≤–∏—Ç–∞–º–∏–Ω –° –ø—Ä–æ—Ç–∏–≤ –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")

        # Match to skin type
        if skin_type_val == "dry" and "moisturizer" in product.category.lower():
            reasons.append("–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–µ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å—É—Ö–æ–π –∫–æ–∂–∏")
        elif skin_type_val == "oily" and "cleanser" in product.category.lower():
            reasons.append("–≥–ª—É–±–æ–∫–æ–µ –æ—á–∏—â–µ–Ω–∏–µ –¥–ª—è –∂–∏—Ä–Ω–æ–π –∫–æ–∂–∏")

        return "; ".join(reasons) or "–ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞—à–µ–º—É —Ç–∏–ø—É –∫–æ–∂–∏"

    def _get_makeup_reasoning(self, product: Product, profile: UserProfile) -> str:
        """Get reasoning for makeup product recommendation"""
        reasons = []
        season_val = profile.season.value if hasattr(profile.season, "value") else profile.season
        undertone_val = (
            profile.undertone.value if hasattr(profile.undertone, "value") else profile.undertone
        )

        # Season matching
        if season_val == "spring" and "bright" in (product.tags or []):
            reasons.append("—è—Ä–∫–∏–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–ª—è —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –í–µ—Å–Ω–∞")
        elif season_val == "summer" and "muted" in (product.tags or []):
            reasons.append("–ø—Ä–∏–≥–ª—É—à—ë–Ω–Ω—ã–π —Ç–æ–Ω –¥–ª—è —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –õ–µ—Ç–æ")
        elif season_val == "autumn" and "warm" in (product.tags or []):
            reasons.append("—Ç—ë–ø–ª—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ –¥–ª—è —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –û—Å–µ–Ω—å")
        elif season_val == "winter" and "cool" in (product.tags or []):
            reasons.append("—Ö–æ–ª–æ–¥–Ω—ã–π —Ç–æ–Ω –¥–ª—è —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –ó–∏–º–∞")

        # Undertone matching
        product_undertone = (
            product.undertone_match.value
            if hasattr(product.undertone_match, "value")
            else product.undertone_match
        )
        if undertone_val == "warm" and product_undertone == "warm":
            reasons.append("—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—ë–ø–ª–æ–º—É –ø–æ–¥—Ç–æ–Ω—É")
        elif undertone_val == "cool" and product_undertone == "cool":
            reasons.append("—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ö–æ–ª–æ–¥–Ω–æ–º—É –ø–æ–¥—Ç–æ–Ω—É")

        return "; ".join(reasons) or "–≥–∞—Ä–º–æ–Ω–∏—Ä—É–µ—Ç —Å –≤–∞—à–µ–π –ø–∞–ª–∏—Ç—Ä–æ–π"

    def _generate_routine_suggestions(self, report_data: ReportData) -> str:
        """Generate routine suggestions"""
        return "# ‚è∞ –°–•–ï–ú–ê –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø\n\n**–£—Ç—Ä–æ–º**: –û—á–∏—â–µ–Ω–∏–µ ‚Üí –¢–æ–Ω–∏–∫ ‚Üí –°—ã–≤–æ—Ä–æ—Ç–∫–∞ ‚Üí –£–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º ‚Üí SPF\n\n**–í–µ—á–µ—Ä–æ–º**: –û—á–∏—â–µ–Ω–∏–µ ‚Üí –¢–æ–Ω–∏–∫ ‚Üí –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ ‚Üí –£–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º"

    def _generate_warnings_section(self, profile: UserProfile, products: List[Product]) -> str:
        """Generate warnings and compatibility section"""
        warnings = []

        # Check for incompatible combinations
        actives_used = []
        for product in products:
            actives_used.extend(product.actives)

        for pair in self._compatibility_rules.get("incompatible_pairs", []):
            if all(any(active.lower() in pair for active in actives_used) for active in pair):
                warnings.append(f"‚ö†Ô∏è –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ {pair[0]} –∏ {pair[1]} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")

        if warnings:
            return "# ‚ö†Ô∏è –í–ê–ñ–ù–´–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø\n\n" + "\n".join(warnings)
        else:
            return "# ‚úÖ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨\n\n–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã –º–µ–∂–¥—É —Å–æ–±–æ–π."

    def _generate_pro_tips(self, profile: UserProfile) -> str:
        """Generate professional tips"""
        tips = []

        sensitivity_val = (
            profile.sensitivity.value
            if hasattr(profile.sensitivity, "value")
            else profile.sensitivity
        )
        skin_type_val = (
            profile.skin_type.value if hasattr(profile.skin_type, "value") else profile.skin_type
        )
        season_val = profile.season.value if hasattr(profile.season, "value") else profile.season

        if sensitivity_val == "high":
            tips.append("üåü –í–≤–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ –æ–¥–Ω–æ–º—É, —Ç–µ—Å—Ç–∏—Ä—É—è —Ä–µ–∞–∫—Ü–∏—é")

        if skin_type_val == "combo":
            tips.append("üåü –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –¢-–∑–æ–Ω—ã –∏ —â—ë–∫")

        if season_val == "spring":
            tips.append("üåü –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —è—Ä–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ ‚Äî –æ–Ω–∏ –≤–∞—à–∞ —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞")

        if tips:
            return "# üí° –°–û–í–ï–¢–´ –í–ò–ó–ê–ñ–ò–°–¢–ê\n\n" + "\n".join(tips)
        else:
            return "# üí° –û–ë–©–ò–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n\n–°–æ–±–ª—é–¥–∞–π—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –∏ –Ω–µ —Ç–æ—Ä–æ–ø–∏—Ç–µ—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."


# Legacy compatibility functions
def build_priorities(profile: Dict) -> List[str]:
    """Build priorities from profile - legacy function"""
    priorities: List[str] = []
    concerns = profile.get("concerns") or []
    if "barrier" in concerns or profile.get("dehydrated"):
        priorities.append("barrier_repair")
    if "acne" in concerns:
        priorities.append("acne_control")
    if "pigmentation" in concerns:
        priorities.append("even_tone")
    if "redness" in concerns:
        priorities.append("calming")
    if not priorities:
        priorities.append("balanced_routine")
    return priorities


def build_tldr_and_full(result_text: str) -> Tuple[str, str]:
    """Build TL;DR and full text - legacy function"""
    lines = [l for l in (result_text or "").splitlines() if l.strip()]
    tldr = "\n".join(lines[:8])
    full = result_text
    return tldr, full


def expand(profile: Dict, rendered_text: str, products: Dict) -> Dict:
    """Expand analysis with rules - legacy function"""
    priorities = build_priorities(profile)
    tl_dr, full = build_tldr_and_full(rendered_text)
    warnings: List[str] = []
    if profile.get("sensitivity") == "high":
        warnings.append("introduce_slowly")
    if "texture" in (profile.get("concerns") or []):
        warnings.append("photosensitivity_acids")
    return {
        "profile": profile,
        "priorities": priorities,
        "routines": {},
        "compatibility": {},
        "products": products,
        "warnings": warnings,
        "tl_dr": tl_dr,
        "full_text": full,
    }
