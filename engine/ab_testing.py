"""
üß™ A/B Testing Framework - –§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ UX
–ü–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥—Å–∫–∞–∑–æ–∫, explain –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import hashlib
import json
import time
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from pathlib import Path
from enum import Enum

class ABTestStatus(Enum):
    DRAFT = "draft"
    ACTIVE = "active"
    PAUSED = "paused"
    COMPLETED = "completed"

@dataclass
class ABVariant:
    """–í–∞—Ä–∏–∞–Ω—Ç A/B —Ç–µ—Å—Ç–∞"""
    id: str
    name: str
    content: Dict[str, Any]  # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    weight: float = 0.5  # –í–µ—Å –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ (0.0-1.0)

@dataclass
class ABTest:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è A/B —Ç–µ—Å—Ç–∞"""
    id: str
    name: str
    description: str
    status: ABTestStatus
    variants: List[ABVariant]
    start_date: Optional[float] = None
    end_date: Optional[float] = None
    target_metric: str = "completion_rate"  # –ö–∞–∫—É—é –º–µ—Ç—Ä–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
    min_sample_size: int = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏
    created_at: float = None

@dataclass
class ABTestAssignment:
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ A/B —Ç–µ—Å—Ç"""
    user_id: int
    test_id: str
    variant_id: str
    assigned_at: float

@dataclass
class ABTestResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç A/B —Ç–µ—Å—Ç–∞"""
    test_id: str
    variant_id: str
    metric_name: str
    metric_value: float
    sample_size: int
    confidence_interval: Tuple[float, float]
    statistical_significance: bool

class ABTestingFramework:
    """–§—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, tests_dir: str = "data/ab_tests"):
        self.tests_dir = Path(tests_dir)
        self.tests_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.tests_file = self.tests_dir / "tests.json"
        self.assignments_file = self.tests_dir / "assignments.jsonl"
        self.results_file = self.tests_dir / "results.jsonl"
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        self.active_tests = self._load_tests()
        
        # –ö–µ—à –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.user_assignments = self._load_user_assignments()
    
    def create_test(self, test_id: str, name: str, description: str, variants: List[ABVariant]) -> ABTest:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π A/B —Ç–µ—Å—Ç"""
        
        test = ABTest(
            id=test_id,
            name=name,
            description=description,
            status=ABTestStatus.DRAFT,
            variants=variants,
            created_at=time.time()
        )
        
        self.active_tests[test_id] = test
        self._save_tests()
        
        return test
    
    def start_test(self, test_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç A/B —Ç–µ—Å—Ç"""
        if test_id not in self.active_tests:
            return False
        
        test = self.active_tests[test_id]
        test.status = ABTestStatus.ACTIVE
        test.start_date = time.time()
        
        self._save_tests()
        return True
    
    def stop_test(self, test_id: str) -> bool:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç A/B —Ç–µ—Å—Ç"""
        if test_id not in self.active_tests:
            return False
        
        test = self.active_tests[test_id]
        test.status = ABTestStatus.COMPLETED
        test.end_date = time.time()
        
        self._save_tests()
        return True
    
    def assign_user_to_variant(self, user_id: int, test_id: str) -> Optional[str]:
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—Ä–∏–∞–Ω—Ç A/B —Ç–µ—Å—Ç–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        user_key = f"{user_id}_{test_id}"
        if user_key in self.user_assignments:
            return self.user_assignments[user_key]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ—Å—Ç –∞–∫—Ç–∏–≤–µ–Ω
        if test_id not in self.active_tests:
            return None
        
        test = self.active_tests[test_id]
        if test.status != ABTestStatus.ACTIVE:
            return None
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ user_id
        variant_id = self._deterministic_variant_assignment(user_id, test)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        assignment = ABTestAssignment(
            user_id=user_id,
            test_id=test_id,
            variant_id=variant_id,
            assigned_at=time.time()
        )
        
        self._save_assignment(assignment)
        self.user_assignments[user_key] = variant_id
        
        return variant_id
    
    def get_variant_content(self, user_id: int, test_id: str, content_key: str, default_value: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        variant_id = self.assign_user_to_variant(user_id, test_id)
        if not variant_id:
            return default_value
        
        test = self.active_tests.get(test_id)
        if not test:
            return default_value
        
        # –ù–∞—Ö–æ–¥–∏–º –≤–∞—Ä–∏–∞–Ω—Ç
        variant = next((v for v in test.variants if v.id == variant_id), None)
        if not variant:
            return default_value
        
        return variant.content.get(content_key, default_value)
    
    def record_conversion(self, user_id: int, test_id: str, metric_name: str, metric_value: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é –¥–ª—è A/B —Ç–µ—Å—Ç–∞"""
        
        variant_id = self.user_assignments.get(f"{user_id}_{test_id}")
        if not variant_id:
            return
        
        result = ABTestResult(
            test_id=test_id,
            variant_id=variant_id,
            metric_name=metric_name,
            metric_value=metric_value,
            sample_size=1,
            confidence_interval=(0.0, 0.0),  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
            statistical_significance=False
        )
        
        self._save_result(result)
    
    def analyze_test_results(self, test_id: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã A/B —Ç–µ—Å—Ç–∞"""
        
        results = self._load_test_results(test_id)
        if not results:
            return {"error": "No results found"}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
        variant_stats = {}
        for result in results:
            variant_id = result.variant_id
            if variant_id not in variant_stats:
                variant_stats[variant_id] = {"values": [], "conversions": 0, "total": 0}
            
            variant_stats[variant_id]["values"].append(result.metric_value)
            variant_stats[variant_id]["total"] += 1
            if result.metric_value > 0:
                variant_stats[variant_id]["conversions"] += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        analysis = {}
        for variant_id, stats in variant_stats.items():
            values = stats["values"]
            total = stats["total"]
            conversions = stats["conversions"]
            
            if total > 0:
                mean_value = sum(values) / len(values)
                conversion_rate = conversions / total
                
                analysis[variant_id] = {
                    "sample_size": total,
                    "conversion_rate": conversion_rate,
                    "mean_value": mean_value,
                    "conversions": conversions
                }
            else:
                analysis[variant_id] = {
                    "sample_size": 0,
                    "conversion_rate": 0.0,
                    "mean_value": 0.0,
                    "conversions": 0
                }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if len(analysis) >= 2:
            best_variant = max(analysis.keys(), key=lambda v: analysis[v]["conversion_rate"])
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
            best_sample = analysis[best_variant]["sample_size"]
            best_rate = analysis[best_variant]["conversion_rate"]
            
            # –°—á–∏—Ç–∞–µ–º –∑–Ω–∞—á–∏–º—ã–º –µ—Å–ª–∏ sample size >= min_sample_size –∏ —Ä–∞–∑–Ω–∏—Ü–∞ > 5%
            test = self.active_tests.get(test_id)
            min_sample = test.min_sample_size if test else 100
            
            is_significant = (best_sample >= min_sample and 
                            best_rate > max(analysis[v]["conversion_rate"] for v in analysis.keys() if v != best_variant) + 0.05)
            
            return {
                "test_id": test_id,
                "variants": analysis,
                "winner": best_variant if is_significant else None,
                "statistical_significance": is_significant,
                "total_participants": sum(stats["sample_size"] for stats in analysis.values())
            }
        
        return {"test_id": test_id, "variants": analysis}
    
    def _deterministic_variant_assignment(self, user_id: int, test: ABTest) -> str:
        """–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞"""
        
        # –°–æ–∑–¥–∞–µ–º —Ö–µ—à –æ—Ç user_id + test_id –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        hash_input = f"{user_id}_{test.id}".encode('utf-8')
        hash_value = int(hashlib.md5(hash_input).hexdigest()[:8], 16)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
        normalized = (hash_value % 10000) / 10000.0
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
        cumulative_weight = 0.0
        for variant in test.variants:
            cumulative_weight += variant.weight
            if normalized <= cumulative_weight:
                return variant.id
        
        # Fallback –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        return test.variants[0].id if test.variants else "default"
    
    def _load_tests(self) -> Dict[str, ABTest]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        if not self.tests_file.exists():
            return {}
        
        try:
            with open(self.tests_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            tests = {}
            for test_data in data.get('tests', []):
                test_data['status'] = ABTestStatus(test_data['status'])
                variants = [ABVariant(**v) for v in test_data['variants']]
                test_data['variants'] = variants
                
                test = ABTest(**test_data)
                tests[test.id] = test
            
            return tests
        except Exception:
            return {}
    
    def _save_tests(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª"""
        tests_data = []
        for test in self.active_tests.values():
            test_dict = asdict(test)
            test_dict['status'] = test.status.value
            tests_data.append(test_dict)
        
        with open(self.tests_file, 'w', encoding='utf-8') as f:
            json.dump({"tests": tests_data}, f, indent=2, ensure_ascii=False)
    
    def _load_user_assignments(self) -> Dict[str, str]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        assignments = {}
        
        if not self.assignments_file.exists():
            return assignments
        
        with open(self.assignments_file, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    data = json.loads(line.strip())
                    assignment = ABTestAssignment(**data)
                    key = f"{assignment.user_id}_{assignment.test_id}"
                    assignments[key] = assignment.variant_id
                except Exception:
                    continue
        
        return assignments
    
    def _save_assignment(self, assignment: ABTestAssignment):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with open(self.assignments_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(asdict(assignment), ensure_ascii=False) + '\n')
    
    def _save_result(self, result: ABTestResult):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        with open(self.results_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(asdict(result), ensure_ascii=False) + '\n')
    
    def _load_test_results(self, test_id: str) -> List[ABTestResult]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞"""
        results = []
        
        if not self.results_file.exists():
            return results
        
        with open(self.results_file, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    data = json.loads(line.strip())
                    if data.get('test_id') == test_id:
                        results.append(ABTestResult(**data))
                except Exception:
                    continue
        
        return results


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_ab_framework = None

def get_ab_testing_framework() -> ABTestingFramework:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä A/B testing framework"""
    global _ab_framework
    if _ab_framework is None:
        _ab_framework = ABTestingFramework()
    return _ab_framework


def setup_default_ab_tests():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ A/B —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∏ explain"""
    
    framework = get_ab_testing_framework()
    
    # –¢–µ—Å—Ç 1: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –≤ —à–∞–≥–∞—Ö
    hints_variants = [
        ABVariant(
            id="hints_detailed",
            name="Detailed Hints",
            content={
                "Q1_HAIR_COLOR": "üîç –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –∫–æ—Ä–Ω–∏ –≤–æ–ª–æ—Å –ø—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏. –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –±–µ–∑ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è.",
                "Q3_SKIN_UNDERTONE": "ü©∏ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–µ–Ω—ã –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Å—Ç–æ—Ä–æ–Ω–µ –∑–∞–ø—è—Å—Ç—å—è: —Å–∏–Ω–∏–µ –≤–µ–Ω—ã = —Ö–æ–ª–æ–¥–Ω—ã–π –ø–æ–¥—Ç–æ–Ω, –∑–µ–ª–µ–Ω—ã–µ = —Ç–µ–ø–ª—ã–π –ø–æ–¥—Ç–æ–Ω.",
                "B1_TYPE": "üíß –û—â—É—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–º—ã–≤–∞–Ω–∏—è –≤–æ–¥–æ–π –±–µ–∑ —Å—Ä–µ–¥—Å—Ç–≤: —Å—Ç—è–Ω—É—Ç–æ—Å—Ç—å = —Å—É—Ö–∞—è –∫–æ–∂–∞, –∂–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫ = –∂–∏—Ä–Ω–∞—è –∫–æ–∂–∞."
            },
            weight=0.5
        ),
        ABVariant(
            id="hints_simple",
            name="Simple Hints", 
            content={
                "Q1_HAIR_COLOR": "üíá –í—ã–±–µ—Ä–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å",
                "Q3_SKIN_UNDERTONE": "üé® –û–ø—Ä–µ–¥–µ–ª–∏–º –≤–∞—à –ø–æ–¥—Ç–æ–Ω –∫–æ–∂–∏",
                "B1_TYPE": "üß¥ –ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –∫–æ–∂–∏?"
            },
            weight=0.5
        )
    ]
    
    framework.create_test(
        test_id="hints_experiment",
        name="Step Hints Effectiveness",
        description="–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–ª–∏—è–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –Ω–∞ completion rate",
        variants=hints_variants
    )
    
    # –¢–µ—Å—Ç 2: Explain —Ç–µ–∫—Å—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
    explain_variants = [
        ABVariant(
            id="explain_technical",
            name="Technical Explains",
            content={
                "prefix": "–ü–æ–¥–æ–π–¥–µ—Ç:",
                "undertone_warm": "—Ç–µ–ø–ª—ã–π –ø–æ–¥—Ç–æ–Ω –∫–æ–∂–∏",
                "season_autumn": "–≥–ª—É–±–æ–∫–∏–µ –æ—Å–µ–Ω–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏", 
                "contrast_medium": "—Å—Ä–µ–¥–Ω—è—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–∞"
            },
            weight=0.5
        ),
        ABVariant(
            id="explain_emotional",
            name="Emotional Explains",
            content={
                "prefix": "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:",
                "undertone_warm": "—Ç–µ–ø–ª–æ—Ç–∞ –≤–∞—à–µ–π –∫–æ–∂–∏",
                "season_autumn": "–≤–∞—à–∞ –æ—Å–µ–Ω–Ω—è—è –ø–∞–ª–∏—Ç—Ä–∞",
                "contrast_medium": "–≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è —è—Ä–∫–æ—Å—Ç—å"
            },
            weight=0.5
        )
    ]
    
    framework.create_test(
        test_id="explain_experiment", 
        name="Product Explain Wording",
        description="–¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å vs —Ç–µ—Ö–Ω–∏—á–Ω–æ—Å—Ç—å –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è—Ö —Ç–æ–≤–∞—Ä–æ–≤",
        variants=explain_variants
    )
    
    print("‚úÖ Default A/B tests created")
    return framework


if __name__ == "__main__":
    # –¢–µ—Å—Ç A/B framework
    print("üß™ A/B TESTING FRAMEWORK TEST")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
    framework = setup_default_ab_tests()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    framework.start_test("hints_experiment")
    framework.start_test("explain_experiment")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [12345, 12346, 12347, 12348, 12349]
    
    print("\nUser assignments for hints_experiment:")
    for user_id in test_users:
        variant = framework.assign_user_to_variant(user_id, "hints_experiment")
        hint = framework.get_variant_content(user_id, "hints_experiment", "Q1_HAIR_COLOR", "default hint")
        print(f"  User {user_id}: variant {variant}")
        print(f"    Hint: {hint}")
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    print(f"\nSimulating conversions...")
    for user_id in test_users:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º completion rate: detailed hints = 80%, simple hints = 70%
        variant = framework.assign_user_to_variant(user_id, "hints_experiment")
        completion_rate = 0.8 if variant == "hints_detailed" else 0.7
        
        framework.record_conversion(user_id, "hints_experiment", "completion_rate", completion_rate)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nAnalysis:")
    results = framework.analyze_test_results("hints_experiment")
    for key, value in results.items():
        print(f"  {key}: {value}")
    
    print(f"\n‚úÖ A/B testing framework ready!")






