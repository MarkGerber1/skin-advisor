"""
üéØ Source Resolver - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ ‚Üí RU –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ ‚Üí RU –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã ‚Üí –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ
"""

from __future__ import annotations

from typing import Dict, Optional, Any
from dataclasses import dataclass
from datetime import datetime

from engine.catalog_store import CatalogStore


@dataclass
class SourceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ç–æ–≤–∞—Ä–∞"""

    name: str
    priority: int
    category: str  # goldapple, ru_official, ru_marketplace, intl
    domain: str
    currency: str = "RUB"
    is_official: bool = False


@dataclass
class ResolvedProduct:
    """–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""

    original: Dict[str, Any]
    source_info: SourceInfo
    is_available: bool
    alternative: Optional[Dict[str, Any]] = None
    alternative_reason: Optional[str] = None
    checked_at: str = ""


class SourceResolver:
    """–†–∞–∑—Ä–µ—à–∏—Ç–µ–ª—å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""

    def __init__(self):
        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        self.source_priorities = {
            # ü•á –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            "goldapple.ru": SourceInfo(
                "–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ", 1, "goldapple", "goldapple.ru", "RUB", True
            ),
            "–∑–æ–ª–æ—Ç–æ–µ—è–±–ª–æ—á–∫–æ.—Ä—Ñ": SourceInfo(
                "–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ", 1, "goldapple", "–∑–æ–ª–æ—Ç–æ–µ—è–±–ª–æ—á–∫–æ.—Ä—Ñ", "RUB", True
            ),
            # ü•à –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
            "sephora.ru": SourceInfo("SEPHORA Russia", 2, "ru_official", "sephora.ru", "RUB", True),
            "letu.ru": SourceInfo("–õ'–≠—Ç—É–∞–ª—å", 2, "ru_official", "letu.ru", "RUB", True),
            "rive-gauche.ru": SourceInfo(
                "–†–∏–≤ –ì–æ—à", 2, "ru_official", "rive-gauche.ru", "RUB", True
            ),
            "aroma-zone.ru": SourceInfo(
                "Aroma-Zone", 2, "ru_official", "aroma-zone.ru", "RUB", True
            ),
            # ü•â –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
            "wildberries.ru": SourceInfo(
                "Wildberries", 3, "ru_marketplace", "wildberries.ru", "RUB", False
            ),
            "ozon.ru": SourceInfo("Ozon", 3, "ru_marketplace", "ozon.ru", "RUB", False),
            "yandex.market.ru": SourceInfo(
                "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç", 3, "ru_marketplace", "yandex.market.ru", "RUB", False
            ),
            "lamoda.ru": SourceInfo("Lamoda", 3, "ru_marketplace", "lamoda.ru", "RUB", False),
            # üåç –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã (–Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            "sephora.com": SourceInfo(
                "SEPHORA International", 4, "intl", "sephora.com", "USD", False
            ),
            "ulta.com": SourceInfo("Ulta", 4, "intl", "ulta.com", "USD", False),
            "cultbeauty.com": SourceInfo("Cult Beauty", 4, "intl", "cultbeauty.com", "GBP", False),
            "lookfantastic.com": SourceInfo(
                "LookFantastic", 4, "intl", "lookfantastic.com", "GBP", False
            ),
        }

    def _extract_domain_from_url(self, url: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –∏–∑ URL"""
        if not url:
            return ""

        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        url = url.replace("https://", "").replace("http://", "")

        # –ë–µ—Ä–µ–º –¥–æ–º–µ–Ω –¥–æ –ø–µ—Ä–≤–æ–≥–æ —Å–ª–µ—à–∞
        domain = url.split("/")[0].split("?")[0]

        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        return domain.lower()

    def _get_source_info(self, url: str) -> SourceInfo:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–æ URL"""
        domain = self._extract_domain_from_url(url)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞
        if domain in self.source_priorities:
            return self.source_priorities[domain]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–¥–ª—è –ø–æ–¥–¥–æ–º–µ–Ω–æ–≤)
        for known_domain, info in self.source_priorities.items():
            if known_domain in domain or domain in known_domain:
                return info

        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ - –Ω–∏–∑—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        return SourceInfo("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", 999, "unknown", domain, "RUB", False)

    def resolve_source(self, product: Dict[str, Any]) -> ResolvedProduct:
        """
        –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π

        Args:
            product: –¢–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞

        Returns:
            ResolvedProduct: –¢–æ–≤–∞—Ä —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL —Ç–æ–≤–∞—Ä–∞
            product_url = (
                product.get("link", "") or product.get("buy_url", "") or product.get("url", "")
            )

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫
            source_info = self._get_source_info(product_url)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
            in_stock = product.get("in_stock", True)
            price = product.get("price", 0)

            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –±–µ–∑ —Ü–µ–Ω—ã - –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            if not in_stock or price <= 0:
                alternative = self._find_alternative(product)
                alternative_reason = "out_of_stock" if not in_stock else "no_price"
            else:
                alternative = None
                alternative_reason = None

            return ResolvedProduct(
                original=product,
                source_info=source_info,
                is_available=in_stock and price > 0,
                alternative=alternative,
                alternative_reason=alternative_reason,
                checked_at=datetime.now().isoformat(),
            )

        except Exception as e:
            print(f"‚ùå Error resolving source for product {product.get('id', 'unknown')}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            return ResolvedProduct(
                original=product,
                source_info=SourceInfo("–û—à–∏–±–∫–∞", 999, "error", "unknown", "RUB", False),
                is_available=False,
                checked_at=datetime.now().isoformat(),
            )

    def _find_alternative(self, product: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

        –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞:
        1. –¢–æ—Ç –∂–µ –±—Ä–µ–Ω–¥ + –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–¥—Ä—É–≥–æ–π –æ–±—ä–µ–º/–æ—Ç—Ç–µ–Ω–æ–∫)
        2. –î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        3. –ê–Ω–∞–ª–æ–≥ –∏–∑ –¥—Ä—É–≥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∑–∞–º–µ–Ω–∞ –ø–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é)
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
            catalog_path = "assets/fixed_catalog.yaml"  # –ú–æ–∂–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞—Ç—å
            catalog_store = CatalogStore.instance(catalog_path)
            catalog = catalog_store.get()

            product_brand = product.get("brand", "").lower()
            product_category = product.get("category", "").lower()
            product_id = product.get("id", "")

            alternatives = []
            best_alternative = None
            best_priority = 999

            for item in catalog:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä
                if item.id == product_id or str(getattr(item, "key", "")) == str(product_id):
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
                if not getattr(item, "in_stock", True) or getattr(item, "price", 0) <= 0:
                    continue

                item_brand = getattr(item, "brand", "").lower()
                item_category = getattr(item, "category", "").lower()

                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–æ—Ç –∂–µ –±—Ä–µ–Ω–¥, –¥—Ä—É–≥–∞—è –º–æ–¥–µ–ª—å (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                if item_brand == product_brand and item_category == product_category:
                    url = getattr(item, "buy_url", "") or getattr(item, "link", "")
                    source_info = self._get_source_info(url)

                    if source_info.priority < best_priority:
                        best_priority = source_info.priority
                        best_alternative = {
                            "id": item.id,
                            "name": getattr(item, "title", item.name),
                            "brand": item.brand,
                            "price": item.price,
                            "price_currency": getattr(item, "price_currency", "RUB"),
                            "category": item.category,
                            "link": url,
                            "source_name": source_info.name,
                            "source_priority": source_info.priority,
                            "alternative_reason": "–¥—Ä—É–≥–æ–π_–≤–∞—Ä–∏–∞–Ω—Ç_—Ç–æ–≤–∞—Ä–∞",
                        }

                # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –î—Ä—É–≥–∞—è –º–∞—Ä–∫–∞, —Ç–∞ –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è (—Å—Ä–µ–¥–Ω–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
                elif item_category == product_category and not best_alternative:
                    url = getattr(item, "buy_url", "") or getattr(item, "link", "")
                    source_info = self._get_source_info(url)

                    if source_info.priority < best_priority:
                        best_priority = source_info.priority
                        best_alternative = {
                            "id": item.id,
                            "name": getattr(item, "title", item.name),
                            "brand": item.brand,
                            "price": item.price,
                            "price_currency": getattr(item, "price_currency", "RUB"),
                            "category": item.category,
                            "link": url,
                            "source_name": source_info.name,
                            "source_priority": source_info.priority,
                            "alternative_reason": "–∞–Ω–∞–ª–æ–≥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                        }

            return best_alternative

        except Exception as e:
            print(f"‚ùå Error finding alternative for product {product.get('id', 'unknown')}: {e}")
            return None

    def get_source_display_name(self, product: Dict[str, Any]) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        product_url = (
            product.get("link", "") or product.get("buy_url", "") or product.get("url", "")
        )
        source_info = self._get_source_info(product_url)

        # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_names = {
            "goldapple": "–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ",
            "ru_official": "–û—Ñ–∏—Ü–∏–∞–ª. –º–∞–≥–∞–∑–∏–Ω",
            "ru_marketplace": "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å",
            "intl": "–ó–∞—Ä—É–±–µ–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω",
            "unknown": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
        }

        return display_names.get(source_info.category, source_info.name)

    def get_source_priority(self, product: Dict[str, Any]) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞"""
        product_url = (
            product.get("link", "") or product.get("buy_url", "") or product.get("url", "")
        )
        source_info = self._get_source_info(product_url)
        return source_info.priority


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_source_resolver = None


def get_source_resolver() -> SourceResolver:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä SourceResolver"""
    global _source_resolver
    if _source_resolver is None:
        _source_resolver = SourceResolver()
    return _source_resolver


def enhance_product_with_source_info(product: Dict[str, Any]) -> Dict[str, Any]:
    """
    –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ

    Args:
        product: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä

    Returns:
        Dict: –¢–æ–≤–∞—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    """
    resolver = get_source_resolver()
    resolved = resolver.resolve_source(product)

    enhanced = dict(product)  # –ö–æ–ø–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    enhanced["source_name"] = resolver.get_source_display_name(product)
    enhanced["source_priority"] = resolver.get_source_priority(product)
    enhanced["source_category"] = resolved.source_info.category
    enhanced["is_available"] = resolved.is_available
    enhanced["checked_at"] = resolved.checked_at

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if resolved.alternative:
        enhanced["alternative"] = resolved.alternative
        enhanced["alternative_reason"] = resolved.alternative_reason

    return enhanced
