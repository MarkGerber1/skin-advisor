#!/usr/bin/env python3
"""
üîó –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –ø–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤ –¥–ª—è –±–ª–æ–∫–∞ "–ß—Ç–æ –∫—É–ø–∏—Ç—å"
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç: Gold Apple ‚Üí RU Official ‚Üí RU Marketplace ‚Üí Intl Authorized
"""

from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass
from datetime import datetime
import re

from engine.source_prioritizer import get_source_prioritizer, SourceInfo
from engine.catalog import get_catalog_manager
from engine.models import Product, UserProfile


@dataclass
class ResolvedProduct:
    """–¢–æ–≤–∞—Ä —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏"""
    original: Dict[str, Any]  # –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    source_info: SourceInfo   # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    is_available: bool        # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    alternative: Optional[Dict[str, Any]] = None  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä
    alternative_reason: Optional[str] = None      # –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã
    checked_at: str = ""      # –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    currency_verified: bool = False  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª—é—Ç—ã


class SourceResolver:
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏ –ø–æ–∏—Å–∫–æ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤"""
    
    def __init__(self):
        self.source_prioritizer = get_source_prioritizer()
        self.catalog_manager = get_catalog_manager()
    
    def resolve_source(self, product: Dict[str, Any]) -> ResolvedProduct:
        """
        –†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        
        Args:
            product: –¢–æ–≤–∞—Ä –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            
        Returns:
            ResolvedProduct: –¢–æ–≤–∞—Ä —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        original_link = product.get("ref_link") or product.get("link", "")
        source_info = self.source_prioritizer.get_source_info(original_link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        is_available = self._check_availability(product)
        
        # –ï—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        alternative = None
        alternative_reason = None
        
        if not is_available:
            alternative, alternative_reason = self._find_alternative(product)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—É
        currency_verified = self._verify_currency(product)
        
        return ResolvedProduct(
            original=product,
            source_info=source_info,
            is_available=is_available,
            alternative=alternative,
            alternative_reason=alternative_reason,
            checked_at=datetime.now().isoformat(),
            currency_verified=currency_verified
        )
    
    def _check_availability(self, product: Dict[str, Any]) -> bool:
        """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ in_stock
        if not product.get("in_stock", True):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if not (product.get("ref_link") or product.get("link")):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ü–µ–Ω–∞
        if not product.get("price"):
            return False
        
        return True
    
    def _find_alternative(self, product: Dict[str, Any]) -> Tuple[Optional[Dict[str, Any]], Optional[str]]:
        """
        –ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        
        –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞:
        1. –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≥–æ –∂–µ –ø—Ä–æ–¥—É–∫—Ç–∞ (–¥—Ä—É–≥–æ–π –æ—Ç—Ç–µ–Ω–æ–∫/–ø–æ—Å—Ç–∞–≤—â–∏–∫)
        2. –¢–æ–≤–∞—Ä —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
        3. –£—á–µ—Ç —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –¥–ª—è –æ—Ç—Ç–µ–Ω–∫–æ–≤
        
        Returns:
            (alternative_product, reason): –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–≤–∞—Ä –∏ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–º–µ–Ω—ã
        """
        try:
            catalog = self.catalog_manager.get_catalog()
            original_category = product.get("category", "")
            original_price = float(product.get("price", 0))
            
            # 1. –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≥–æ –∂–µ –ø—Ä–æ–¥—É–∫—Ç–∞
            same_product_alternatives = self._find_same_product_variants(
                product, catalog, original_category, original_price
            )
            
            if same_product_alternatives:
                best_alt = self._pick_best_by_source_priority(same_product_alternatives)
                return best_alt, "–¥—Ä—É–≥–æ–π_–≤–∞—Ä–∏–∞–Ω—Ç_—Ç–æ–≤–∞—Ä–∞"
            
            # 2. –ü–æ–∏—Å–∫ –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ
            category_alternatives = self._find_category_alternatives(
                product, catalog, original_category, original_price
            )
            
            if category_alternatives:
                best_alt = self._pick_best_by_source_priority(category_alternatives)
                return best_alt, "–∞–Ω–∞–ª–æ–≥_–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            
            # 3. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å–µ–∑–æ–Ω–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            universal_alternatives = self._find_universal_alternatives(
                product, catalog, original_category
            )
            
            if universal_alternatives:
                best_alt = self._pick_best_by_source_priority(universal_alternatives)
                return best_alt, "—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π_–≤–∞—Ä–∏–∞–Ω—Ç"
            
            return None, None
            
        except Exception as e:
            print(f"‚ùå Error finding alternative for {product.get('id', 'unknown')}: {e}")
            return None, None
    
    def _find_same_product_variants(self, product: Dict[str, Any], catalog: List[Product], 
                                   category: str, price: float) -> List[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≥–æ –∂–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""
        alternatives = []
        product_brand = product.get("brand", "").lower()
        product_name_base = self._extract_base_name(product.get("name", ""))
        
        # –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω ¬±20%
        price_min = price * 0.8
        price_max = price * 1.2
        
        for catalog_product in catalog:
            if not catalog_product.in_stock:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–µ–Ω–¥
            if catalog_product.brand.lower() != product_brand:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–±–µ–∑ –æ—Ç—Ç–µ–Ω–∫–∞)
            catalog_name_base = self._extract_base_name(catalog_product.name)
            if catalog_name_base != product_name_base:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            catalog_price = float(catalog_product.price) if catalog_product.price else 0
            if not (price_min <= catalog_price <= price_max):
                continue
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dict —Ñ–æ—Ä–º–∞—Ç
            alt_dict = self._product_to_dict(catalog_product)
            if alt_dict:
                alternatives.append(alt_dict)
        
        return alternatives[:3]  # –ú–∞–∫—Å–∏–º—É–º 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
    
    def _find_category_alternatives(self, product: Dict[str, Any], catalog: List[Product],
                                   category: str, price: float) -> List[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        alternatives = []
        
        # –¶–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω ¬±30% –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π–Ω—ã—Ö –∞–Ω–∞–ª–æ–≥–æ–≤
        price_min = price * 0.7
        price_max = price * 1.3
        
        for catalog_product in catalog:
            if not catalog_product.in_stock:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–µ—á–µ—Ç–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
            if not self._categories_match(category, catalog_product.category):
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            catalog_price = float(catalog_product.price) if catalog_product.price else 0
            if not (price_min <= catalog_price <= price_max):
                continue
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä
            if (catalog_product.brand.lower() == product.get("brand", "").lower() and
                catalog_product.name.lower() == product.get("name", "").lower()):
                continue
            
            alt_dict = self._product_to_dict(catalog_product)
            if alt_dict:
                alternatives.append(alt_dict)
        
        return alternatives[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    
    def _find_universal_alternatives(self, product: Dict[str, Any], catalog: List[Product],
                                    category: str) -> List[Dict[str, Any]]:
        """–ù–∞–π—Ç–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"""
        alternatives = []
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏-–∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏
        universal_mappings = {
            "foundation": ["bb_cream", "tinted_moisturizer", "concealer"],
            "lipstick": ["lip_tint", "lip_balm_tinted"],
            "mascara": ["lash_serum"],
            "cleanser": ["micellar_water", "cleansing_oil"],
            "moisturizer": ["day_cream", "night_cream", "face_oil"]
        }
        
        category_lower = category.lower()
        universal_categories = []
        
        for main_cat, alternatives_cats in universal_mappings.items():
            if main_cat in category_lower:
                universal_categories.extend(alternatives_cats)
        
        if not universal_categories:
            return []
        
        for catalog_product in catalog:
            if not catalog_product.in_stock:
                continue
            
            catalog_category = catalog_product.category.lower()
            if any(univ_cat in catalog_category for univ_cat in universal_categories):
                alt_dict = self._product_to_dict(catalog_product)
                if alt_dict:
                    alternatives.append(alt_dict)
        
        return alternatives[:3]
    
    def _extract_base_name(self, name: str) -> str:
        """–ò–∑–≤–ª–µ—á—å –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±–µ–∑ –æ—Ç—Ç–µ–Ω–∫–∞"""
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç—Ç–µ–Ω–∫–æ–≤
        shade_patterns = [
            r'\s*-\s*\d+.*$',  # - 01 Fair, - 02 Light
            r'\s*\(\w+.*\)$',  # (Fair), (Light Beige)
            r'\s+\d+\w*$',     # 01, 02L, 1N1
            r'\s+(Fair|Light|Medium|Dark|Deep).*$',
            r'\s+(–°–≤–µ—Ç–ª—ã–π|–°—Ä–µ–¥–Ω–∏–π|–¢–µ–º–Ω—ã–π).*$'
        ]
        
        base_name = name
        for pattern in shade_patterns:
            base_name = re.sub(pattern, '', base_name, flags=re.IGNORECASE)
        
        return base_name.strip()
    
    def _categories_match(self, cat1: str, cat2: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–µ—á–µ—Ç–∫–æ–µ)"""
        if not cat1 or not cat2:
            return False
        
        cat1_lower = cat1.lower()
        cat2_lower = cat2.lower()
        
        # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if cat1_lower == cat2_lower:
            return True
        
        # –°–∏–Ω–æ–Ω–∏–º—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        synonyms = {
            "foundation": ["—Ç–æ–Ω–∞–ª—å–Ω—ã–π", "–æ—Å–Ω–æ–≤–∞", "—Ç–æ–Ω–∞–ª—å–Ω–∞—è"],
            "concealer": ["–∫–æ–Ω—Å–∏–ª–µ—Ä", "–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä"],
            "powder": ["–ø—É–¥—Ä–∞"],
            "blush": ["—Ä—É–º—è–Ω–∞"],
            "lipstick": ["–ø–æ–º–∞–¥–∞"],
            "mascara": ["—Ç—É—à—å"],
            "cleanser": ["–æ—á–∏—â–∞—é—â–µ–µ", "–≥–µ–ª—å", "–ø–µ–Ω–∫–∞"],
            "toner": ["—Ç–æ–Ω–∏–∫"],
            "serum": ["—Å—ã–≤–æ—Ä–æ—Ç–∫–∞"],
            "moisturizer": ["—É–≤–ª–∞–∂–Ω—è—é—â–µ–µ", "–∫—Ä–µ–º"]
        }
        
        for eng_category, rus_alternatives in synonyms.items():
            if eng_category in cat1_lower or any(alt in cat1_lower for alt in rus_alternatives):
                if eng_category in cat2_lower or any(alt in cat2_lower for alt in rus_alternatives):
                    return True
        
        return False
    
    def _pick_best_by_source_priority(self, alternatives: List[Dict[str, Any]]) -> Dict[str, Any]:
        """–í—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if not alternatives:
            return None
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        prioritized = self.source_prioritizer.sort_products_by_source_priority(alternatives)
        return prioritized[0] if prioritized else alternatives[0]
    
    def _product_to_dict(self, product: Product) -> Optional[Dict[str, Any]]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Product –≤ dict —Ñ–æ—Ä–º–∞—Ç"""
        try:
            from engine.selector import _with_affiliate, _as_dict
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
            partner_code = "S1"
            redirect_base = None
            
            return {
                "id": getattr(product, 'key', getattr(product, 'id', '')),
                "brand": product.brand,
                "name": getattr(product, 'title', product.name),
                "category": product.category,
                "price": float(product.price) if product.price else 0.0,
                "price_currency": getattr(product, 'price_currency', 'RUB'),
                "link": getattr(product, 'buy_url', getattr(product, 'link', '')),
                "ref_link": _with_affiliate(
                    getattr(product, 'buy_url', getattr(product, 'link', '')), 
                    partner_code, 
                    redirect_base
                ),
                "in_stock": product.in_stock,
                "explain": "",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            }
        except Exception as e:
            print(f"‚ùå Error converting product {product.id} to dict: {e}")
            return None
    
    def _verify_currency(self, product: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–∞–ª—é—Ç—ã"""
        currency = product.get("price_currency", "")
        price = product.get("price", 0)
        
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not currency or not price:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        supported_currencies = ["RUB", "‚ÇΩ", "USD", "$", "EUR", "‚Ç¨"]
        return currency in supported_currencies


def resolve_products_with_alternatives(products: List[Dict[str, Any]]) -> List[ResolvedProduct]:
    """
    –†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
    
    Args:
        products: –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        
    Returns:
        List[ResolvedProduct]: –¢–æ–≤–∞—Ä—ã —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    """
    resolver = SourceResolver()
    resolved_products = []
    
    for product in products:
        resolved = resolver.resolve_source(product)
        resolved_products.append(resolved)
    
    return resolved_products


def enhance_product_with_source_info(product: Dict[str, Any]) -> Dict[str, Any]:
    """
    –î–æ–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    
    Args:
        product: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–æ–≤–∞—Ä
        
    Returns:
        Dict: –¢–æ–≤–∞—Ä —Å –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
    """
    resolver = SourceResolver()
    resolved = resolver.resolve_source(product)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Ç–æ–≤–∞—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    enhanced = product.copy()
    enhanced.update({
        "source_name": resolved.source_info.name,
        "source_priority": resolved.source_info.priority,
        "source_category": resolved.source_info.category,
        "is_available": resolved.is_available,
        "checked_at": resolved.checked_at,
        "currency_verified": resolved.currency_verified
    })
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ - –∑–∞–º–µ–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–≤–∞—Ä
    if resolved.alternative:
        enhanced.update({
            "original_id": product.get("id"),
            "original_name": product.get("name"),
            "alternative_reason": resolved.alternative_reason,
            **resolved.alternative  # –ó–∞–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
        })
    
    return enhanced


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_source_resolver = None

def get_source_resolver() -> SourceResolver:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä source resolver"""
    global _source_resolver
    if _source_resolver is None:
        _source_resolver = SourceResolver()
    return _source_resolver
