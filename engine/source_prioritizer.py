#!/usr/bin/env python3
"""
üéØ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é: –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ ‚Üí –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ ‚Üí –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã ‚Üí –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ
"""

from typing import List, Dict, Any, Optional
from dataclasses import dataclass
from urllib.parse import urlparse


@dataclass
class SourceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ —Ç–æ–≤–∞—Ä–∞"""

    domain: str
    priority: int  # –ß–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    category: str  # golden_apple, ru_official, ru_marketplace, foreign
    name: str


class SourcePrioritizer:
    """–°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""

    def __init__(self):
        self.sources = self._init_sources()

    def _init_sources(self) -> Dict[str, SourceInfo]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
        sources = {}

        # 1. –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ (–Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        golden_apple_domains = ["goldapple.ru", "goldenappletree.ru", "–∑–æ–ª–æ—Ç–æ–µ—è–±–ª–æ—á–∫–æ.—Ä—Ñ"]
        for domain in golden_apple_domains:
            sources[domain] = SourceInfo(
                domain=domain, priority=1, category="golden_apple", name="–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ"
            )

        # 2. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        ru_official = [
            ("sephora.ru", "Sephora Russia"),
            ("letu.ru", "–õ'–≠—Ç—É–∞–ª—å"),
            ("rive-gauche.ru", "–†–∏–≤ –ì–æ—à"),
            ("letual.ru", "–õ'–≠—Ç—É–∞–ª—å"),
            ("pudra.ru", "–ü—É–¥—Ä–∞.—Ä—É"),
            ("brownsbeauty.ru", "Browns Beauty"),
            ("–∑–æ–ª—Ç–æ–µ—è–±–ª–æ–∫–æ.—Ä—Ñ", "–ó–æ–ª—Ç–æ–µ –Ø–±–ª–æ–∫–æ"),
        ]
        for domain, name in ru_official:
            sources[domain] = SourceInfo(
                domain=domain, priority=2, category="ru_official", name=name
            )

        # 3. –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
        ru_marketplaces = [
            ("wildberries.ru", "Wildberries"),
            ("ozon.ru", "Ozon"),
            ("yandex.market.ru", "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç"),
            ("market.yandex.ru", "–Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç"),
            ("lamoda.ru", "Lamoda"),
            ("goods.ru", "Goods.ru"),
        ]
        for domain, name in ru_marketplaces:
            sources[domain] = SourceInfo(
                domain=domain, priority=3, category="ru_marketplace", name=name
            )

        # 4. –ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
        foreign_authorized = [
            ("sephora.com", "Sephora International"),
            ("ulta.com", "Ulta Beauty"),
            ("beautylish.com", "Beautylish"),
            ("dermstore.com", "Dermstore"),
            ("lookfantastic.com", "LookFantastic"),
            ("feelunique.com", "FeelUnique"),
            ("notino.com", "Notino"),
        ]
        for domain, name in foreign_authorized:
            sources[domain] = SourceInfo(domain=domain, priority=4, category="foreign", name=name)

        return sources

    def get_domain_from_url(self, url: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–µ–Ω –∏–∑ URL"""
        try:
            parsed = urlparse(url)
            domain = parsed.netloc.lower()
            # –£–±–∏—Ä–∞–µ–º www. –ø—Ä–µ—Ñ–∏–∫—Å
            if domain.startswith("www."):
                domain = domain[4:]
            return domain
        except Exception:
            return None

    def get_source_info(self, url: str) -> Optional[SourceInfo]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–æ URL"""
        domain = self.get_domain_from_url(url)
        if not domain:
            return None

        return self.sources.get(domain)

    def get_priority(self, url: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)"""
        source_info = self.get_source_info(url)
        if source_info:
            return source_info.priority
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ - —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            return 999

    def sort_products_by_source_priority(
        self, products: List[Dict[str, Any]]
    ) -> List[Dict[str, Any]]:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""

        def get_product_priority(product):
            link = product.get("link") or product.get("ref_link") or ""
            return self.get_priority(link)

        return sorted(products, key=get_product_priority)

    def get_best_source_product(self, products: List[Dict[str, Any]]) -> Optional[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –Ω–∞–∏–≤—ã—Å—à–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        if not products:
            return None

        sorted_products = self.sort_products_by_source_priority(products)
        return sorted_products[0]

    def group_by_source_category(
        self, products: List[Dict[str, Any]]
    ) -> Dict[str, List[Dict[str, Any]]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        groups = {
            "golden_apple": [],
            "ru_official": [],
            "ru_marketplace": [],
            "foreign": [],
            "unknown": [],
        }

        for product in products:
            link = product.get("link") or product.get("ref_link") or ""
            source_info = self.get_source_info(link)

            if source_info:
                groups[source_info.category].append(product)
            else:
                groups["unknown"].append(product)

        return groups

    def get_prioritized_links(self, product: Dict[str, Any]) -> List[Dict[str, str]]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        –û–∂–∏–¥–∞–µ—Ç —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫
        """
        links = []

        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞
        main_link = product.get("link") or product.get("ref_link")
        if main_link:
            source_info = self.get_source_info(main_link)
            links.append(
                {
                    "url": main_link,
                    "priority": source_info.priority if source_info else 999,
                    "source_name": source_info.name if source_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
                    "category": source_info.category if source_info else "unknown",
                }
            )

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        additional_links = product.get("additional_links", [])
        for link_info in additional_links:
            url = link_info.get("url")
            if url:
                source_info = self.get_source_info(url)
                links.append(
                    {
                        "url": url,
                        "priority": source_info.priority if source_info else 999,
                        "source_name": source_info.name if source_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫",
                        "category": source_info.category if source_info else "unknown",
                    }
                )

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        return sorted(links, key=lambda x: x["priority"])

    def get_source_stats(self, products: List[Dict[str, Any]]) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        stats = {}
        groups = self.group_by_source_category(products)

        for category, category_products in groups.items():
            stats[category] = len(category_products)

        return stats


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–æ–µ–∫—Ç–µ
_prioritizer = None


def get_source_prioritizer() -> SourcePrioritizer:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ç–æ—Ä–∞"""
    global _prioritizer
    if _prioritizer is None:
        _prioritizer = SourcePrioritizer()
    return _prioritizer


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    prioritizer = SourcePrioritizer()

    test_urls = [
        "https://wildberries.ru/catalog/123",
        "https://goldapple.ru/product/456",
        "https://sephora.com/product/789",
        "https://letu.ru/product/abc",
        "https://unknown-site.com/product/xyz",
    ]

    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏:")
    for url in test_urls:
        priority = prioritizer.get_priority(url)
        source_info = prioritizer.get_source_info(url)
        source_name = source_info.name if source_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        print(f"  {url} ‚Üí –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}, –ò—Å—Ç–æ—á–Ω–∏–∫: {source_name}")
