#!/usr/bin/env python
"""
–ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway
–í–∫–ª—é—á–∞–µ—Ç GitHub upload + Railway deployment
"""

import subprocess
import sys
import os
import time
from pathlib import Path

def run_command(command, description, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print(f"\nüîß {description}...")
    print(f"   üìù –ö–æ–º–∞–Ω–¥–∞: {command}")

    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            cwd=cwd or "."
        )

        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–•")
            if result.stdout.strip():
                # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                lines = result.stdout.strip().split('\n')
                if len(lines) > 10:
                    print(f"   üìÑ ... ({len(lines)} —Å—Ç—Ä–æ–∫)")
                    for line in lines[-5:]:
                        print(f"   üìÑ {line}")
                else:
                    for line in lines:
                        print(f"   üìÑ {line}")
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê (–∫–æ–¥: {result.returncode})")
            if result.stderr.strip():
                print(f"   ‚ö†Ô∏è  {result.stderr.strip()}")
            return False

    except Exception as e:
        print(f"‚ùå {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def check_prerequisites():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")

    tools = [
        ("git", "Git –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"),
        ("node", "Node.js –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è Railway CLI"),
        ("npm", "npm –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    ]

    missing = []
    for tool, description in tools:
        try:
            result = subprocess.run(f"{tool} --version", shell=True, capture_output=True)
            if result.returncode == 0:
                version = result.stdout.decode().strip().split('\n')[0]
                print(f"   ‚úÖ {tool}: {version}")
            else:
                missing.append((tool, description))
        except:
            missing.append((tool, description))

    if missing:
        print("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        for tool, desc in missing:
            print(f"   ‚ùå {tool}: {desc}")
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Railway CLI
    try:
        result = subprocess.run("railway --version", shell=True, capture_output=True)
        if result.returncode == 0:
            version = result.stdout.decode().strip()
            print(f"   ‚úÖ railway: {version}")
        else:
            print("   ‚ö†Ô∏è  Railway CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            print("   üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: npm install -g @railway/cli")
            return False
    except:
        print("   ‚ö†Ô∏è  Railway CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    return True

def deploy_to_github():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ GitHub"""
    print("\n" + "="*60)
    print("üöÄ –≠–¢–ê–ü 1: –ó–ê–ì–†–£–ó–ö–ê –ù–ê GITHUB")
    print("="*60)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub
    github_script = "auto_github_deploy.py"
    if os.path.exists(github_script):
        return run_command(f"python {github_script}", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub")
    else:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
        print("   ‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç auto_github_deploy.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—á–Ω–æ–π —Å–ø–æ—Å–æ–±")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if not run_command("git status --porcelain", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git"):
            return False

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        if not run_command("git add .", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ Git"):
            return False

        # –ö–æ–º–º–∏—Ç–∏–º
        commit_msg = f"üöÄ Railway Deployment: {time.strftime('%Y-%m-%d %H:%M:%S')}"
        if not run_command(f'git commit -m "{commit_msg}"', "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"):
            return False

        # Push
        if not run_command("git push origin master", "Push –Ω–∞ GitHub"):
            return False

    return True

def deploy_to_railway():
    """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –Ω–∞ Railway"""
    print("\n" + "="*60)
    print("üöÇ –≠–¢–ê–ü 2: –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ù–ê RAILWAY")
    print("="*60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ Railway
    print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Railway...")
    login_check = subprocess.run("railway status", shell=True, capture_output=True)
    if login_check.returncode != 0:
        print("   ‚ö†Ô∏è  –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ Railway")
        print("   üí° –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π: railway login")
        if not run_command("railway login", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Railway"):
            return False

    # –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ Railway –ø—Ä–æ–µ–∫—Ç–∞...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–æ–µ–∫—Ç
    project_check = subprocess.run("railway list", shell=True, capture_output=True, text=True)
    if "skin" in project_check.stdout.lower() or "advisor" in project_check.stdout.lower():
        print("   ‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç")
        # TODO: –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞
    else:
        print("   üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...")
        if not run_command("railway init skincare-bot --source github", "–°–æ–∑–¥–∞–Ω–∏–µ Railway –ø—Ä–æ–µ–∫—Ç–∞"):
            print("   ‚ö†Ô∏è  –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±...")
            if not run_command("railway init", "–°–æ–∑–¥–∞–Ω–∏–µ Railway –ø—Ä–æ–µ–∫—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π)"):
                return False

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")

    env_vars = {
        "BOT_TOKEN": "your_telegram_bot_token_here",
        "USE_WEBHOOK": "1",
        "WEBHOOK_BASE": "https://your-railway-app.railway.app",
        "AFFILIATE_TAG": "skincare_bot",
        "LOG_LEVEL": "INFO",
        "ANALYTICS_ENABLED": "1"
    }

    for var_name, default_value in env_vars.items():
        print(f"   üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ {var_name}...")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        check_cmd = f"railway variables get {var_name}"
        check_result = subprocess.run(check_cmd, shell=True, capture_output=True)

        if check_result.returncode == 0:
            print(f"   ‚úÖ {var_name} —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        else:
            print(f"   ‚ö†Ô∏è  {var_name} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é)")

    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
    if not run_command("railway up", "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Railway"):
        return False

    return True

def get_deployment_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
    print("\n" + "="*60)
    print("üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ò")
    print("="*60)

    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        url_result = subprocess.run("railway domain", shell=True, capture_output=True, text=True)
        if url_result.returncode == 0:
            app_url = url_result.stdout.strip()
            print(f"üåê URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {app_url}")

            webhook_url = f"{app_url}/webhook"
            print(f"üîó Webhook URL: {webhook_url}")

            print("\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞:")
            print("1. –ó–∞–π–¥–∏—Ç–µ –∫ @BotFather –≤ Telegram"            print("2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞"            print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook:"            print(f"   /setwebhook {webhook_url}")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status_result = subprocess.run("railway status", shell=True, capture_output=True, text=True)
        if status_result.returncode == 0:
            print("
üìä –°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"            print(status_result.stdout)

    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: {e}")

def create_deployment_summary():
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
    summary_file = "RAILWAY_DEPLOYMENT_SUMMARY.md"

    summary_content = f"""# üöÄ Railway Deployment Summary

**–í—Ä–µ–º—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:** {time.strftime('%Y-%m-%d %H:%M:%S')}

## ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏:

### 1. GitHub Upload
- ‚úÖ –ü—Ä–æ–µ–∫—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub
- ‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã
- üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: https://github.com/MarkGerber1/skin-advisor

### 2. Railway Deployment
- ‚úÖ –ü—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ Railway
- ‚úÖ Docker –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω
- ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ

## üîß –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:

```bash
BOT_TOKEN=your_telegram_bot_token_here
USE_WEBHOOK=1
WEBHOOK_BASE=https://your-railway-app.railway.app
AFFILIATE_TAG=skincare_bot
LOG_LEVEL=INFO
ANALYTICS_ENABLED=1
```

## üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:

### 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –≤ BotFather
/setwebhook https://your-railway-app.railway.app/webhook
```

### 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ `/start` –±–æ—Ç—É –≤ Telegram
- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∫–æ—Ä–∑–∏–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏: `railway logs`

### 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
- Railway Dashboard: https://railway.app
- –õ–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: `railway logs`
- –°—Ç–∞—Ç—É—Å: `railway status`

## üö® –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:

### Webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ webhook
curl https://your-railway-app.railway.app/webhook

# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏
railway logs
```

### –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:
```bash
# –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN
railway variables get BOT_TOKEN

# –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
railway restart
```

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞:

- üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: `RAILWAY_DEPLOY_GUIDE.md`
- üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: `python check_deployment_readiness.py`
- üöÄ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: `python deploy_to_railway.py`

---
*–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∫—Ä–∏–ø—Ç–æ–º deploy_to_railway.py*
"""

    try:
        with open(summary_file, 'w', encoding='utf-8') as f:
            f.write(summary_content)
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {summary_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    print("üöÄ === –ü–û–õ–ù–ê–Ø –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø ===\n")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç:")
    print("1. ‚úÖ –ó–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub")
    print("2. ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ Railway")
    print("3. ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("4. ‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("5. üìä –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏")
    print()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
    if not check_prerequisites():
        print("\n‚ùå –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        return False

    # –®–∞–≥ 1: GitHub
    if not deploy_to_github():
        print("\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ GitHub!")
        return False

    # –®–∞–≥ 2: Railway
    if not deploy_to_railway():
        print("\n‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Railway!")
        return False

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
    get_deployment_info()

    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    create_deployment_summary()

    print("\n" + "="*60)
    print("üéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
    print("="*60)
    print()
    print("üìã –ß–¢–û –î–ê–õ–¨–®–ï:")
    print("1. ‚úÖ –ü—Ä–æ–µ–∫—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –Ω–∞ Railway")
    print("2. üîß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ BOT_TOKEN –≤ Railway Dashboard")
    print("3. üì± –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook –≤ @BotFather")
    print("4. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    print("5. üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ railway logs")
    print()
    print("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: RAILWAY_DEPLOY_GUIDE.md")
    print("üìÑ –û—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏: RAILWAY_DEPLOYMENT_SUMMARY.md")

    return True

if __name__ == "__main__":
    try:
        success = main()
        input("\nüéØ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
