PROJECT FILES (Continued)
# FILE: .skin-advisor/app/infra/settings.py
Python

import yaml
from functools import lru_cache
from pydantic import BaseModel
from pydantic_settings import BaseSettings, SettingsConfigDict

class BotSettings(BaseModel):
    bot_token: str
    admin_ids: list[int]

class WebhookSettings(BaseModel):
    host: str
    port: int

class RunSettings(BaseModel):
    mode: str
    webhook_url: str | None = None

class AppConfig(BaseModel):
    bot_name: str
    locale_default: str
    currency: str
    price_tiers: dict[str, str]
    marketplaces: list[str]
    brands_whitelist: list[str]
    disclaimer: str
    admin_usernames: list[str]
    privacy_policy_url: str
    data_retention_days: int

class Config(BaseModel):
    app: AppConfig
    run: RunSettings

class Settings(BaseSettings):
    bot: BotSettings
    webhook: WebhookSettings
    run: RunSettings
    app: AppConfig

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        env_nested_delimiter="__",
    )

def load_yaml_config(path: str = "config/app.yaml") -> dict:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    with open(path, "r", encoding="utf-8") as f:
        return yaml.safe_load(f)

@lru_cache
def get_settings() -> Settings:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, –∫–æ–º–±–∏–Ω–∏—Ä—É—è .env –∏ app.yaml.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏.
    """
    yaml_config_data = load_yaml_config()
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É YAML —Å Pydantic –º–æ–¥–µ–ª—è–º–∏
    run_settings = RunSettings(**yaml_config_data.get("run", {}))
    app_settings = AppConfig(**yaml_config_data.get("app", {}))

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å YAML
    env_settings = Settings(app=app_settings, run=run_settings)

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ –∏–∑ .env –∏–º–µ–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º —É–∫–∞–∑–∞–Ω
    if env_settings.run.mode and env_settings.run.mode != run_settings.mode:
        run_settings.mode = env_settings.run.mode
        env_settings.run = run_settings
        
    return env_settings

# FILE: .skin-advisor/app/infra/models.py
Python

import datetime
from sqlalchemy import (
    BigInteger,
    DateTime,
    ForeignKey,
    String,
    JSON,
    func
)
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column, relationship

class Base(DeclarativeBase):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å SQLAlchemy."""
    pass

class User(Base):
    __tablename__ = 'users'

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(BigInteger, unique=True, index=True)
    username: Mapped[str] = mapped_column(String(32), nullable=True)
    first_name: Mapped[str] = mapped_column(String(64))
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime, default=datetime.datetime.utcnow
    )

    survey_responses: Mapped[list["SurveyResponse"]] = relationship(back_populates="user")

class SurveyResponse(Base):
    __tablename__ = 'survey_responses'

    id: Mapped[int] = mapped_column(primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey('users.user_id'))
    answers_json: Mapped[dict] = mapped_column(JSON)
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime, default=datetime.datetime.utcnow, server_default=func.now()
    )

    user: Mapped["User"] = relationship(back_populates="survey_responses")
    diagnosis_result: Mapped["DiagnosisResult"] = relationship(back_populates="survey_response")


class DiagnosisResult(Base):
    __tablename__ = 'diagnosis_results'

    id: Mapped[int] = mapped_column(primary_key=True)
    survey_response_id: Mapped[int] = mapped_column(ForeignKey('survey_responses.id'))
    result_json: Mapped[dict] = mapped_column(JSON)
    created_at: Mapped[datetime.datetime] = mapped_column(
        DateTime, default=datetime.datetime.utcnow, server_default=func.now()
    )

    survey_response: Mapped["SurveyResponse"] = relationship(back_populates="diagnosis_result")

# FILE: .skin-advisor/app/infra/db.py
Python

import os
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from app.infra.models import Base

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ë–î
DB_FILE = "db_volume/bot.db"
# –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite
DATABASE_URL = f"sqlite+aiosqlite:///{DB_FILE}"

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ë–î, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
os.makedirs(os.path.dirname(DB_FILE), exist_ok=True)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π "–¥–≤–∏–∂–æ–∫" SQLAlchemy
async_engine = create_async_engine(DATABASE_URL, echo=False)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ–∞–±—Ä–∏–∫–∞ —Å–µ—Å—Å–∏–π
async_session_maker = async_sessionmaker(async_engine, expire_on_commit=False)

async def create_db_if_not_exists():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
    async with async_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

async def get_db_session() -> AsyncSession:
    """–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    async with async_session_maker() as session:
        yield session
# FILE: .skin-advisor/app/infra/links.py
Python

from app.infra.settings import get_settings

def generate_product_links(product: dict) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å Markdown-—Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã."""
    settings = get_settings()
    links = []
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
    for marketplace_name in settings.app.marketplaces:
        if marketplace_name in product.get("links", {}):
            url = product["links"][marketplace_name]
            links.append(f'<a href="{url}">{marketplace_name}</a>')
            
    return " | ".join(links)

# FILE: .skin-advisor/app/infra/pdf.py
Python

import io
from fpdf import FPDF
from app.infra.settings import get_settings

class PDFReport(FPDF):
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF –æ—Ç—á–µ—Ç–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Ö—ç–¥–µ—Ä–æ–º –∏ —Ñ—É—Ç–µ—Ä–æ–º."""
    
    def header(self):
        self.set_font('DejaVu', 'B', 15)
        self.cell(0, 10, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É', 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('DejaVu', 'I', 8)
        settings = get_settings()
        self.cell(0, 10, f'–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –±–æ—Ç–æ–º {settings.app.bot_name}', 0, 0, 'C')

    def chapter_title(self, title):
        self.set_font('DejaVu', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(4)

    def chapter_body(self, body):
        self.set_font('DejaVu', '', 10)
        self.multi_cell(0, 5, body)
        self.ln()
        
    def product_info(self, name, description, links_html):
        self.set_font('DejaVu', 'B', 11)
        self.multi_cell(0, 5, name)
        self.set_font('DejaVu', '', 10)
        self.multi_cell(0, 5, description)
        
        # FPDF –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–æ–∫
        import re
        clean_links = re.sub('<[^<]+?>', '', links_html.replace(' | ', '\n'))
        self.set_font('DejaVu', 'I', 9)
        self.multi_cell(0, 5, f"–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n{clean_links}")
        self.ln(5)


def create_pdf_report(diagnosis_data: dict, recommendations_data: dict) -> bytes:
    """
    –°–æ–∑–¥–∞–µ—Ç PDF-–æ—Ç—á–µ—Ç –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.
    """
    pdf = PDFReport()
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–π —à—Ä–∏—Ñ—Ç. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω.
    # –î–ª—è Docker-—Å–±–æ—Ä–∫–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ —à—Ä–∏—Ñ—Ç–∞–º–∏.
    # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ —Ä—è–¥–æ–º —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º.
    # –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø–æ–ª–æ–∂–∏—Ç—å DejaVuSans.ttf –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞.
    # –ú—ã –±—É–¥–µ–º —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ç–æ, —á—Ç–æ –æ–Ω –Ω–∞–π–¥–µ—Ç—Å—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç—è—Ö.
    try:
        pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
    except RuntimeError:
        # –§–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ —à—Ä–∏—Ñ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π)
        pdf.add_font('Arial', '', 'Arial.ttf', uni=True)
        pdf.set_font('Arial', '', 12)

    pdf.set_font('DejaVu', '', 12)
    pdf.add_page()

    # –†–∞–∑–¥–µ–ª –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    pdf.chapter_title('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏')
    diag_body = (
        f"–¢–∏–ø –∫–æ–∂–∏: {diagnosis_data.get('skin_type', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
        f"–ü–æ–¥—Ç–æ–Ω: {diagnosis_data.get('undertone', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
        f"–°–æ—Å—Ç–æ—è–Ω–∏—è: {', '.join(diagnosis_data.get('states', []))}\n\n"
        f"–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:\n"
    )
    for reason in diagnosis_data.get('reasoning', []):
        diag_body += f"- {reason}\n"
    pdf.chapter_body(diag_body)
    
    # –†–∞–∑–¥–µ–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    for routine_key, routine_name in [('am', '‚òÄÔ∏è –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥ (AM)'), ('pm', 'üåô –í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥ (PM)'), ('weekly', '‚ú® –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —É—Ö–æ–¥'), ('makeup', 'üíÑ –ú–∞–∫–∏—è–∂')]:
        if routine := recommendations_data.get(routine_key):
            pdf.chapter_title(routine_name)
            for i, step in enumerate(routine):
                product = step['product']
                description = f"{i+1}. {product['purpose'].capitalize()}\n–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {step['how_to_use']}"
                # –°—Å—ã–ª–∫–∏ –≤ PDF –ø–æ–∫–∞ –Ω–µ –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
                pdf.product_info(product['name'], description, "–°—Å—ã–ª–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–æ—Ç–µ.")
    
    # –ü—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏
    if warnings := recommendations_data.get('warnings'):
        pdf.chapter_title('‚ö†Ô∏è –ü—Ä–µ–¥–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏')
        pdf.chapter_body("\n".join(f"- {w}" for w in warnings))
        
    # –î–∏—Å–∫–ª–µ–π–º–µ—Ä
    settings = get_settings()
    pdf.chapter_title('–î–∏—Å–∫–ª–µ–π–º–µ—Ä')
    pdf.chapter_body(settings.app.disclaimer)

    pdf_bytes = pdf.output(dest='S').encode('latin1')
    return pdf_bytes
# FILE: .skin-advisor/app/i18n/ru.json
JSON

{
  "welcome": "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}!\n\n–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π **Skin Advisor**.\n\n–Ø –ø–æ–º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ç–∏–ø –∫–æ–∂–∏ –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞. –ù–∞—á–Ω–µ–º?",
  "main_menu_prompt": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
  "help_text": "ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n1. **üß™ –ê–Ω–∫–µ—Ç–∞** ‚Äî –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–æ–∂–∏.\n2. **üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã** ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Ç–æ–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.\n3. **üõç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —É—Ö–æ–¥—É –∏ –º–∞–∫–∏—è–∂—É.\n4. **üîÑ –°–±—Ä–æ—Å** ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.\n\n/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/privacy - –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
  "privacy_text": "üîê **–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏**\n\n–ú—ã —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –≤–∞—à Telegram ID –∏ –æ—Ç–≤–µ—Ç—ã –∏–∑ –∞–Ω–∫–µ—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è {days} –¥–Ω–µ–π –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º. –ü–æ–¥—Ä–æ–±–Ω–µ–µ: {url}",
  
  "btn_start_survey": "üß™ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É",
  "btn_results": "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",
  "btn_recommendations": "üõç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
  "btn_navigation": "üß≠ –ù–∞–≤–∏–≥–∞—Ü–∏—è",
  "btn_reset": "üîÑ –°–±—Ä–æ—Å",
  "btn_help": "‚ùì –ü–æ–º–æ—â—å",
  "btn_policy": "üîê –ü–æ–ª–∏—Ç–∏–∫–∞",
  
  "btn_continue_survey": "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
  "btn_yes": "–î–∞",
  "btn_no": "–ù–µ—Ç",
  "btn_next": "–î–∞–ª–µ–µ ‚û°Ô∏è",
  "btn_back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
  "btn_confirm_results": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
  "btn_get_recommendations": "üõç –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
  "btn_update_results": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
  "btn_change_answers": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç—ã",
  "btn_download_pdf": "üìÑ –°–∫–∞—á–∞—Ç—å PDF",
  
  "survey_progress": "–í–æ–ø—Ä–æ—Å {current}/{total}",
  "survey_finish_prompt": "üéâ –ê–Ω–∫–µ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã?",
  "btn_show_results": "üëÄ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",

  "reset_prompt": "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?",
  "reset_confirmed": "‚úÖ –í—Å–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ 'üß™ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É', —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.",
  
  "no_results_yet": "–í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É. –ù–∞–∂–º–∏—Ç–µ 'üß™ –ù–∞—á–∞—Ç—å –∞–Ω–∫–µ—Ç—É'.",
  
  "price_tier_prompt": "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:",
  "btn_budget": "ü™ô –ë—é–¥–∂–µ—Ç",
  "btn_mid": "üí∞ –°—Ä–µ–¥–Ω–∏–π",
  "btn_premium": "üíé –ü—Ä–µ–º–∏—É–º",
  
  "admin_welcome": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å, {user_name}!",
  "admin_stats": "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n- –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n- –ü—Ä–æ–π–¥–µ–Ω–æ –∞–Ω–∫–µ—Ç: {completed_surveys}\n- –í—ã–¥–∞–Ω–æ –¥–∏–∞–≥–Ω–æ–∑–æ–≤: {diagnoses_count}",
  "admin_update_products_prompt": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª `products.json` –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.",
  "admin_update_success": "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
  "admin_update_fail": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞.",

  "q1": "–ï—Å—Ç—å –ª–∏ –æ—â—É—â–µ–Ω–∏–µ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —É–º—ã–≤–∞–Ω–∏—è?",
  "q2": "–ö–∞–∫ –≤–µ–¥—ë—Ç —Å–µ–±—è –∫–æ–∂–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è –ø–æ—Å–ª–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —É—Ö–æ–¥–∞?",
  "q3": "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã?",
  "q4": "–ë–µ—Å–ø–æ–∫–æ—è—Ç –ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–µ —à–µ–ª—É—à–µ–Ω–∏—è?",
  "q5": "–ö–∞–∫–∏–µ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞ –±–µ—Å–ø–æ–∫–æ—è—Ç –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
  "q6": "–ö–∞–∫ –±—ã –≤—ã –æ–ø–∏—Å–∞–ª–∏ –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ –≤–∞—à–µ–º –ª–∏—Ü–µ?",
  "q7": "–ë–µ—Å–ø–æ–∫–æ–∏—Ç –ª–∏ –≤–∞—Å –ø–æ—Å—Ç–∞–∫–Ω–µ (—Å–ª–µ–¥—ã –æ—Ç –ø—Ä—ã—â–µ–π) –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—ã—Å—ã–ø–∞–Ω–∏—è?",
  "q8": "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω—ã –º–æ—Ä—â–∏–Ω—ã –ø—Ä–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–º –ª–∏—Ü–µ?",
  "q9": "–ß—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑? (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)",
  "q10": "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–π—á–∞—Å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ä–µ—Ç–∏–Ω–æ–∏–¥–∞–º–∏ (—Ä–µ—Ç–∏–Ω–æ–ª, —Ä–µ—Ç–∏–Ω–∞–ª—å, —Ç—Ä–µ—Ç–∏–Ω–æ–∏–Ω)?",
  "q11": "–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–∏ –≤–∞—Å —Ç–æ–Ω –∏ —Ä–µ–ª—å–µ—Ñ –∫–æ–∂–∏?",
  "q12": "–ó–∞–º–µ—á–∞–µ—Ç–µ –ª–∏ –≤—ã –Ω–∞ –ª–∏—Ü–µ –∫–∞–ø–∏–ª–ª—è—Ä–Ω—É—é —Å–µ—Ç–∫—É (–∫—É–ø–µ—Ä–æ–∑)?",
  "q13": "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–µ–Ω—ã –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ –ø—Ä–∏ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ. –ö–∞–∫–æ–≥–æ –æ–Ω–∏ —Ü–≤–µ—Ç–∞?",
  "q14": "–ö–∞–∫–æ–π —É –≤–∞—Å —Ü–≤–µ—Ç –≥–ª–∞–∑?"