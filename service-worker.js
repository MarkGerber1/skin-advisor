/**
 * Service Worker –¥–ª—è Beauty Care PWA
 * –ö–µ—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å—Å–µ—Ç—ã –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–ª—è –æ—Ñ–ª–∞–π–Ω-–¥–æ—Å—Ç—É–ø–∞
 */

const CACHE_NAME = 'beauty-care-v1.0.0';
const OFFLINE_URL = '/BeautyCare-Site/offline.html';

// –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
const STATIC_CACHE_URLS = [
  '/BeautyCare-Site/',
  '/BeautyCare-Site/index.html',
  '/BeautyCare-Site/demo.html',
  '/BeautyCare-Site/brand.html',
  '/BeautyCare-Site/offline.html',
  '/BeautyCare-Site/manifest.json',
  '/BeautyCare-Site/ui/theme/tokens.css',
  '/BeautyCare-Site/ui/theme/skins.css',
  '/BeautyCare-Site/ui/components/index.css',
  '/BeautyCare-Site/ui/icons/icons.svg',
  '/BeautyCare-Site/ui/brand/logo.svg',
  '/BeautyCare-Site/ui/brand/logo-dark.svg',
  '/BeautyCare-Site/ui/brand/stickers/palette.svg',
  '/BeautyCare-Site/ui/brand/stickers/drop.svg',
  '/BeautyCare-Site/ui/brand/stickers/heart-lipstick.svg',
  '/BeautyCare-Site/ui/icons/svg/palette.svg',
  '/BeautyCare-Site/ui/icons/svg/drop.svg',
  '/BeautyCare-Site/ui/icons/svg/cart.svg',
  '/BeautyCare-Site/ui/icons/svg/info.svg',
  '/BeautyCare-Site/ui/icons/svg/list.svg',
  '/BeautyCare-Site/ui/icons/svg/settings.svg'
];

// –†–µ—Å—É—Ä—Å—ã –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç—á–µ—Ç—ã)
const DYNAMIC_CACHE_PATTERNS = [
  /\/data\/reports\/.*\.pdf$/,
  /\/data\/reports\/.*\.html$/,
  /\/output\/cards\/.*\.svg$/,
  /\/output\/cards\/.*\.png$/,
  /\/assets\/.*\.(json|yaml)$/,
  /\/data\/.*\.json$/
];

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Service Worker
self.addEventListener('install', (event) => {
  console.log('üîß Service Worker: Installing...');

  event.waitUntil(
    (async () => {
      const cache = await caches.open(CACHE_NAME);

      try {
        // –ö–µ—à–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
        await cache.addAll(STATIC_CACHE_URLS);
        console.log('‚úÖ Service Worker: Static assets cached');
      } catch (error) {
        console.error('‚ùå Service Worker: Failed to cache static assets:', error);
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
      }

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—ã–π service worker
      await self.skipWaiting();
      console.log('‚úÖ Service Worker: Installation completed');
    })()
  );
});

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è Service Worker
self.addEventListener('activate', (event) => {
  console.log('üöÄ Service Worker: Activating...');

  event.waitUntil(
    (async () => {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–µ—à–∏
      const cacheNames = await caches.keys();
      await Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME) {
            console.log('üóëÔ∏è Service Worker: Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );

      // –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –≤—Å–µ–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
      await self.clients.claim();
      console.log('‚úÖ Service Worker: Activation completed');
    })()
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
self.addEventListener('fetch', (event) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-GET –∑–∞–ø—Ä–æ—Å—ã
  if (event.request.method !== 'GET') {
    return;
  }

  const url = new URL(event.request.url);

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∫ –Ω–∞—à–µ–º—É –¥–æ–º–µ–Ω—É
  if (url.origin === self.location.origin) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ—Å—É—Ä—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º (–æ—Ç—á–µ—Ç—ã, –¥–∞–Ω–Ω—ã–µ)
    const isDynamicResource = DYNAMIC_CACHE_PATTERNS.some(pattern =>
      pattern.test(url.pathname)
    );

    if (isDynamicResource) {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Network First —Å fallback –Ω–∞ cache –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      event.respondWith(
        (async () => {
          try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Ç–∏
            const networkResponse = await fetch(event.request);
            if (networkResponse.ok) {
              // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
              const cache = await caches.open(CACHE_NAME);
              cache.put(event.request, networkResponse.clone());
              console.log('üì• Service Worker: Updated cache for:', url.pathname);
            }
            return networkResponse;
          } catch (error) {
            // –ï—Å–ª–∏ —Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—â–µ–º –≤ –∫–µ—à–µ
            const cachedResponse = await caches.match(event.request);
            if (cachedResponse) {
              console.log('üì§ Service Worker: Served from cache:', url.pathname);
              return cachedResponse;
            }

            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –≤ –∫–µ—à–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
            if (url.pathname.includes('/reports/') || url.pathname.includes('/data/')) {
              const offlineResponse = await caches.match(OFFLINE_URL);
              if (offlineResponse) {
                return offlineResponse;
              }
            }

            throw error;
          }
        })()
      );
    } else {
      // –°—Ç—Ä–∞—Ç–µ–≥–∏—è: Cache First –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
      event.respondWith(
        (async () => {
          const cachedResponse = await caches.match(event.request);
          if (cachedResponse) {
            return cachedResponse;
          }

          try {
            const networkResponse = await fetch(event.request);
            if (networkResponse.ok) {
              const cache = await caches.open(CACHE_NAME);
              cache.put(event.request, networkResponse.clone());
            }
            return networkResponse;
          } catch (error) {
            // –î–ª—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ñ–ª–∞–π–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É
            if (event.request.headers.get('accept').includes('text/html')) {
              const offlineResponse = await caches.match(OFFLINE_URL);
              if (offlineResponse) {
                return offlineResponse;
              }
            }
            throw error;
          }
        })()
      );
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
self.addEventListener('message', (event) => {
  if (event.data && event.data.type) {
    switch (event.data.type) {
      case 'CACHE_REPORT':
        // –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        cacheUserReport(event.data.userId, event.data.reportData);
        break;

      case 'GET_CACHED_REPORTS':
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        getCachedReports(event.data.userId);
        break;

      case 'CLEAR_CACHE':
        // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
        clearUserCache(event.data.userId);
        break;
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function cacheUserReport(userId, reportData) {
  try {
    const cache = await caches.open(CACHE_NAME);

    // –ö–µ—à–∏—Ä—É–µ–º PDF –æ—Ç—á–µ—Ç
    if (reportData.pdfUrl) {
      await cache.add(reportData.pdfUrl);
      console.log('üìÑ Service Worker: Cached PDF report for user:', userId);
    }

    // –ö–µ—à–∏—Ä—É–µ–º JSON –¥–∞–Ω–Ω—ã–µ
    if (reportData.jsonData) {
      const jsonResponse = new Response(JSON.stringify(reportData.jsonData), {
        headers: { 'Content-Type': 'application/json' }
      });
      await cache.put(`/data/reports/user_${userId}_latest.json`, jsonResponse);
      console.log('üìã Service Worker: Cached JSON data for user:', userId);
    }

    // –ö–µ—à–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    if (reportData.cardUrls && Array.isArray(reportData.cardUrls)) {
      for (const cardUrl of reportData.cardUrls) {
        try {
          await cache.add(cardUrl);
          console.log('üé® Service Worker: Cached card:', cardUrl);
        } catch (error) {
          console.warn('‚ö†Ô∏è Service Worker: Failed to cache card:', cardUrl, error);
        }
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'REPORT_CACHED',
        userId: userId,
        timestamp: Date.now()
      });
    });

  } catch (error) {
    console.error('‚ùå Service Worker: Failed to cache user report:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
async function getCachedReports(userId) {
  try {
    const cache = await caches.open(CACHE_NAME);
    const keys = await cache.keys();

    const reports = [];
    const reportPattern = new RegExp(`user_${userId}.*\.(pdf|json)$`);

    for (const request of keys) {
      if (reportPattern.test(request.url)) {
        const response = await cache.match(request);
        if (response) {
          const contentType = response.headers.get('content-type');
          reports.push({
            url: request.url,
            type: contentType?.includes('pdf') ? 'pdf' : 'json',
            cachedAt: Date.now()
          });
        }
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç—á–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'CACHED_REPORTS_LIST',
        userId: userId,
        reports: reports
      });
    });

  } catch (error) {
    console.error('‚ùå Service Worker: Failed to get cached reports:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function clearUserCache(userId) {
  try {
    const cache = await caches.open(CACHE_NAME);
    const keys = await cache.keys();

    const userPattern = new RegExp(`user_${userId}`);
    const deletedUrls = [];

    for (const request of keys) {
      if (userPattern.test(request.url)) {
        await cache.delete(request);
        deletedUrls.push(request.url);
      }
    }

    console.log('üóëÔ∏è Service Worker: Cleared cache for user:', userId, deletedUrls);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    const clients = await self.clients.matchAll();
    clients.forEach(client => {
      client.postMessage({
        type: 'CACHE_CLEARED',
        userId: userId,
        deletedUrls: deletedUrls
      });
    });

  } catch (error) {
    console.error('‚ùå Service Worker: Failed to clear user cache:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();

    const options = {
      body: data.body,
      icon: '/BeautyCare-Site/ui/brand/logo.svg',
      badge: '/BeautyCare-Site/ui/brand/stickers/drop.svg',
      vibrate: [100, 50, 100],
      data: {
        url: data.url || '/BeautyCare-Site/'
      }
    };

    event.waitUntil(
      self.registration.showNotification(data.title || 'Beauty Care', options)
    );
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  event.waitUntil(
    self.clients.openWindow(event.notification.data.url || '/BeautyCare-Site/')
  );
});

console.log('üéØ Service Worker: Loaded and ready');

