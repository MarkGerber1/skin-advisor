#!/usr/bin/env python3
"""
–¢–µ—Å—Ç PWA —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Beauty Care
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç manifest.json, service worker –∏ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º
"""

import os
import json
import sys
from pathlib import Path


def test_manifest():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest.json...")

    manifest_path = "BeautyCare-Site/manifest.json"
    if not os.path.exists(manifest_path):
        print("‚ùå manifest.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        with open(manifest_path, "r", encoding="utf-8") as f:
            manifest = json.load(f)

        required_fields = ["name", "short_name", "start_url", "display", "icons"]
        missing_fields = []

        for field in required_fields:
            if field not in manifest:
                missing_fields.append(field)

        if missing_fields:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∫–æ–Ω–æ–∫
        icons = manifest.get("icons", [])
        if not icons:
            print("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –∏–∫–æ–Ω–∫–∏ –≤ manifest")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
        if manifest.get("display") != "standalone":
            print("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è display: 'standalone'")

        print("‚úÖ manifest.json –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True

    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ manifest.json: {e}")
        return False


def test_service_worker():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ service worker"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ service worker...")

    sw_path = "BeautyCare-Site/service-worker.js"
    if not os.path.exists(sw_path):
        print("‚ùå service-worker.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        with open(sw_path, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        required_functions = [
            "addEventListener('install'",
            "addEventListener('activate'",
            "addEventListener('fetch'",
            "caches.open",
            "fetch(",
        ]

        missing_functions = []
        for func in required_functions:
            if func not in content:
                missing_functions.append(func)

        if missing_functions:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {missing_functions}")
            return False

        print("‚úÖ service-worker.js —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è service-worker.js: {e}")
        return False


def test_offline_page():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ offline —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ offline —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")

    offline_path = "BeautyCare-Site/offline.html"
    if not os.path.exists(offline_path):
        print("‚ùå offline.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

    try:
        with open(offline_path, "r", encoding="utf-8") as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        required_elements = [
            "<!DOCTYPE html>",
            '<html lang="ru">',
            "<title>",
            "offline-container",
            "retry-btn",
        ]

        missing_elements = []
        for element in required_elements:
            if element not in content:
                missing_elements.append(element)

        if missing_elements:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã: {missing_elements}")
            return False

        print("‚úÖ offline.html —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è offline.html: {e}")
        return False


def test_pwa_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö PWA —Ñ–∞–π–ª–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PWA —Ñ–∞–π–ª–æ–≤...")

    required_files = [
        "BeautyCare-Site/manifest.json",
        "BeautyCare-Site/service-worker.js",
        "BeautyCare-Site/offline.html",
        "BeautyCare-Site/pwa-install.js",
        "BeautyCare-Site/pwa-install.html",
    ]

    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)

    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False

    print("‚úÖ –í—Å–µ PWA —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True


def test_html_integration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PWA –≤ HTML —Ñ–∞–π–ª—ã"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ PWA –≤ HTML...")

    html_files = [
        "BeautyCare-Site/index.html",
        "BeautyCare-Site/demo.html",
        "BeautyCare-Site/brand.html",
    ]

    for html_file in html_files:
        if not os.path.exists(html_file):
            print(f"‚ö†Ô∏è HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {html_file}")
            continue

        try:
            with open(html_file, "r", encoding="utf-8") as f:
                content = f.read()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ manifest —Å—Å—ã–ª–∫–∏
            if '<link rel="manifest"' not in content:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç manifest —Å—Å—ã–ª–∫–∞ –≤ {html_file}")
                return False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ service worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if "serviceWorker.register" not in content:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç service worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ {html_file}")
                return False

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {html_file}: {e}")
            return False

    print("‚úÖ PWA –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ HTML —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PWA –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò")
    print("=" * 50)

    tests = [
        ("–ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤", test_pwa_files),
        ("Manifest.json", test_manifest),
        ("Service Worker", test_service_worker),
        ("Offline —Å—Ç—Ä–∞–Ω–∏—Ü–∞", test_offline_page),
        ("HTML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_html_integration),
    ]

    passed = 0
    total = len(tests)

    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        if test_func():
            passed += 1
            print("‚úÖ –ü–†–û–ô–î–ï–ù")
        else:
            print("‚ùå –ü–†–û–í–ê–õ–ï–ù")

    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    print(".1f")
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! PWA –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
