#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –∫–æ—Ä–∑–∏–Ω–æ–π –∏ –ø–æ–∫—É–ø–∫–∞–º–∏
"""

import os
import sys
import traceback

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã...")

    try:
        from engine.catalog_store import CatalogStore
        print("‚úÖ CatalogStore imported")
    except ImportError as e:
        print(f"‚ùå CatalogStore import failed: {e}")
        return False

    try:
        from engine.models import UserProfile
        print("‚úÖ UserProfile imported")
    except ImportError as e:
        print(f"‚ùå UserProfile import failed: {e}")
        return False

    try:
        from engine.selector import SelectorV2
        print("‚úÖ SelectorV2 imported")
    except ImportError as e:
        print(f"‚ùå SelectorV2 import failed: {e}")
        return False

    try:
        from engine.cart_store import CartStore
        print("‚úÖ CartStore imported")
    except ImportError as e:
        print(f"‚ùå CartStore import failed: {e}")
        return False

    return True

def test_catalog():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—Ç–∞–ª–æ–≥...")

    catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
    print(f"üìÅ Catalog path: {catalog_path}")
    print(f"üìÑ File exists: {os.path.exists(catalog_path)}")

    if not os.path.exists(catalog_path):
        print("‚ùå Catalog file not found!")
        return False

    try:
        from engine.catalog_store import CatalogStore
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()

        print(f"üìä Catalog loaded: {len(catalog)} products")

        # Count by type
        skincare = [p for p in catalog if p.get('type') == 'skincare']
        makeup = [p for p in catalog if p.get('type') == 'makeup']

        print(f"üß¥ Skincare: {len(skincare)} products")
        print(f"üíÑ Makeup: {len(makeup)} products")

        # Show sample
        if catalog:
            sample = catalog[0]
            print(f"üîç Sample: {sample.get('name', 'Unknown')} (ID: {sample.get('id', 'No ID')})")

        return True

    except Exception as e:
        print(f"‚ùå Catalog test failed: {e}")
        traceback.print_exc()
        return False

def test_selector():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä...")

    try:
        from engine.models import UserProfile
        from engine.selector import SelectorV2
        from engine.catalog_store import CatalogStore

        # Create test profile
        profile = UserProfile(
            user_id=12345,
            skin_type="normal",
            concerns=["dryness"],
            season="spring",
            undertone="neutral",
            contrast="medium"
        )

        # Load catalog
        catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()

        # Test selector
        selector = SelectorV2()
        result = selector.select_products_v2(profile, catalog, partner_code="S1")

        print("üì¶ Selector result keys:"        if result:
            print(f"  {list(result.keys())}")

            if result.get("skincare"):
                for category, products in result["skincare"].items():
                    print(f"  üß¥ {category}: {len(products)} products")

            if result.get("makeup"):
                for category, products in result["makeup"].items():
                    print(f"  üíÑ {category}: {len(products)} products")

        return result is not None

    except Exception as e:
        print(f"‚ùå Selector test failed: {e}")
        traceback.print_exc()
        return False

def test_cart_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ—Ä–∑–∏–Ω–æ–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—Ä–∑–∏–Ω—É...")

    try:
        from engine.cart_store import CartStore, CartItem

        store = CartStore()
        user_id = 12345

        # Test add item
        item = CartItem(
            product_id="test_product_001",
            qty=1,
            name="Test Product",
            brand="Test Brand",
            price=1000.0
        )

        store.add_item(user_id, item)
        print("‚úÖ Item added to cart")

        # Test get cart
        cart = store.get_cart(user_id)
        print(f"üì¶ Cart items: {len(cart)}")

        if cart:
            for key, cart_item in cart.items():
                print(f"  üõí {cart_item.name} (x{cart_item.qty}) - {cart_item.price}‚ÇΩ")

        # Test clear cart
        store.clear_cart(user_id)
        print("üóëÔ∏è Cart cleared")

        return True

    except Exception as e:
        print(f"‚ùå Cart test failed: {e}")
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú –° –ö–û–†–ó–ò–ù–û–ô –ò –ü–û–ö–£–ü–ö–ê–ú–ò")
    print("=" * 50)

    tests = [
        ("–ò–º–ø–æ—Ä—Ç—ã", test_imports),
        ("–ö–∞—Ç–∞–ª–æ–≥", test_catalog),
        ("–°–µ–ª–µ–∫—Ç–æ—Ä", test_selector),
        ("–ö–æ—Ä–∑–∏–Ω–∞", test_cart_operations)
    ]

    results = []
    for name, test_func in tests:
        print(f"\n{'='*20} {name.upper()} {'='*20}")
        try:
            result = test_func()
            results.append(result)
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"\n{status}")
        except Exception as e:
            print(f"\n‚ùå –¢–ï–°–¢ –í–´–ó–í–ê–õ –û–®–ò–ë–ö–£: {e}")
            results.append(False)

    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:"    passed = sum(results)
    total = len(results)

    for i, (name, _) in enumerate(tests):
        status = "‚úÖ" if results[i] else "‚ùå"
        print(f"  {status} {name}")

    print(f"\nüìà –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")

    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º.")

    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
