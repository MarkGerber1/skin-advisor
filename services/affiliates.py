"""
Affiliate Links Service
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import urllib.parse
from typing import Dict, List, Optional, Any

# Try to import config, fallback to mock if not available
try:
    from config.env import get_settings
    _settings_available = True
except ImportError:
    print("‚ö†Ô∏è Config module not available, using mock settings")
    get_settings = None
    _settings_available = False

class AffiliateService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏"""

    def __init__(self):
        if _settings_available and get_settings is not None:
            try:
                self.settings = get_settings()
                print("‚úÖ AffiliateService: Settings loaded successfully")
            except Exception as e:
                print(f"‚ö†Ô∏è AffiliateService: Could not load settings: {e}, using defaults")
                self.settings = None
        else:
            print("‚ö†Ô∏è AffiliateService: Settings module not available, using defaults")
            self.settings = None

        # Use default values if settings not available
        if self.settings is None:
            self.settings = type('MockSettings', (), {
                'affiliate_tag': 'skincare_bot',
                'partner_code': 'aff_skincare_bot'
            })()

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        self.affiliate_configs = {
            'goldapple': {
                'aff_param': 'partner',
                'campaign_param': 'utm_campaign',
                'source_param': 'utm_source',
                'medium_param': 'utm_medium',
                'partner_code': getattr(self.settings, 'affiliate_tag', 'skincare_bot'),
                'priority': 1
            },
            'ru_official': {
                'aff_param': 'affiliate',
                'campaign_param': 'campaign',
                'source_param': 'source',
                'medium_param': 'medium',
                'partner_code': getattr(self.settings, 'partner_code', 'aff_skincare_bot'),
                'priority': 2
            },
            'ru_marketplace': {
                'aff_param': 'partner',
                'campaign_param': 'campaign',
                'source_param': 'ref',
                'medium_param': 'medium',
                'partner_code': getattr(self.settings, 'affiliate_tag', 'skincare_bot'),
                'priority': 3
            },
            'intl_authorized': {
                'aff_param': 'aff',
                'campaign_param': 'campaign',
                'source_param': 'source',
                'medium_param': 'medium',
                'partner_code': getattr(self.settings, 'partner_code', 'aff_skincare_bot'),
                'priority': 4
            },
            'default': {
                'aff_param': 'partner',
                'campaign_param': 'utm_campaign',
                'source_param': 'utm_source',
                'medium_param': 'utm_medium',
                'partner_code': getattr(self.settings, 'affiliate_tag', 'skincare_bot'),
                'priority': 5
            }
        }

    def build_ref_link(self, product: Dict[str, Any], campaign: str = "recommendation") -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

        –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
        1. Gold Apple (RU –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π)
        2. RU –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã (LETO, RIVE GAUCHE, SEPHORA)
        3. RU –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã (Wildberries, Ozon, Yandex Market)
        4. –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ (Sephora US, Amazon)
        5. Default

        Args:
            product: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞
            campaign: –ö–∞–º–ø–∞–Ω–∏—è –¥–ª—è UTM –º–µ—Ç–æ–∫

        Returns:
            –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å
        """
        try:
            product_id = product.get('id', 'unknown')
            print(f"üîó Building affiliate link for product {product_id}")

            # 1. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ref_link –≤ –ø—Ä–æ–¥—É–∫—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if product.get('ref_link'):
                print(f"‚úÖ Using existing ref_link for {product_id}")
                return product['ref_link']

            # 2. –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
            original_link = product.get('link') or product.get('url')
            if not original_link:
                print(f"‚ö†Ô∏è No link found for product {product_id}")
                return None

            # 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —Å—Å—ã–ª–∫–µ
            source = self._detect_source(product)
            print(f"üîç Detected source for {product_id}: {source}")

            # 4. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if source == 'goldapple':
                config_key = 'goldapple'
            elif source == 'ru_official':
                config_key = 'ru_official'
            elif source == 'ru_marketplace':
                config_key = 'ru_marketplace'
            elif source == 'intl_authorized':
                config_key = 'intl_authorized'
            else:
                config_key = 'default'

            # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if not self.affiliate_configs or config_key not in self.affiliate_configs:
                print(f"‚ö†Ô∏è No affiliate config for {config_key}, returning original link")
                return original_link

            # 6. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
            affiliate_url = self._add_affiliate_params(original_link, config_key, campaign)
            print(f"‚úÖ Generated affiliate link for {product_id}: {affiliate_url[:60]}...")
            print(f"üîó affiliate_link_built: product={product_id}, source={config_key}, priority={self.affiliate_configs[config_key]['priority']}")

            return affiliate_url

        except Exception as e:
            print(f"‚ùå Error building affiliate link for product {product.get('id', 'unknown')}: {e}")
            import traceback
            traceback.print_exc()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return product.get('link') or product.get('url')

    def _detect_source(self, product: Dict[str, Any]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Å—ã–ª–∫–µ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        link = product.get('link') or product.get('url', '')
        if link:
            link_lower = link.lower()

            # Gold Apple - –≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            if 'goldapple' in link_lower:
                return 'goldapple'

            # RU –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
            if any(domain in link_lower for domain in ['letu.ru', 'rive-gauche.ru', 'sephora.ru']):
                return 'ru_official'

            # RU –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
            if any(domain in link_lower for domain in ['wildberries.ru', 'ozon.ru', 'yandex.market.ru', 'market.yandex.ru']):
                return 'ru_marketplace'

            # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ
            if any(domain in link_lower for domain in ['amazon.com', 'sephora.com', 'ulta.com']):
                return 'intl_authorized'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é/–±—Ä–µ–Ω–¥—É (–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ)
        brand = product.get('brand', '').lower()
        name = product.get('name', '').lower()

        # Gold Apple
        if 'goldapple' in brand or 'goldapple' in name:
            return 'goldapple'

        # RU –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã
        if any(x in brand or x in name for x in ['wildberries', 'ozon', 'marketplace', '—è–Ω–¥–µ–∫—Å']):
            return 'ru_marketplace'

        # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã
        if any(x in brand or x in name for x in ['official', 'brand', '–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π']):
            return 'ru_official'

        return None

    def _add_affiliate_params(self, url: str, source: str, campaign: str) -> str:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫ URL"""
        if not url or not source:
            print(f"‚ö†Ô∏è Invalid parameters for affiliate: url={bool(url)}, source={source}")
            return url

        config = self.affiliate_configs.get(source)
        if not config:
            print(f"‚ö†Ô∏è No config found for source: {source}")
            return url

        try:
            parsed = urllib.parse.urlparse(url)
            params = urllib.parse.parse_qs(parsed.query)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            aff_param = config.get('aff_param')
            partner_code = config.get('partner_code')
            if aff_param and partner_code:
                params[aff_param] = [partner_code]

            source_param = config.get('source_param')
            if source_param:
                params[source_param] = [source]

            medium_param = config.get('medium_param')
            if medium_param:
                params[medium_param] = ['affiliate']

            campaign_param = config.get('campaign_param')
            if campaign_param:
                params[campaign_param] = [campaign]

            # –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ–º URL
            new_query = urllib.parse.urlencode(params, doseq=True)
            new_url = parsed._replace(query=new_query).geturl()

            return new_url

        except Exception as e:
            print(f"‚ùå Error adding affiliate params to {url}: {e}")
            import traceback
            traceback.print_exc()
            return url

    def get_source_priority(self, source: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–º–µ–Ω—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)"""
        config = self.affiliate_configs.get(source)
        return config.get('priority', 999) if config else 999

    def sort_by_priority(self, products: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        def get_priority(product):
            source = self._detect_source(product)
            return self.get_source_priority(source)

        return sorted(products, key=get_priority)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_affiliate_service = None

def get_affiliate_service() -> AffiliateService:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AffiliateService"""
    global _affiliate_service
    if _affiliate_service is None:
        _affiliate_service = AffiliateService()
    return _affiliate_service

def build_affiliate_link_safe(product_link: str | None, cfg: dict | None) -> str | None:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ —Å —Ñ–æ–ª–±—ç–∫–æ–º"""
    if not product_link:
        return None

    if not cfg:
        return product_link  # –§–æ–ª–±—ç–∫ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        service = get_affiliate_service()
        source = service._detect_source({"link": product_link})

        if not source or source not in service.affiliate_configs:
            return product_link  # –§–æ–ª–±—ç–∫ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ

        affiliate_url = service._add_affiliate_params(product_link, source, "recommendation")
        return affiliate_url

    except Exception as e:
        print(f"‚ö†Ô∏è Error building affiliate link: {e}")
        return product_link  # –§–æ–ª–±—ç–∫ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ


def build_ref_link(product: Dict[str, Any], campaign: str = "recommendation") -> Optional[str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        service = get_affiliate_service()
        result = service.build_ref_link(product, campaign)

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç None, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫
        if result is None:
            product_link = product.get('link') or product.get('url')
            if product_link:
                return product_link

        return result

    except Exception as e:
        print(f"‚ö†Ô∏è Error in build_ref_link: {e}")
        # –§–æ–ª–±—ç–∫ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
        return product.get('link') or product.get('url')
