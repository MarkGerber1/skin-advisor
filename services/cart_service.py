#!/usr/bin/env python3
"""
üõí –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π
–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ thread-safe, –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ, —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö
"""

import time
import asyncio
from typing import Optional, Dict, List, Any, Tuple
from dataclasses import dataclass, asdict
from datetime import datetime
from enum import Enum
import threading

from engine.cart_store import CartStore, CartItem
from engine.catalog import get_catalog_manager
from engine.models import Product


class CartErrorCode(Enum):
    """–ö–æ–¥—ã –æ—à–∏–±–æ–∫ –∫–æ—Ä–∑–∏–Ω—ã"""
    INVALID_PRODUCT_ID = "INVALID_PRODUCT_ID"
    INVALID_VARIANT_ID = "INVALID_VARIANT_ID"
    INVALID_QUANTITY = "INVALID_QUANTITY"
    PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND"
    VARIANT_NOT_SUPPORTED = "VARIANT_NOT_SUPPORTED" 
    VARIANT_MISMATCH = "VARIANT_MISMATCH"
    OUT_OF_STOCK = "OUT_OF_STOCK"
    DUPLICATE_REQUEST = "DUPLICATE_REQUEST"
    CART_OPERATION_FAILED = "CART_OPERATION_FAILED"


class CartServiceError(Exception):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    def __init__(self, code: CartErrorCode, message: str, details: Optional[Dict] = None):
        self.code = code
        self.message = message
        self.details = details or {}
        super().__init__(f"[{code.value}] {message}")


@dataclass
class CartValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    valid: bool
    product: Optional[Product] = None
    variant_supported: bool = False
    error_code: Optional[CartErrorCode] = None
    error_message: Optional[str] = None


class CartService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π"""
    
    def __init__(self, cart_store: Optional[CartStore] = None):
        self.cart_store = cart_store or CartStore()
        self._request_debounce: Dict[str, float] = {}  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        self._debounce_window = 2.0  # —Å–µ–∫—É–Ω–¥—ã
        self._lock = threading.Lock()
    
    def _validate_parameters(self, product_id: str, variant_id: Optional[str] = None, qty: int = 1) -> None:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        if not product_id or not isinstance(product_id, str) or len(product_id.strip()) == 0:
            raise CartServiceError(
                CartErrorCode.INVALID_PRODUCT_ID,
                "Product ID is required and must be a non-empty string",
                {"product_id": product_id}
            )
        
        if variant_id is not None and (not isinstance(variant_id, str) or len(variant_id.strip()) == 0):
            raise CartServiceError(
                CartErrorCode.INVALID_VARIANT_ID,
                "Variant ID must be a non-empty string if provided",
                {"variant_id": variant_id}
            )
        
        if not isinstance(qty, int) or qty < 1:
            raise CartServiceError(
                CartErrorCode.INVALID_QUANTITY,
                "Quantity must be a positive integer",
                {"qty": qty}
            )
    
    async def _validate_product_and_variant(self, product_id: str, variant_id: Optional[str] = None) -> CartValidationResult:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
            catalog_manager = get_catalog_manager()
            catalog = catalog_manager.get_catalog()
            
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
            product = None
            for p in catalog:
                if str(p.id) == product_id or str(getattr(p, 'key', '')) == product_id:
                    product = p
                    break
            
            if not product:
                return CartValidationResult(
                    valid=False,
                    error_code=CartErrorCode.PRODUCT_NOT_FOUND,
                    error_message=f"Product {product_id} not found in catalog"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏
            if not product.in_stock:
                return CartValidationResult(
                    valid=False,
                    product=product,
                    error_code=CartErrorCode.OUT_OF_STOCK,
                    error_message=f"Product {product_id} is out of stock"
                )
            
            # –ï—Å–ª–∏ variant_id –Ω–µ —É–∫–∞–∑–∞–Ω - –≤–∞–ª–∏–¥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
            if not variant_id:
                return CartValidationResult(
                    valid=True,
                    product=product,
                    variant_supported=False
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞
            variant_supporting_categories = [
                "foundation", "lipstick", "eyeshadow", "mascara", "concealer", 
                "powder", "blush", "—Ç–æ–Ω–∞–ª—å–Ω—ã–π", "–ø–æ–º–∞–¥–∞", "—Ç–µ–Ω–∏", "—Ç—É—à—å",
                "–∫–æ–Ω—Å–∏–ª–µ—Ä", "–ø—É–¥—Ä–∞", "—Ä—É–º—è–Ω–∞"
            ]
            
            category_lower = str(product.category).lower()
            supports_variants = any(cat in category_lower for cat in variant_supporting_categories)
            
            if not supports_variants:
                return CartValidationResult(
                    valid=False,
                    product=product,
                    variant_supported=False,
                    error_code=CartErrorCode.VARIANT_NOT_SUPPORTED,
                    error_message=f"Product category '{product.category}' does not support variants"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç variant_id (–±–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
            if not self._is_valid_variant_format(variant_id, product):
                return CartValidationResult(
                    valid=False,
                    product=product,
                    variant_supported=True,
                    error_code=CartErrorCode.VARIANT_MISMATCH,
                    error_message=f"Variant ID '{variant_id}' has invalid format for product {product_id}"
                )
            
            return CartValidationResult(
                valid=True,
                product=product,
                variant_supported=True
            )
            
        except Exception as e:
            return CartValidationResult(
                valid=False,
                error_code=CartErrorCode.CART_OPERATION_FAILED,
                error_message=f"Validation failed: {str(e)}"
            )
    
    def _is_valid_variant_format(self, variant_id: str, product: Product) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ variant_id"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ variant_id –∏–º–µ–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        # –ù–∞–ø—Ä–∏–º–µ—Ä: shade-01, shade-fair, volume-30ml, size-medium
        valid_prefixes = ["shade-", "volume-", "size-", "color-", "tone-"]
        
        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –≤–∞–ª–∏–¥–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ - –û–ö
        if any(variant_id.startswith(prefix) for prefix in valid_prefixes):
            return True
        
        # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—É–∫–≤—ã/—Ü–∏—Ñ—Ä—ã –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ - —Ç–æ–∂–µ –û–ö
        if variant_id.replace("-", "").replace("_", "").isalnum():
            return True
        
        return False
    
    def _check_duplicate_request(self, user_id: int, product_id: str, variant_id: Optional[str]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å (–∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞)"""
        current_time = time.time()
        request_key = f"{user_id}:{product_id}:{variant_id or 'default'}"
        
        with self._lock:
            last_request_time = self._request_debounce.get(request_key, 0)
            
            if current_time - last_request_time < self._debounce_window:
                return True  # –î—É–±–ª–∏–∫–∞—Ç
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            self._request_debounce[request_key] = current_time
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            cutoff_time = current_time - 300
            expired_keys = [k for k, t in self._request_debounce.items() if t < cutoff_time]
            for key in expired_keys:
                del self._request_debounce[key]
        
        return False  # –ù–µ –¥—É–±–ª–∏–∫–∞—Ç
    
    async def add_item(self, user_id: int, product_id: str, variant_id: Optional[str] = None, qty: int = 1) -> CartItem:
        """
        –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_id: ID —Ç–æ–≤–∞—Ä–∞  
            variant_id: ID –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–æ—Ç—Ç–µ–Ω–æ–∫, —Ä–∞–∑–º–µ—Ä, –æ–±—ä–µ–º)
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 1)
            
        Returns:
            CartItem: –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π/–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
            
        Raises:
            CartServiceError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        self._validate_parameters(product_id, variant_id, qty)
        
        # 2. –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞
        if self._check_duplicate_request(user_id, product_id, variant_id):
            raise CartServiceError(
                CartErrorCode.DUPLICATE_REQUEST,
                "Duplicate request detected. Please wait before trying again.",
                {"user_id": user_id, "product_id": product_id, "variant_id": variant_id}
            )
        
        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        validation_result = await self._validate_product_and_variant(product_id, variant_id)
        if not validation_result.valid:
            raise CartServiceError(
                validation_result.error_code,
                validation_result.error_message,
                {"product_id": product_id, "variant_id": variant_id}
            )
        
        product = validation_result.product
        
        # 4. –°–æ–∑–¥–∞–Ω–∏–µ CartItem
        cart_item = CartItem(
            product_id=product_id,
            qty=qty,
            brand=product.brand,
            name=str(getattr(product, 'title', product.name)),
            price=float(product.price) if product.price else 0.0,
            price_currency=getattr(product, 'price_currency', 'RUB'),
            ref_link=getattr(product, 'buy_url', getattr(product, 'link', '')),
            explain="",  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ explain_generator –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            category=product.category,
            in_stock=product.in_stock,
            variant_id=variant_id,
            variant_name=self._get_variant_display_name(variant_id),
            variant_type=self._get_variant_type(variant_id),
            added_at=datetime.now().isoformat()
        )
        
        # 5. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é)
        try:
            self.cart_store.add(user_id, cart_item)
            print(f"‚úÖ Cart service: Added {product_id}:{variant_id or 'default'} for user {user_id}")
            return cart_item
            
        except Exception as e:
            raise CartServiceError(
                CartErrorCode.CART_OPERATION_FAILED,
                f"Failed to add item to cart: {str(e)}",
                {"user_id": user_id, "product_id": product_id, "variant_id": variant_id}
            )
    
    def _get_variant_display_name(self, variant_id: Optional[str]) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        if not variant_id:
            return None
        
        # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ variant_id –≤ —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if variant_id.startswith("shade-"):
            return variant_id.replace("shade-", "").replace("-", " ").title()
        elif variant_id.startswith("volume-"):
            return variant_id.replace("volume-", "")
        elif variant_id.startswith("size-"):
            return variant_id.replace("size-", "").replace("-", " ").title()
        else:
            return variant_id.replace("-", " ").title()
    
    def _get_variant_type(self, variant_id: Optional[str]) -> Optional[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        if not variant_id:
            return None
        
        if variant_id.startswith("shade-") or variant_id.startswith("color-"):
            return "shade"
        elif variant_id.startswith("volume-"):
            return "volume" 
        elif variant_id.startswith("size-"):
            return "size"
        else:
            return "other"
    
    async def update_item_variant(self, user_id: int, product_id: str, old_variant_id: Optional[str], new_variant_id: Optional[str]) -> CartItem:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            old_variant_id: –°—Ç–∞—Ä—ã–π ID –≤–∞—Ä–∏–∞–Ω—Ç–∞  
            new_variant_id: –ù–æ–≤—ã–π ID –≤–∞—Ä–∏–∞–Ω—Ç–∞
            
        Returns:
            CartItem: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã
            
        Raises:
            CartServiceError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        if new_variant_id:
            validation_result = await self._validate_product_and_variant(product_id, new_variant_id)
            if not validation_result.valid:
                raise CartServiceError(
                    validation_result.error_code,
                    validation_result.error_message,
                    {"product_id": product_id, "new_variant_id": new_variant_id}
                )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
        items = self.cart_store.get(user_id)
        items_dict = {item.get_composite_key(): item for item in items}
        
        old_key = f"{product_id}:{old_variant_id or 'default'}"
        new_key = f"{product_id}:{new_variant_id or 'default'}"
        
        if old_key not in items_dict:
            raise CartServiceError(
                CartErrorCode.PRODUCT_NOT_FOUND,
                f"Item with key {old_key} not found in cart",
                {"user_id": user_id, "old_key": old_key}
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
        old_item = items_dict[old_key]
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç
        self.cart_store.remove(user_id, product_id, old_variant_id)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        updated_item = CartItem(
            product_id=old_item.product_id,
            qty=old_item.qty,
            brand=old_item.brand,
            name=old_item.name,
            price=old_item.price,
            price_currency=old_item.price_currency,
            ref_link=old_item.ref_link,
            explain=old_item.explain,
            category=old_item.category,
            in_stock=old_item.in_stock,
            variant_id=new_variant_id,
            variant_name=self._get_variant_display_name(new_variant_id),
            variant_type=self._get_variant_type(new_variant_id),
            added_at=old_item.added_at
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
        self.cart_store.add(user_id, updated_item)
        
        print(f"‚úÖ Cart service: Updated variant {old_key} ‚Üí {new_key} for user {user_id}")
        return updated_item
    
    def remove_item(self, user_id: int, product_id: str, variant_id: Optional[str] = None) -> bool:
        """
        –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            variant_id: ID –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–µ—Å–ª–∏ None - —É–¥–∞–ª—è–µ—Ç –ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω
            
        Raises:
            CartServiceError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.cart_store.remove(user_id, product_id, variant_id)
            print(f"‚úÖ Cart service: Removed {product_id}:{variant_id or 'any'} for user {user_id}")
            return True
            
        except Exception as e:
            raise CartServiceError(
                CartErrorCode.CART_OPERATION_FAILED,
                f"Failed to remove item from cart: {str(e)}",
                {"user_id": user_id, "product_id": product_id, "variant_id": variant_id}
            )
    
    def get_cart(self, user_id: int) -> List[CartItem]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            List[CartItem]: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä–∑–∏–Ω—ã
        """
        try:
            return self.cart_store.get(user_id)
        except Exception as e:
            raise CartServiceError(
                CartErrorCode.CART_OPERATION_FAILED,
                f"Failed to get cart: {str(e)}",
                {"user_id": user_id}
            )
    
    def clear_cart(self, user_id: int) -> None:
        """
        –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Raises:
            CartServiceError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            self.cart_store.clear(user_id)
            print(f"‚úÖ Cart service: Cleared cart for user {user_id}")
            
        except Exception as e:
            raise CartServiceError(
                CartErrorCode.CART_OPERATION_FAILED,
                f"Failed to clear cart: {str(e)}",
                {"user_id": user_id}
            )
    
    def set_item_quantity(self, user_id: int, product_id: str, variant_id: Optional[str], qty: int) -> Optional[CartItem]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            variant_id: ID –≤–∞—Ä–∏–∞–Ω—Ç–∞
            qty: –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (0 = —É–¥–∞–ª–∏—Ç—å)
            
        Returns:
            CartItem –∏–ª–∏ None: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ None –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω
            
        Raises:
            CartServiceError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        if qty < 0:
            raise CartServiceError(
                CartErrorCode.INVALID_QUANTITY,
                "Quantity cannot be negative",
                {"qty": qty}
            )
        
        try:
            if qty == 0:
                self.remove_item(user_id, product_id, variant_id)
                return None
            else:
                self.cart_store.set_qty(user_id, product_id, qty, variant_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
                items = self.get_cart(user_id)
                composite_key = f"{product_id}:{variant_id or 'default'}"
                
                for item in items:
                    if item.get_composite_key() == composite_key:
                        return item
                        
                return None
                
        except Exception as e:
            raise CartServiceError(
                CartErrorCode.CART_OPERATION_FAILED,
                f"Failed to set item quantity: {str(e)}",
                {"user_id": user_id, "product_id": product_id, "variant_id": variant_id, "qty": qty}
            )


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
_cart_service = None

def get_cart_service() -> CartService:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    global _cart_service
    if _cart_service is None:
        _cart_service = CartService()
    return _cart_service
