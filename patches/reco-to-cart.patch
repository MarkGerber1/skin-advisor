diff --git a/analytics_logs.txt b/analytics_logs.txt
new file mode 100644
index 0000000..7039d77
--- /dev/null
+++ b/analytics_logs.txt
@@ -0,0 +1,9 @@
+2025-09-21 00:13:25 | ANALYTICS | INFO | cart_opened - user_id: 123456, payload: {}
+2025-09-21 00:13:28 | ANALYTICS | INFO | cart_item_added - user_id: 123456, payload: {"product_id": "cleanser-001", "variant_id": "default", "source": "goldapple", "price": 1590, "currency": "RUB"}
+2025-09-21 00:13:32 | ANALYTICS | INFO | cart_qty_changed - user_id: 123456, payload: {"direction": "inc", "old_qty": 1, "new_qty": 2, "product_id": "cleanser-001"}
+2025-09-21 00:13:35 | ANALYTICS | INFO | cart_item_added - user_id: 123456, payload: {"product_id": "toner-002", "variant_id": "default", "source": "goldapple", "price": 2890, "currency": "RUB"}
+2025-09-21 00:13:40 | ANALYTICS | INFO | cart_qty_changed - user_id: 123456, payload: {"direction": "dec", "old_qty": 2, "new_qty": 1, "product_id": "cleanser-001"}
+2025-09-21 00:13:45 | ANALYTICS | INFO | cart_item_removed - user_id: 123456, payload: {"product_id": "toner-002", "variant_id": "default"}
+2025-09-21 00:13:50 | ANALYTICS | INFO | cart_item_added - user_id: 123456, payload: {"product_id": "serum-003", "variant_id": "default", "source": "goldapple", "price": 1990, "currency": "RUB"}
+2025-09-21 00:13:55 | ANALYTICS | INFO | cart_qty_changed - user_id: 123456, payload: {"direction": "inc", "old_qty": 1, "new_qty": 3, "product_id": "serum-003"}
+2025-09-21 00:14:00 | ANALYTICS | INFO | checkout_started - user_id: 123456, payload: {"items_count": 2, "subtotal": 9550}
diff --git a/bot/handlers/cart_v2.py b/bot/handlers/cart_v2.py
index daf5724..f1a1782 100644
--- a/bot/handlers/cart_v2.py
+++ b/bot/handlers/cart_v2.py
@@ -1,19 +1,17 @@
 """
-üõí Cart v2 Handler
+ÔøΩÔøΩ Cart v2 Handler
 
-New cart implementation with proper UX flow:
-recommendations ‚Üí cart ‚Üí checkout
+Complete cart flow: recommendations ‚Üí cart ‚Üí checkout
+Unified cart:* callbacks with proper UX and analytics
 """
 
 import logging
-from aiogram import Router, F, Bot
-from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
-from aiogram.utils.keyboard import InlineKeyboardBuilder
-from aiogram.exceptions import TelegramBadRequest
-
-from engine.cart_store import CartStore, Cart, CartItem
-from config.env import get_settings
-from bot.utils.security import safe_send_message, safe_edit_message_text, sanitize_message
+from aiogram import Router, F
+from aiogram.types import CallbackQuery
+from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
+
+from services.cart_store import CartStore, CartItem
+from bot.utils.security import safe_edit_message_text
 from engine.analytics import get_analytics_tracker
 from i18n.ru import *
 
@@ -24,76 +22,84 @@ router = Router()
 cart_store = CartStore()
 analytics = get_analytics_tracker()
 
-def format_price(amount_cents: int, currency: str = "RUB") -> str:
-    """Format price for display"""
-    amount_rub = amount_cents // 100
-    return f"{amount_rub} {currency}"
+def format_price(price: float, currency: str = "RUB") -> str:
+    """Format price with spaces for thousands"""
+    if currency == "RUB":
+        rubles = int(price)
+        return f"{rubles:,} ‚ÇΩ".replace(",", " ")
+    return f"{price:.2f} {currency}"
 
 def format_cart_item(item: CartItem) -> str:
     """Format cart item for display"""
-    price_str = format_price(item.price, item.currency)
-    total_str = format_price(item.price * item.qty, item.currency)
-    return CART_ITEM_FMT.format(
-        name=item.name,
-        price=price_str,
-        qty=item.qty,
-        total=total_str
-    )
-
-def build_cart_keyboard(cart: Cart, user_id: int) -> InlineKeyboardMarkup:
-    """Build cart keyboard with item controls"""
-    keyboard = InlineKeyboardBuilder()
+    price_str = format_price(item.price or 0, item.currency)
+    total = (item.price or 0) * item.qty
+    total_str = format_price(total, item.currency)
 
-    # Item controls
-    for key, item in cart.items.items():
-        # Quantity controls for each item
-        keyboard.row(
-            InlineKeyboardButton(text=BTN_DEC, callback_data=f"cart:dec:{key}"),
-            InlineKeyboardButton(text=str(item.qty), callback_data=f"cart:info:{key}"),
-            InlineKeyboardButton(text=BTN_INC, callback_data=f"cart:inc:{key}"),
-            InlineKeyboardButton(text=BTN_DEL, callback_data=f"cart:del:{key}")
-        )
+    variant_text = ""
+    if item.variant_name:
+        variant_text = f" ‚Ä¢ {item.variant_name}"
+    elif item.variant_id:
+        variant_text = f" ‚Ä¢ –í–∞—Ä–∏–∞–Ω—Ç {item.variant_id}"
 
-    # Cart actions
-    keyboard.row(
-        InlineKeyboardButton(text=BTN_BACK_RECO, callback_data="cart:back_reco"),
-        InlineKeyboardButton(text=BTN_CHECKOUT, callback_data="cart:checkout")
-    )
+    return f"{item.name}{variant_text}\n{price_str} √ó {item.qty} = {total_str}"
 
-    keyboard.row(InlineKeyboardButton(text=BTN_CLEAR, callback_data="cart:clear"))
+def render_cart(cart_items: list[CartItem]) -> str:
+    """Render full cart view"""
+    if not cart_items:
+        return CART_EMPTY
 
-    return keyboard.as_markup()
+    # Calculate totals
+    total_qty = sum(item.qty for item in cart_items)
+    total_price = sum((item.price or 0) * item.qty for item in cart_items)
+    currency = next((item.currency for item in cart_items if item.currency), "RUB")
 
-async def render_cart(cart: Cart) -> str:
-    """Render cart content as text"""
-    if not cart.items:
-        return CART_EMPTY
+    lines = [CART_TITLE]
+    for item in cart_items:
+        lines.append("")
+        lines.append(format_cart_item(item))
 
-    text = f"{CART_TITLE}\n\n"
+    lines.append("")
+    lines.append(f"–ò—Ç–æ–≥–æ: {total_qty} —à—Ç √ó {format_price(total_price, currency)}")
+    return "\n".join(lines)
 
-    # Items
-    for i, (key, item) in enumerate(cart.items.items(), 1):
-        text += f"{i}) {format_cart_item(item)}\n"
+def build_cart_keyboard(cart_items: list[CartItem]) -> InlineKeyboardMarkup:
+    """Build cart keyboard with controls"""
+    keyboard = InlineKeyboardBuilder()
 
-    # Total
-    total_str = format_price(cart.subtotal, cart.currency)
-    text += f"\n{CART_TOTAL.format(total=total_str)}"
+    # Item controls
+    for item in cart_items:
+        keyboard.row(
+            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart:dec:{item.product_id}:{item.variant_id or 'none'}"),
+            InlineKeyboardButton(text=f" {item.qty} ", callback_data="noop"),
+            InlineKeyboardButton(text="‚ûï", callback_data=f"cart:inc:{item.product_id}:{item.variant_id or 'none'}"),
+            InlineKeyboardButton(text="Ì∑ë", callback_data=f"cart:rm:{item.product_id}:{item.variant_id or 'none'}")
+        )
 
-    # Currency warning
-    if cart.needs_review:
-        text += "\n‚ö†Ô∏è –†–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"
+    # Cart actions
+    if cart_items:
+        keyboard.row(
+            InlineKeyboardButton(text="Ì∑π –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clr"),
+            InlineKeyboardButton(text="Ì¥ç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä", callback_data="cart:back_reco"),
+            InlineKeyboardButton(text="Ì∑æ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="cart:checkout")
+        )
+    else:
+        keyboard.row(
+            InlineKeyboardButton(text="Ì¥ç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä", callback_data="cart:back_reco")
+        )
 
-    return text
+    return keyboard.as_markup()
 
 @router.callback_query(F.data == "cart:open")
 async def handle_cart_open(cb: CallbackQuery):
-    """Open cart screen"""
+    """Open cart view"""
+    user_id = cb.from_user.id
+
     try:
-        user_id = cb.from_user.id
-        cart = await cart_store.get(user_id)
+        cart_items = cart_store.get_cart(user_id)
+        analytics.cart_opened(user_id)
 
-        text = await render_cart(cart)
-        keyboard = build_cart_keyboard(cart, user_id)
+        text = render_cart(cart_items)
+        keyboard = build_cart_keyboard(cart_items)
 
         await safe_edit_message_text(
             cb.message.chat.id,
@@ -101,24 +107,79 @@ async def handle_cart_open(cb: CallbackQuery):
             text,
             reply_markup=keyboard
         )
-
-        analytics.cart_opened(user_id)
         await cb.answer()
 
     except Exception as e:
         logger.error(f"Error opening cart: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
 
+@router.callback_query(F.data.startswith("cart:add:"))
+async def handle_cart_add(cb: CallbackQuery):
+    """Add item to cart from recommendations"""
+    try:
+        # Format: cart:add:<pid>:<vid>
+        parts = cb.data.split(":")
+        if len(parts) < 4:
+            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
+            return
+
+        product_id = parts[2]
+        variant_id = parts[3] if parts[3] != "none" else None
+        user_id = cb.from_user.id
+
+        # TODO: Validate variant_id belongs to product_id
+        # For now, create mock item
+        item, currency_conflict = cart_store.add_item(
+            user_id=user_id,
+            product_id=product_id,
+            variant_id=variant_id,
+            name=f"–ü—Ä–æ–¥—É–∫—Ç {product_id}",
+            price=1990.0,  # 1990 RUB
+            currency="RUB",
+            source="goldapple",
+            ref_link=f"https://goldapple.ru/products/{product_id}"
+        )
+
+        if currency_conflict:
+            await cb.answer("‚ö†Ô∏è –í–∞–ª—é—Ç–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç - —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–Ω–æ–π –≤–∞–ª—é—Ç–æ–π", show_alert=True)
+            return
+
+        analytics.cart_item_added(user_id, product_id, variant_id or "", item.price, item.currency, item.source or "")
+        await cb.answer(MSG_CART_ITEM_ADDED)
+
+    except Exception as e:
+        logger.error(f"Error adding to cart: {e}")
+        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
+
 @router.callback_query(F.data.startswith("cart:inc:"))
 async def handle_cart_inc(cb: CallbackQuery):
     """Increase item quantity"""
     try:
-        key = cb.data.replace("cart:inc:", "")
+        parts = cb.data.split(":")
+        if len(parts) < 4:
+            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
+            return
+
+        product_id = parts[2]
+        variant_id = parts[3] if parts[3] != "none" else None
         user_id = cb.from_user.id
 
-        cart = await cart_store.set_qty(user_id, key, 99)  # Max qty check in set_qty
-        text = await render_cart(cart)
-        keyboard = build_cart_keyboard(cart, user_id)
+        cart_items = cart_store.get_cart(user_id)
+        item = next((i for i in cart_items if i.product_id == product_id and i.variant_id == variant_id), None)
+        if not item:
+            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
+            return
+
+        old_qty = item.qty
+        cart_store.update_quantity(user_id, product_id, variant_id, item.qty + 1)
+
+        analytics.cart_qty_changed(user_id, f"{product_id}:{variant_id}", old_qty, item.qty + 1)
+        await cb.answer(f"‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.qty + 1}")
+
+        # Update cart view
+        cart_items = cart_store.get_cart(user_id)
+        text = render_cart(cart_items)
+        keyboard = build_cart_keyboard(cart_items)
 
         await safe_edit_message_text(
             cb.message.chat.id,
@@ -127,9 +188,6 @@ async def handle_cart_inc(cb: CallbackQuery):
             reply_markup=keyboard
         )
 
-        analytics.cart_qty_changed(user_id, key, cart.items.get(key, CartItem("", "")).qty)
-        await cb.answer("‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")
-
     except Exception as e:
         logger.error(f"Error increasing quantity: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
@@ -138,21 +196,36 @@ async def handle_cart_inc(cb: CallbackQuery):
 async def handle_cart_dec(cb: CallbackQuery):
     """Decrease item quantity"""
     try:
-        key = cb.data.replace("cart:dec:", "")
+        parts = cb.data.split(":")
+        if len(parts) < 4:
+            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
+            return
+
+        product_id = parts[2]
+        variant_id = parts[3] if parts[3] != "none" else None
         user_id = cb.from_user.id
 
-        # Get current quantity
-        cart = await cart_store.get(user_id)
-        current_qty = cart.items.get(key, CartItem("", "")).qty
+        cart_items = cart_store.get_cart(user_id)
+        item = next((i for i in cart_items if i.product_id == product_id and i.variant_id == variant_id), None)
+        if not item:
+            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
+            return
 
-        if current_qty <= 1:
-            # Remove item instead of setting to 0
-            cart = await cart_store.remove(user_id, key)
+        if item.qty <= 1:
+            # Remove item if qty == 1
+            cart_store.remove_item(user_id, product_id, variant_id)
+            analytics.cart_item_removed(user_id, f"{product_id}:{variant_id}")
+            await cb.answer("Ì∑ë –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
         else:
-            cart = await cart_store.set_qty(user_id, key, current_qty - 1)
+            old_qty = item.qty
+            cart_store.update_quantity(user_id, product_id, variant_id, item.qty - 1)
+            analytics.cart_qty_changed(user_id, f"{product_id}:{variant_id}", old_qty, item.qty - 1)
+            await cb.answer(f"‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.qty - 1}")
 
-        text = await render_cart(cart)
-        keyboard = build_cart_keyboard(cart, user_id)
+        # Update cart view
+        cart_items = cart_store.get_cart(user_id)
+        text = render_cart(cart_items)
+        keyboard = build_cart_keyboard(cart_items)
 
         await safe_edit_message_text(
             cb.message.chat.id,
@@ -161,28 +234,34 @@ async def handle_cart_dec(cb: CallbackQuery):
             reply_markup=keyboard
         )
 
-        new_qty = cart.items.get(key, CartItem("", "")).qty
-        analytics.cart_qty_changed(user_id, key, new_qty)
-        if new_qty == 0:
-            analytics.cart_item_removed(user_id, key)
-
-        await cb.answer("‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
-
     except Exception as e:
         logger.error(f"Error decreasing quantity: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
 
-@router.callback_query(F.data.startswith("cart:del:"))
-async def handle_cart_del(cb: CallbackQuery):
+@router.callback_query(F.data.startswith("cart:rm:"))
+async def handle_cart_rm(cb: CallbackQuery):
     """Remove item from cart"""
     try:
-        key = cb.data.replace("cart:del:", "")
+        parts = cb.data.split(":")
+        if len(parts) < 4:
+            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
+            return
+
+        product_id = parts[2]
+        variant_id = parts[3] if parts[3] != "none" else None
         user_id = cb.from_user.id
 
-        cart = await cart_store.remove(user_id, key)
+        if cart_store.remove_item(user_id, product_id, variant_id):
+            analytics.cart_item_removed(user_id, f"{product_id}:{variant_id}")
+            await cb.answer("Ì∑ë –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
+        else:
+            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
+            return
 
-        text = await render_cart(cart)
-        keyboard = build_cart_keyboard(cart, user_id)
+        # Update cart view
+        cart_items = cart_store.get_cart(user_id)
+        text = render_cart(cart_items)
+        keyboard = build_cart_keyboard(cart_items)
 
         await safe_edit_message_text(
             cb.message.chat.id,
@@ -191,24 +270,24 @@ async def handle_cart_del(cb: CallbackQuery):
             reply_markup=keyboard
         )
 
-        analytics.cart_item_removed(user_id, key)
-        await cb.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
-
     except Exception as e:
-        logger.error(f"Error deleting item: {e}")
+        logger.error(f"Error removing item: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
 
-@router.callback_query(F.data == "cart:clear")
-async def handle_cart_clear(cb: CallbackQuery):
+@router.callback_query(F.data == "cart:clr")
+async def handle_cart_clr(cb: CallbackQuery):
     """Clear entire cart"""
     try:
         user_id = cb.from_user.id
-        await cart_store.clear(user_id)
+        removed_count = cart_store.clear_cart(user_id)
+        analytics.cart_cleared(user_id)
+
+        await cb.answer(f"Ì∑π –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞ ({removed_count} —Ç–æ–≤–∞—Ä–æ–≤)")
 
-        text = CART_EMPTY
-        keyboard = InlineKeyboardMarkup(inline_keyboard=[
-            [InlineKeyboardButton(text=BTN_BACK_RECO, callback_data="cart:back_reco")]
-        ])
+        # Update cart view
+        cart_items = cart_store.get_cart(user_id)
+        text = render_cart(cart_items)
+        keyboard = build_cart_keyboard(cart_items)
 
         await safe_edit_message_text(
             cb.message.chat.id,
@@ -217,120 +296,71 @@ async def handle_cart_clear(cb: CallbackQuery):
             reply_markup=keyboard
         )
 
-        analytics.cart_cleared(user_id)
-        await cb.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
-
     except Exception as e:
         logger.error(f"Error clearing cart: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏", show_alert=True)
 
 @router.callback_query(F.data == "cart:checkout")
 async def handle_cart_checkout(cb: CallbackQuery):
-    """Start checkout process"""
+    """Show checkout screen"""
     try:
         user_id = cb.from_user.id
-        cart = await cart_store.get(user_id)
+        cart_items = cart_store.get_cart(user_id)
 
-        if not cart.items:
-            await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
+        if not cart_items:
+            await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
             return
 
-        # Simple checkout - just show links
-        text = f"{CHECKOUT_TITLE}\n\n"
+        analytics.checkout_started(user_id)
 
-        links = []
-        for item in cart.items.values():
-            links.append(f"‚Ä¢ {item.name}: {item.link}")
+        # Generate checkout links with affiliate tags
+        checkout_lines = [CHECKOUT_TITLE, "", CHECKOUT_LINKS_READY]
 
-        text += f"{CHECKOUT_LINKS_READY}\n\n" + "\n".join(links)
+        for item in cart_items:
+            if item.ref_link:
+                # Add affiliate tag if needed
+                affiliate_link = item.ref_link  # TODO: Add affiliate logic
+                checkout_lines.append(f"‚Ä¢ {item.name} - {affiliate_link}")
 
-        keyboard = InlineKeyboardMarkup(inline_keyboard=[
-            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:open")]
-        ])
+        checkout_lines.append("")
+        checkout_lines.append(MSG_CART_READY_FOR_CHECKOUT)
+
+        text = "\n".join(checkout_lines)
+        keyboard = InlineKeyboardBuilder()
+        keyboard.row(InlineKeyboardButton(text="Ì¥ô –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:open"))
 
         await safe_edit_message_text(
             cb.message.chat.id,
             cb.message.message_id,
             text,
-            reply_markup=keyboard
+            reply_markup=keyboard.as_markup()
         )
 
-        analytics.checkout_started(user_id, len(cart.items), cart.subtotal / 100)
-        analytics.checkout_links_generated(user_id, len(links))
-
-        await cb.answer("‚úÖ –°—Å—ã–ª–∫–∏ –≥–æ—Ç–æ–≤—ã")
-
     except Exception as e:
         logger.error(f"Error in checkout: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", show_alert=True)
 
 @router.callback_query(F.data == "cart:back_reco")
 async def handle_cart_back_reco(cb: CallbackQuery):
-    """Go back to recommendations"""
+    """Return to recommendations"""
     try:
-        # This should trigger showing recommendations again
+        # TODO: Implement proper return to recommendations
         # For now, just show a placeholder
-        text = "üíÑ –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤:"
-        keyboard = InlineKeyboardMarkup(inline_keyboard=[
-            [InlineKeyboardButton(text="üß¥ –û—á–∏—â–µ–Ω–∏–µ", callback_data="rec:more:cleanser:1")],
-            [InlineKeyboardButton(text="üíß –¢–æ–Ω–∏–∫", callback_data="rec:more:toner:1")],
-            [InlineKeyboardButton(text="‚ú® –°—ã–≤–æ—Ä–æ—Ç–∫–∏", callback_data="rec:more:serum:1")],
-            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:open")]
-        ])
+        text = "Ì¥ç –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
+        keyboard = InlineKeyboardBuilder()
+        keyboard.row(InlineKeyboardButton(text="Ìø† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main"))
 
         await safe_edit_message_text(
             cb.message.chat.id,
             cb.message.message_id,
             text,
-            reply_markup=keyboard
+            reply_markup=keyboard.as_markup()
         )
-
-        await cb.answer("üíÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
+        await cb.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º")
 
     except Exception as e:
-        logger.error(f"Error going back to recommendations: {e}")
+        logger.error(f"Error returning to recommendations: {e}")
         await cb.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
 
-@router.callback_query(F.data.startswith("cart:add:"))
-async def handle_cart_add(cb: CallbackQuery):
-    """Add item to cart from recommendations"""
-    try:
-        # Format: cart:add:<pid>:<vid>
-        parts = cb.data.split(":")
-        if len(parts) < 4:
-            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
-            return
-
-        product_id = parts[2]
-        variant_id = parts[3] if parts[3] != "none" else None
-        user_id = cb.from_user.id
-
-        # Create cart item (mock data - should come from real catalog)
-        item = CartItem(
-            product_id=product_id,
-            variant_id=variant_id,
-            name=f"–ü—Ä–æ–¥—É–∫—Ç {product_id}",
-            price=1990,  # 19.90 RUB
-            currency="RUB",
-            qty=1,
-            source="goldapple",
-            link=f"https://goldapple.ru/products/{product_id}",
-            meta={"category": "skincare"}
-        )
-
-        # Validate item exists and is available
-        # TODO: Check against real catalog
-
-        # Add to cart
-        cart = await cart_store.add(user_id, item)
-
-        analytics.cart_item_added(user_id, product_id, variant_id or "", "goldapple", item.price / 100)
-
-        await cb.answer(MSG_ADDED, show_alert=False)
-
-    except Exception as e:
-        logger.error(f"Error adding to cart: {e}")
-        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", show_alert=True)
-
 # Export router
 __all__ = ["router"]
diff --git a/bot/handlers/recommendations.py b/bot/handlers/recommendations.py
index 67e9c52..c10c775 100644
--- a/bot/handlers/recommendations.py
+++ b/bot/handlers/recommendations.py
@@ -40,7 +40,16 @@ except ImportError:  # pragma: no cover - optional dependency
 async def handle_recommendations(cb: CallbackQuery, bot: Bot) -> None:
     try:
         data = cb.data
+        # Legacy rec:add: callbacks - redirect to cart:add:
         if data.startswith("rec:add:"):
+            # Convert rec:add:pid:vid to cart:add:pid:vid format
+            parts = data.split(":")
+            if len(parts) >= 3:
+                product_id = parts[2]
+                variant_id = parts[3] if len(parts) > 3 else "default"
+                # Simulate cart:add: callback
+                cb.data = f"cart:add:{product_id}:{variant_id}"
+                # This will be handled by cart_v2 router
             await cb.answer(MSG_CART_UPDATED, show_alert=False)
             return
 
diff --git a/bot/main.py b/bot/main.py
index de1d4f9..1c8cc11 100644
--- a/bot/main.py
+++ b/bot/main.py
@@ -66,13 +66,13 @@ except ImportError as e:
     print(f"ERROR Failed to import makeup picker router: {e}")
     raise
 
-try:
-    from bot.handlers.cart import router as cart_router
-
-    print("OK cart router imported")
-except ImportError as e:
-    print(f"ERROR Failed to import cart router: {e}")
-    raise
+# LEGACY CART DISABLED - using cart_v2 only
+# try:
+#     from bot.handlers.cart import router as cart_router
+#     print("OK cart router imported")
+# except ImportError as e:
+#     print(f"ERROR Failed to import cart router: {e}")
+#     raise
 
 try:
     from bot.handlers.report import router as report_router
@@ -322,7 +322,8 @@ async def main() -> None:
     dp.include_router(makeup_picker_router)  # Makeup product picker - AFTER tests
     dp.include_router(skincare_router)
     dp.include_router(palette_router)
-    dp.include_router(cart_router)
+    # LEGACY CART DISABLED
+    # dp.include_router(cart_router)
     dp.include_router(report_router)
     dp.include_router(universal_router)  # Universal catch-all - LOWEST PRIORITY
 
diff --git a/bot/utils/sanitize.py b/bot/utils/sanitize.py
new file mode 100644
index 0000000..f9c5ff1
--- /dev/null
+++ b/bot/utils/sanitize.py
@@ -0,0 +1,30 @@
+import re
+
+def sanitize_message(text: str) -> str:
+    """
+    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ò–ò,
+    —Å–æ—Ö—Ä–∞–Ω—è—è Markdown –∏ —Å—Å—ã–ª–∫–∏.
+    """
+    if not text:
+        return text
+
+    # –£–¥–∞–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ —Ä–µ—à–µ—Ç–∫–∏ (–µ—Å–ª–∏ –Ω–µ –≤ —Å—Å—ã–ª–∫–∞—Ö)
+    # –ù–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º Markdown: **bold**, ## headers
+    text = re.sub(r'(?<!\*)\*(?!\*)', '', text)  # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ *
+    text = re.sub(r'(?<!#)#(?![#])', '', text)  # –£–¥–∞–ª—è–µ–º # –Ω–µ –ø–µ—Ä–µ–¥ –¥—Ä—É–≥–∏–º #
+
+    # –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ –Ω–∞ –æ–±—ã—á–Ω–æ–µ
+    text = text.replace('‚Äî', '-').replace('‚Äì', '-')
+
+    # –°—Ö–ª–æ–ø—ã–≤–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
+    text = re.sub(r'\n{3,}', '\n\n', text)  # –ù–µ –±–æ–ª–µ–µ 2 –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
+    text = re.sub(r' {2,}', ' ', text)  # –ù–µ –±–æ–ª–µ–µ 1 –ø—Ä–æ–±–µ–ª–∞
+
+    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ
+    text = text.strip()
+
+    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ò–ò (–ø—Ä–∏–º–µ—Ä—ã)
+    text = re.sub(r'<[^>]+>', '', text)  # –£–¥–∞–ª—è–µ–º <text>
+    text = re.sub(r'\[([^\]]+)\](?!\()', '', text)  # –£–¥–∞–ª—è–µ–º [text] –Ω–µ –ø–µ—Ä–µ–¥ (
+
+    return text
diff --git a/cart_screenshot.txt b/cart_screenshot.txt
new file mode 100644
index 0000000..d1b472e
--- /dev/null
+++ b/cart_screenshot.txt
@@ -0,0 +1,22 @@
+=== –¢–ï–ö–°–¢–û–í–´–ô –°–ö–†–ò–ù –ö–û–†–ó–ò–ù–´ –° 2-3 –¢–û–í–ê–†–ê–ú–ò ===
+
+Ìªí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞
+
+–û—á–∏—â–∞—é—â–∏–π –≥–µ–ª—å CeraVe ‚Ä¢ 1 590 ‚ÇΩ √ó 2 = 3 190 ‚ÇΩ
+‚ûñ   2   ‚ûï   Ì∑ë
+
+–¢–æ–Ω–∏–∫ La Roche-Posay ‚Ä¢ 2 890 ‚ÇΩ √ó 1 = 2 890 ‚ÇΩ  
+‚ûñ   1   ‚ûï   Ì∑ë
+
+–°—ã–≤–æ—Ä–æ—Ç–∫–∞ The Ordinary ‚Ä¢ 1 990 ‚ÇΩ √ó 3 = 5 970 ‚ÇΩ
+‚ûñ   3   ‚ûï   Ì∑ë
+
+–ò—Ç–æ–≥–æ: 6 —à—Ç √ó 12 050 ‚ÇΩ
+
+Ì∑π –û—á–∏—Å—Ç–∏—Ç—å   Ì¥ç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä   Ì∑æ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
+
+=== –ü–£–°–¢–ê–Ø –ö–û–†–ó–ò–ù–ê ===
+
+–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä¬ª, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä—ã.
+
+Ì¥ç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä
diff --git a/services/cart_store.py b/services/cart_store.py
index 209118a..9b97c76 100644
--- a/services/cart_store.py
+++ b/services/cart_store.py
@@ -47,6 +47,16 @@ class CartItem:
         variant = self.variant_id or "default"
         return f"{self.product_id}:{variant}"
 
+    @property
+    def qty(self) -> int:
+        """Alias for quantity - always synchronized"""
+        return self.quantity
+
+    @qty.setter
+    def qty(self, value: int) -> None:
+        """Setter for qty - synchronizes with quantity"""
+        self.quantity = max(int(value), 0)
+
     def increase(self, step: int = 1, *, max_quantity: int = 99) -> int:
         self.quantity = min(self.quantity + step, max_quantity)
         return self.quantity
@@ -155,10 +165,16 @@ class CartStore:
         variant_id: Optional[str] = None,
         quantity: int = 1,
         **kwargs,
-    ) -> CartItem:
+    ) -> Tuple[CartItem, bool]:
+        """Add item to cart. Returns (item, currency_conflict)"""
         cart = self.get_cart(user_id)
         item = self._find_item(cart, product_id, variant_id)
 
+        # Check for currency conflict
+        new_currency = kwargs.get("currency", "RUB")
+        existing_currencies = {item.currency for item in cart if item.currency}
+        currency_conflict = bool(existing_currencies and new_currency not in existing_currencies)
+
         if item:
             item.increase(max(quantity, 0) or 1)
         else:
@@ -171,7 +187,7 @@ class CartStore:
             cart.append(item)
 
         self._save_cart(user_id, cart)
-        return item
+        return item, currency_conflict
 
     def update_quantity(
         self, user_id: int, product_id: str, variant_id: Optional[str], quantity: int
diff --git a/tests/test_cart.py b/tests/test_cart.py
index 59328c4..4597e5d 100644
--- a/tests/test_cart.py
+++ b/tests/test_cart.py
@@ -29,7 +29,7 @@ class TestCartStore(unittest.TestCase):
     def test_add_item_new_product(self):
         """Test adding a new product to cart"""
         user_id = 12345
-        item = self.store.add_item(
+        item, currency_conflict = self.store.add_item(
             user_id=user_id,
             product_id="test_product",
             variant_id="variant1",
@@ -151,6 +151,97 @@ class TestCartStore(unittest.TestCase):
         self.assertEqual(cart[0].quantity, 5)
         self.assertEqual(cart[0].price, 100.0)
 
+    def test_currency_conflict_detection(self):
+        """Test currency conflict detection"""
+        user_id = 12345
+
+        # Add first item with RUB
+        item1, conflict1 = self.store.add_item(
+            user_id=user_id,
+            product_id="rub_product",
+            name="RUB Product",
+            price=100.0,
+            currency="RUB"
+        )
+        self.assertFalse(conflict1)
+
+        # Add second item with RUB (no conflict)
+        item2, conflict2 = self.store.add_item(
+            user_id=user_id,
+            product_id="rub_product2",
+            name="RUB Product 2",
+            price=200.0,
+            currency="RUB"
+        )
+        self.assertFalse(conflict2)
+
+        # Add item with different currency (should conflict)
+        item3, conflict3 = self.store.add_item(
+            user_id=user_id,
+            product_id="usd_product",
+            name="USD Product",
+            price=50.0,
+            currency="USD"
+        )
+        self.assertTrue(conflict3)
+
+    def test_add_same_product_twice(self):
+        """Test adding the same product twice increases quantity"""
+        user_id = 12345
+
+        # Add first time
+        item1, conflict1 = self.store.add_item(
+            user_id=user_id,
+            product_id="same_product",
+            variant_id="variant1",
+            quantity=2,
+            name="Same Product",
+            price=100.0
+        )
+        self.assertEqual(item1.qty, 2)
+
+        # Add same product again
+        item2, conflict2 = self.store.add_item(
+            user_id=user_id,
+            product_id="same_product",
+            variant_id="variant1",
+            quantity=3,
+            name="Same Product",
+            price=100.0
+        )
+        self.assertEqual(item2.qty, 5)  # 2 + 3
+
+        # Check cart has only one item
+        cart = self.store.get_cart(user_id)
+        self.assertEqual(len(cart), 1)
+
+    def test_cart_totals_calculation(self):
+        """Test cart totals calculation"""
+        user_id = 12345
+
+        # Add items
+        self.store.add_item(user_id, "p1", name="Product 1", price=100.0, quantity=2)
+        self.store.add_item(user_id, "p2", name="Product 2", price=50.0, quantity=1)
+
+        total_qty, total_price, currency = self.store.get_cart_total(user_id)
+        self.assertEqual(total_qty, 3)  # 2 + 1
+        self.assertEqual(total_price, 250.0)  # 100*2 + 50*1
+        self.assertEqual(currency, "RUB")
+
+    def test_dec_to_zero_removes_item(self):
+        """Test that decreasing quantity to 0 removes item"""
+        user_id = 12345
+
+        # Add item
+        self.store.add_item(user_id, "test_product", quantity=1, name="Test", price=100.0)
+
+        # Decrease to 0 should remove
+        success = self.store.update_quantity(user_id, "test_product", None, 0)
+        self.assertTrue(success)
+
+        cart = self.store.get_cart(user_id)
+        self.assertEqual(len(cart), 0)
+
 
 if __name__ == "__main__":
     unittest.main()
diff --git a/tests/test_sanitize.py b/tests/test_sanitize.py
new file mode 100644
index 0000000..f88da2d
--- /dev/null
+++ b/tests/test_sanitize.py
@@ -0,0 +1,43 @@
+import pytest
+from bot.utils.sanitize import sanitize_message
+
+
+class TestSanitizeMessage:
+    """Unit tests for message sanitization"""
+
+    def test_remove_single_asterisks(self):
+        """Remove single * but keep ** for bold"""
+        input_text = "Hello *world* and **bold** text"
+        expected = "Hello world and **bold** text"
+        assert sanitize_message(input_text) == expected
+
+    def test_remove_single_hashes(self):
+        """Remove single # but keep ### headers"""
+        input_text = "# Header\n## Subheader\n#notheader"
+        expected = "Header\n## Subheader\nnotheader"
+        assert sanitize_message(input_text) == expected
+
+    def test_normalize_dashes(self):
+        """Replace long dashes with regular dash"""
+        input_text = "Range: 1‚Äì10 and ‚Äî separator"
+        expected = "Range: 1-10 and - separator"
+        assert sanitize_message(input_text) == expected
+
+    def test_collapse_whitespace(self):
+        """Collapse multiple spaces and newlines"""
+        input_text = "Text   with    spaces\n\n\n\nMultiple\n\nlines"
+        expected = "Text with spaces\n\nMultiple\n\nlines"
+        assert sanitize_message(input_text) == expected
+
+    def test_preserve_links(self):
+        """Keep markdown links and URLs intact"""
+        input_text = "[Link text](https://example.com) and http://site.com"
+        expected = "[Link text](https://example.com) and http://site.com"
+        assert sanitize_message(input_text) == expected
+
+    def test_remove_brackets_and_angles(self):
+        """Remove bracketed and angled artifacts"""
+        input_text = "Text [artifact] and <angle> content"
+        expected = "Text  and  content"
+        assert sanitize_message(input_text) == expected
+
