diff --git a/bot/handlers/recommendations.py b/bot/handlers/recommendations.py
index 2e2422a..c2e196e 100644
--- a/bot/handlers/recommendations.py
+++ b/bot/handlers/recommendations.py
@@ -1,334 +1,183 @@
 """
-üõçÔ∏è Recommendations Handler
-
-Shows product recommendations with inline buttons for cart operations
+Recommendations handler: shows products and routes cart callbacks.
 """
 
+from __future__ import annotations
+
 import logging
-from aiogram import Router, F, Bot
-from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
+from typing import List
+
+from aiogram import Bot, F, Router
+from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
 from aiogram.utils.keyboard import InlineKeyboardBuilder
 
-from engine.cart_store import CartStore, CartItem
+from bot.ui.render import safe_send_message
 from config.env import get_settings
-from bot.utils.security import safe_send_message
-from i18n.ru import *
+from i18n.ru import (
+    BTN_ADD,
+    BTN_BACK,
+    BTN_BACK_RECO,
+    BTN_CART_CONTINUE,
+    BTN_MORE,
+    MSG_CART_UPDATED,
+)
+
+logger = logging.getLogger(__name__)
+router = Router()
 
-# Import SelectorV2 for recommendations
 try:
     from engine.selector import SelectorV2
+
+    _selector = SelectorV2()
     selector_available = True
-except ImportError:
+except ImportError:  # pragma: no cover - optional dependency
     selector_available = False
-    logger.warning("SelectorV2 not available - recommendations will use fallback")
-
-logger = logging.getLogger(__name__)
-router = Router()
+    _selector = None
+    logger.warning("SelectorV2 not available; recommendations will use static fallback")
 
-# Global cart store instance
-cart_store = CartStore()
 
 @router.callback_query(F.data.startswith("rec:"))
-async def handle_recommendations(cb: CallbackQuery, bot: Bot):
-    """Handle recommendations callbacks"""
+async def handle_recommendations(cb: CallbackQuery, bot: Bot) -> None:
     try:
         data = cb.data
-        user_id = cb.from_user.id
-        settings = get_settings()
-
         if data.startswith("rec:add:"):
-            # Add to cart: rec:add:<pid>:<vid>
-            parts = data.split(":")
-            if len(parts) < 4:
-                await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
-                return
-
-            product_id = parts[2]
-            variant_id = parts[3] if len(parts) > 3 and parts[3] != "none" else None
-
-            # Try to get real product data from selector
-            product_data = None
-            if selector_available:
-                try:
-                    selector = SelectorV2()
-                    all_products = selector.select_products(user_id, category="all", limit=100)
-                    for prod in all_products:
-                        if str(prod.get("id", "")) == product_id:
-                            product_data = prod
-                            break
-                except Exception as e:
-                    logger.warning(f"Could not get product data for {product_id}: {e}")
-
-            # Create cart item with real or fallback data
-            if product_data:
-                item = CartItem(
-                    product_id=product_id,
-                    variant_id=variant_id,
-                    name=product_data.get("name", f"–ü—Ä–æ–¥—É–∫—Ç {product_id}"),
-                    price=int(product_data.get("price", 0) * 100),  # Convert to cents
-                    currency="RUB",
-                    source="recommendations",
-                    link="",  # Will be filled by affiliate system
-                )
-            else:
-                # Fallback mock data
-                item = CartItem(
-                    product_id=product_id,
-                    variant_id=variant_id,
-                    name=f"–ü—Ä–æ–¥—É–∫—Ç {product_id}",
-                    price=1990,  # 19.90 RUB in cents
-                    currency="RUB",
-                    source="recommendations",
-                    link="",
-                )
-
-            # Add to cart
-            cart = await cart_store.add(user_id, item)
-
-            # Analytics
-            try:
-                from engine.analytics import cart_item_added
-                cart_item_added(
-                    user_id=user_id,
-                    product_id=product_id,
-                    variant_id=variant_id or "",
-                    source="recommendations",
-                    price=item.price,
-                )
-            except Exception as e:
-                logger.warning(f"Analytics error: {e}")
-
-            # Update cart badge in UI
-            await cb.answer(MSG_ADDED, show_alert=False)
-
-            # Optionally update message with cart count
-            # This would require re-rendering the recommendations
-
-        elif data.startswith("rec:open:"):
-            # Open product details: rec:open:<pid>
-            product_id = data.split(":")[2]
-            # Mock product details
-            text = f"üì¶ **–ü—Ä–æ–¥—É–∫—Ç {product_id}**\n\n–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞..."
-            keyboard = InlineKeyboardMarkup(inline_keyboard=[
-                [InlineKeyboardButton(text=BTN_ADD, callback_data=f"rec:add:{product_id}:none")],
-                [InlineKeyboardButton(text=BTN_BACK, callback_data="rec:back")]
-            ])
-            await cb.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
-
-        elif data.startswith("rec:more:"):
-            # Load more recommendations: rec:more:<category>:<page>
-            parts = data.split(":")
-            category = parts[2] if len(parts) > 2 else "all"
-            page = int(parts[3]) if len(parts) > 3 else 1
-
-            # Generate next page of recommendations
-            await show_recommendations_page(cb, category, page)
+            # Legacy callbacks: guide user to updated buttons
+            await cb.answer(MSG_CART_UPDATED, show_alert=False)
+            return
 
+        if data.startswith("rec:open:"):
+            product_id = data.split(":")[2]
+            await _show_product_details(cb, product_id)
+        elif data.startswith("rec:more:")):
+            _, _, category, page = (data.split(":") + ["all", "1"])[:4]
+            await show_recommendations_page(cb, category or "all", int(page or 1))
         elif data == "rec:back":
-            # Back to main recommendations
             await show_main_recommendations(cb)
-
         await cb.answer()
-
-    except Exception as e:
-        logger.error(f"Error in recommendations handler: {e}")
-        await cb.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
-
-async def show_recommendations_page(cb: CallbackQuery, category: str = "skincare", page: int = 1):
-    """Show paginated recommendations"""
-    items_per_page = 3
-    start_idx = (page - 1) * items_per_page
-
-    # Mock recommendations data
-    mock_products = [
-        {"id": "cleanser-001", "name": "–û—á–∏—â–∞—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ CeraVe", "price": 1590, "category": "cleanser"},
-        {"id": "toner-001", "name": "–¢–æ–Ω–∏–∫ La Roche-Posay", "price": 1890, "category": "toner"},
-        {"id": "serum-001", "name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ The Ordinary", "price": 2190, "category": "serum"},
-        {"id": "moisturizer-001", "name": "–£–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º Neutrogena", "price": 1290, "category": "moisturizer"},
-        {"id": "sunscreen-001", "name": "SPF La Prairie", "price": 2990, "category": "sunscreen"},
+    except Exception as exc:  # pragma: no cover
+        logger.exception("Error in recommendations handler: %s", exc)
+        await cb.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", show_alert=True)
+
+
+def _product_button(product_id: str, label: str) -> InlineKeyboardButton:
+    return InlineKeyboardButton(
+        text=label,
+        callback_data=f"cart:add:{product_id}:default",
+    )
+
+
+async def _show_product_details(cb: CallbackQuery, product_id: str) -> None:
+    text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä {product_id}. –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É?"
+    keyboard = InlineKeyboardMarkup(
+        inline_keyboard=[
+            [_product_button(product_id, BTN_ADD)],
+            [InlineKeyboardButton(text=BTN_BACK, callback_data="rec:back")],
+        ]
+    )
+    await cb.message.edit_text(text, reply_markup=keyboard)
+
+
+def _fallback_products() -> List[dict]:
+    return [
+        {"id": "cleanser-001", "name": "–û—á–∏—â–∞—é—â–∏–π –≥–µ–ª—å", "price": 1590, "category": "cleanser"},
+        {"id": "toner-001", "name": "–£—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–π —Ç–æ–Ω–∏–∫", "price": 1890, "category": "toner"},
+        {"id": "serum-001", "name": "–°—ã–≤–æ—Ä–æ—Ç–∫–∞ —Å –≤–∏—Ç–∞–º–∏–Ω–æ–º –°", "price": 2190, "category": "serum"},
+        {"id": "moisturizer-001", "name": "–£–≤–ª–∞–∂–Ω—è—é—â–∏–π –∫—Ä–µ–º", "price": 1290, "category": "moisturizer"},
+        {"id": "sunscreen-001", "name": "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º", "price": 2990, "category": "sunscreen"},
     ]
 
-    # Filter by category
+
+def _filter_products(category: str, page: int, per_page: int = 3) -> tuple[List[dict], int]:
+    if selector_available and _selector:
+        try:
+            all_products = _selector.select_products(user_id=None, category="all", limit=50)
+        except Exception as exc:  # pragma: no cover - diagnostics only
+            logger.warning("Selector fetch failed: %s", exc)
+            all_products = _fallback_products()
+    else:
+        all_products = _fallback_products()
+
     if category != "all":
-        filtered = [p for p in mock_products if p["category"] == category]
+        filtered = [p for p in all_products if p.get("category") == category]
     else:
-        filtered = mock_products
+        filtered = all_products
+
+    total_pages = max(1, (len(filtered) + per_page - 1) // per_page)
+    start = (page - 1) * per_page
+    end = start + per_page
+    return filtered[start:end], total_pages
 
-    # Paginate
-    total_pages = (len(filtered) + items_per_page - 1) // items_per_page
-    page_items = filtered[start_idx:start_idx + items_per_page]
 
-    text = f"üíÑ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏** ({category})\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}\n\n"
+async def show_recommendations_page(cb: CallbackQuery, category: str = "all", page: int = 1) -> None:
+    page_items, total_pages = _filter_products(category, page)
 
+    text_lines = [
+        f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ¬∑ {category}",
+        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}",
+        "",
+    ]
     keyboard = InlineKeyboardBuilder()
 
     for product in page_items:
-        price_rub = product["price"] // 100  # Convert cents to rubles
-        text += f"üß¥ **{product['name']}**\n"
-        text += f"‚Äî —Ü–µ–Ω–∞: {price_rub} ‚ÇΩ\n"
-        text += f"‚Äî –º–∞–≥–∞–∑–∏–Ω: Gold Apple\n\n"
+        name = product.get("name", "–¢–æ–≤–∞—Ä")
+        product_id = product.get("id", "unknown")
+        price = product.get("price")
+        price_row = f"{price} ‚ÇΩ" if price else "‚Äî"
+        text_lines.append(f"‚Ä¢ {name} ‚Äî {price_row}")
+        keyboard.row(_product_button(product_id, BTN_ADD))
 
-        # Buttons for each product
+    if page > 1:
         keyboard.row(
             InlineKeyboardButton(
-                text=BTN_ADD,
-                callback_data=f"rec:add:{product['id']}:none"
-            ),
-            InlineKeyboardButton(
-                text=BTN_DETAILS,
-                callback_data=f"rec:open:{product['id']}"
+                text="‚¨Ö –ù–∞–∑–∞–¥",
+                callback_data=f"rec:more:{category}:{page-1}",
             )
         )
-
-    # Navigation buttons
-    nav_buttons = []
-    if page > 1:
-        nav_buttons.append(InlineKeyboardButton(
-            text=BTN_PREV,
-            callback_data=f"rec:more:{category}:{page-1}"
-        ))
     if page < total_pages:
-        nav_buttons.append(InlineKeyboardButton(
-            text=BTN_NEXT,
-            callback_data=f"rec:more:{category}:{page+1}"
-        ))
-
-    if nav_buttons:
-        keyboard.row(*nav_buttons)
+        keyboard.row(
+            InlineKeyboardButton(
+                text="–í–ø–µ—Ä—ë–¥ ‚û°",
+                callback_data=f"rec:more:{category}:{page+1}",
+            )
+        )
 
-    # Back button
-    keyboard.row(InlineKeyboardButton(text=BTN_BACK, callback_data="rec:back"))
+    keyboard.row(InlineKeyboardButton(text=BTN_BACK_RECO, callback_data="rec:back"))
+    keyboard.row(InlineKeyboardButton(text=BTN_CART_CONTINUE, callback_data="cart:open"))
 
-    await cb.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
+    await cb.message.edit_text("
+".join(text_lines), reply_markup=keyboard.as_markup())
 
-async def show_main_recommendations(cb: CallbackQuery):
-    """Show main recommendations screen with categories"""
-    text = "üíÑ **–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞**\n\n"
-    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:"
 
+async def show_main_recommendations(cb: CallbackQuery) -> None:
+    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä."
     keyboard = InlineKeyboardBuilder()
-
     categories = [
         ("–û—á–∏—â–µ–Ω–∏–µ", "cleanser"),
-        ("–¢–æ–Ω–∏–∫", "toner"),
+        ("–¢–æ–Ω–∏–∫–∏", "toner"),
         ("–°—ã–≤–æ—Ä–æ—Ç–∫–∏", "serum"),
-        ("–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "moisturizer"),
+        ("–ö—Ä–µ–º—ã", "moisturizer"),
         ("–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞", "sunscreen"),
     ]
+    for title, slug in categories:
+        keyboard.row(
+            InlineKeyboardButton(text=title, callback_data=f"rec:more:{slug}:1")
+        )
+    keyboard.row(InlineKeyboardButton(text=BTN_CART_CONTINUE, callback_data="cart:open"))
+    await cb.message.edit_text(text, reply_markup=keyboard.as_markup())
 
-    for cat_name, cat_id in categories:
-        keyboard.row(InlineKeyboardButton(
-            text=f"üß¥ {cat_name}",
-            callback_data=f"rec:more:{cat_id}:1"
-        ))
-
-    # Show all
-    keyboard.row(InlineKeyboardButton(
-        text="üìã –í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
-        callback_data="rec:more:all:1"
-    ))
-
-    await cb.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="Markdown")
 
-async def show_recommendations_after_test(bot: Bot, user_id: int, test_type: str = "skincare"):
-    """Show recommendations after completing a test - CART V2 INTEGRATION"""
-    try:
-        text = "üéâ **–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!**\n\n"
-        text += "–í–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—Å:\n\n"
-
-        # Get real recommendations using SelectorV2
-        if selector_available:
-            try:
-                selector = SelectorV2()
-                recommendations = selector.select_products(user_id, category="all", limit=6)
-            except Exception as e:
-                logger.error(f"Failed to get recommendations from SelectorV2: {e}")
-                recommendations = []
-        else:
-            logger.warning("SelectorV2 not available, using empty recommendations")
-            recommendations = []
+async def show_recommendations_after_test(bot: Bot, user_id: int, test_type: str = "skincare") -> None:
+    settings = get_settings()
+    text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–æ—Ä–∞ –≥–æ—Ç–æ–≤—ã. –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π:" if settings else "–í–æ—Ç —á—Ç–æ –º—ã –Ω–∞—à–ª–∏ –¥–ª—è –≤–∞—Å:"
+    keyboard = InlineKeyboardBuilder()
 
-        try:
-            if recommendations:
-                keyboard = InlineKeyboardBuilder()
-
-                for i, product in enumerate(recommendations[:3]):  # Show first 3 products
-                    product_name = product.get("name", f"–¢–æ–≤–∞—Ä {i+1}")
-                    product_id = product.get("id", f"unknown-{i}")
-                    price = product.get("price", 0)
-
-                    # Product info
-                    text += f"üß¥ **{product_name}**\n"
-                    if price:
-                        text += f"üí∞ {price} ‚ÇΩ\n"
-                    text += "\n"
-
-                    # Add to cart button
-                    keyboard.row(InlineKeyboardButton(
-                        text=f"–î–æ–±–∞–≤–∏—Ç—å ‚ñ∏ {product_name[:20]}...",
-                        callback_data=f"rec:add:{product_id}:default"
-                    ))
-
-                # More recommendations button
-                keyboard.row(InlineKeyboardButton(
-                    text="üõçÔ∏è –ë–æ–ª—å—à–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π",
-                    callback_data=f"rec:more:{test_type}:1"
-                ))
-
-                # Cart button
-                keyboard.row(InlineKeyboardButton(
-                    text="üõí –ö–æ—Ä–∑–∏–Ω–∞",
-                    callback_data="cart:open"
-                ))
-
-                await safe_send_message(
-                    bot, user_id,
-                    text,
-                    reply_markup=keyboard.as_markup(),
-                    parse_mode="Markdown"
-                )
-            else:
-                # Fallback if no recommendations
-                text += "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ."
-
-                keyboard = InlineKeyboardBuilder()
-                keyboard.row(InlineKeyboardButton(
-                    text="üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ",
-                    callback_data=f"start:{test_type}"
-                ))
-
-                await safe_send_message(
-                    bot, user_id,
-                    text,
-                    reply_markup=keyboard.as_markup(),
-                    parse_mode="Markdown"
-                )
-
-        except Exception as e:
-            logger.error(f"Failed to get recommendations: {e}")
-            # Fallback message
-            text += "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n\n"
-            text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤:"
-
-            keyboard = InlineKeyboardBuilder()
-            keyboard.row(InlineKeyboardButton(
-                text="üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤",
-                callback_data="rec:more:all:1"
-            ))
-            keyboard.row(InlineKeyboardButton(
-                text="üõí –ö–æ—Ä–∑–∏–Ω–∞",
-                callback_data="cart:open"
-            ))
-
-            await safe_send_message(
-                bot, user_id,
-                text,
-                reply_markup=keyboard.as_markup(),
-                parse_mode="Markdown"
-            )
+    products, _ = _filter_products("all", 1)
+    for product in products[:3]:
+        name = product.get("name", "–¢–æ–≤–∞—Ä")
+        product_id = product.get("id", "unknown")
+        keyboard.row(_product_button(product_id, f"–î–æ–±–∞–≤–∏—Ç—å {name[:18]}"))
 
-    except Exception as e:
-        logger.error(f"Error showing recommendations after test: {e}")
+    keyboard.row(InlineKeyboardButton(text=BTN_MORE, callback_data=f"rec:more:{test_type}:1"))
+    keyboard.row(InlineKeyboardButton(text=BTN_CART_CONTINUE, callback_data="cart:open"))
 
-# Export functions for use in other handlers
-__all__ = ["router", "show_recommendations_after_test"]
+    await safe_send_message(bot, user_id, text, reply_markup=keyboard.as_markup())
