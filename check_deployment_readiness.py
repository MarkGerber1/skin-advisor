#!/usr/bin/env python
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Railway
"""

import os
import sys
from pathlib import Path

def check_file_exists(path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if os.path.exists(path):
        print(f"‚úÖ {description}: {path}")
        return True
    else:
        print(f"‚ùå {description}: {path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_directory_exists(path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    if os.path.exists(path) and os.path.isdir(path):
        print(f"‚úÖ {description}: {path}")
        return True
    else:
        print(f"‚ùå {description}: {path} - –ù–ï –ù–ê–ô–î–ï–ù–ê")
        return False

def check_dockerfile():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Dockerfile"""
    dockerfile_path = "Dockerfile"
    if not check_file_exists(dockerfile_path, "Dockerfile"):
        return False

    try:
        with open(dockerfile_path, 'r', encoding='utf-8') as f:
            content = f.read()

        required_commands = [
            "FROM python:",
            "COPY requirements.txt",
            "RUN pip install",
            "COPY bot/",
            "COPY engine/",
            "COPY assets/",
            "CMD ["
        ]

        for cmd in required_commands:
            if cmd in content:
                print(f"   ‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç: {cmd}")
            else:
                print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {cmd}")
                return False

        print("   ‚úÖ Dockerfile –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
        return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Dockerfile: {e}")
        return False

def check_railway_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Railway"""
    configs = ["railway.json", "railway.toml"]
    found = False

    for config in configs:
        if os.path.exists(config):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω Railway config: {config}")
            found = True
            break

    if not found:
        print("‚ùå Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    return True

def check_entry_points():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞"""
    entry_points = ["start.py", "entrypoint.sh", "bot/main.py"]

    for ep in entry_points:
        check_file_exists(ep, f"Entry point: {ep}")

    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ start.py –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç main
    if os.path.exists("start.py"):
        try:
            with open("start.py", 'r', encoding='utf-8') as f:
                content = f.read()
                if "from bot.main import main" in content:
                    print("   ‚úÖ start.py –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç main")
                else:
                    print("   ‚ùå start.py –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç main")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è start.py: {e}")

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements.txt"""
    req_path = "requirements.txt"
    if not check_file_exists(req_path, "Requirements file"):
        return False

    try:
        with open(req_path, 'r', encoding='utf-8') as f:
            content = f.read()

        required_packages = ["aiogram", "fpdf", "python-dotenv", "pydantic"]
        missing = []

        for package in required_packages:
            if package not in content:
                missing.append(package)

        if missing:
            print(f"   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing)}")
            return False
        else:
            print("   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return True

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è requirements.txt: {e}")
        return False

def check_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")

    critical_vars = ["BOT_TOKEN"]
    optional_vars = ["USE_WEBHOOK", "WEBHOOK_BASE", "LOG_LEVEL", "CATALOG_PATH"]

    # –ü—Ä–æ–≤–µ—Ä–∏–º .env —Ñ–∞–π–ª
    env_files = [".env", "env.example", ".env.local.example"]
    env_found = False

    for env_file in env_files:
        if os.path.exists(env_file):
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {env_file}")
            env_found = True
            break

    if not env_found:
        print("   ‚ö†Ô∏è  –§–∞–π–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("   üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env.example")

    # –ü—Ä–æ–≤–µ—Ä–∏–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var in critical_vars:
        if os.environ.get(var):
            print(f"   ‚úÖ {var}: –£–°–¢–ê–ù–û–í–õ–ï–ù–ê")
        else:
            print(f"   ‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê (–ö–†–ò–¢–ò–ß–ù–û!)")

def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:")

    required_dirs = [
        ("bot", "–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞"),
        ("engine", "–î–≤–∏–∂–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"),
        ("assets", "–ö–∞—Ç–∞–ª–æ–≥ –∏ —Ä–µ—Å—É—Ä—Å—ã"),
        ("services", "–°–µ—Ä–≤–∏—Å—ã (affiliate, cart)"),
        ("config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("i18n", "–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è")
    ]

    required_files = [
        ("bot/main.py", "–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"),
        ("engine/selector_schema.py", "–°—Ö–µ–º–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞"),
        ("assets/fixed_catalog.yaml", "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"),
        ("services/affiliates.py", "Affiliate —Å–µ—Ä–≤–∏—Å"),
        ("services/text_sanitizer.py", "–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞")
    ]

    all_good = True

    for dir_path, description in required_dirs:
        if not check_directory_exists(dir_path, description):
            all_good = False

    for file_path, description in required_files:
        if not check_file_exists(file_path, description):
            all_good = False

    return all_good

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÇ === –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ –ù–ê RAILWAY ===\n")

    checks = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", check_project_structure),
        ("Dockerfile", check_dockerfile),
        ("Railway –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", check_railway_config),
        ("–¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞", check_entry_points),
        ("Requirements", check_requirements),
    ]

    results = []

    for check_name, check_func in checks:
        print(f"\nüîç {check_name}:")
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {check_name}: {e}")
            results.append((check_name, False))

    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_env_variables()

    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")

    all_passed = True
    for check_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–ê" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù–ê"
        print("30")
        if not result:
            all_passed = False

    if all_passed:
        print("\nüéâ –ü–†–û–ï–ö–¢ –ì–û–¢–û–í –ö –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ –ù–ê RAILWAY!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Railway CLI: npm install -g @railway/cli")
        print("2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: railway login")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: railway init")
        print("4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: railway variables set BOT_TOKEN=your_token")
        print("5. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ: railway up")
    else:
        print("\n‚ö†Ô∏è  –ü–†–û–ï–ö–¢ –ù–£–ñ–î–ê–ï–¢–°–Ø –í –î–û–†–ê–ë–û–¢–ö–ï!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º.")

    print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: RAILWAY_DEPLOY_GUIDE.md")
    print("="*60)

if __name__ == "__main__":
    main()
