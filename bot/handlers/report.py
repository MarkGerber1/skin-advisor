from __future__ import annotations

import os
from aiogram import Router, F
from aiogram.types import CallbackQuery

try:
    from aiogram.types import FSInputFile
except ImportError:
    from aiogram.types import InputFile as FSInputFile


router = Router()


def _user_id(cb: CallbackQuery) -> int | None:
    if cb.from_user and cb.from_user.id:
        return int(cb.from_user.id)
    return None


@router.callback_query(F.data == "report:latest")
async def send_latest_report(cb: CallbackQuery) -> None:
    try:
        uid = _user_id(cb)
        if not uid:
            await cb.answer()
            return
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å v2 PDF, –∑–∞—Ç–µ–º simple/minimal, –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –æ—Ç—á—ë—Ç–∞
        base_dir = os.path.join("data", "reports", str(uid))
        candidates = [
            os.path.join(base_dir, "last_v2.pdf"),
            os.path.join(base_dir, "last_v2_simple.pdf"),
            os.path.join(base_dir, "last_v2_minimal.pdf"),
            os.path.join(base_dir, "last.pdf"),
        ]

        path = next((p for p in candidates if os.path.exists(p)), None)
        if not path:
            # –§–æ–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
            try:
                from bot.ui.report_builder import load_report_blocks, render_report_telegram

                loaded = load_report_blocks(uid)
                if not loaded:
                    await cb.answer("–û—Ç—á—ë—Ç –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", show_alert=True)
                    return
                _, blocks = loaded
                text, kb_spec = render_report_telegram(blocks)
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                kb = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text=lbl, callback_data=cbdata) for (lbl, cbdata) in row]
                        for row in kb_spec
                    ]
                )
                await cb.message.answer(text, reply_markup=kb)
                await cb.answer("üìÑ –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –æ—Ç—á—ë—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                return
            except Exception as fb_err:
                print(f"‚ùå Fallback report text error: {fb_err}")
                await cb.answer("–û—Ç—á—ë—Ç –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", show_alert=True)
                return
        if not os.path.exists(path):
            await cb.answer("–û—Ç—á—ë—Ç –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", show_alert=True)
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        if cb.message:
            try:
                # Use message.answer_document instead of bot.send_document
                await cb.message.answer_document(
                    document=FSInputFile(path), caption="üìÑ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç"
                )
                await cb.answer("üìÑ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
            except Exception as send_error:
                print(f"‚ùå Error sending document: {send_error}")
                await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞", show_alert=True)
        else:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ", show_alert=True)

    except Exception as e:
        print(f"‚ùå Error in send_latest_report: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞", show_alert=True)
