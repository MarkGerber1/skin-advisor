"""
üéØ FSM Coordinator - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å UX –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–æ–≤
"""

import json
import time
from typing import Dict, Optional, Any, Tuple
from dataclasses import dataclass, asdict
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State

@dataclass
class SessionData:
    """–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–∞–Ω—Å–∞"""
    user_id: int
    current_flow: str  # "palette", "skincare", "detailed_palette", "detailed_skincare", None
    current_step: str  # –¢–µ–∫—É—â–∏–π State
    flow_data: Dict[str, Any]  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    started_at: float  # timestamp
    last_activity: float  # timestamp
    step_count: int
    flow_progress: float  # 0.0 - 1.0

class FSMCoordinator:
    """–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
    
    def __init__(self):
        self._active_sessions: Dict[int, SessionData] = {}
        self._session_timeout = 1800  # 30 –º–∏–Ω—É—Ç
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤ –∏ –∏—Ö —à–∞–≥–æ–≤
        self.flow_definitions = {
            "palette": {
                "name": "–¶–≤–µ—Ç–æ—Ç–∏–ø",
                "steps": ["A1_UNDERTONE", "A2_VALUE", "A3_HAIR", "A4_BROWS", "A5_EYES", "A6_CONTRAST", "A7_CONFIRM", "A8_REPORT"],
                "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏",
                "duration_estimate": "5-7 –º–∏–Ω—É—Ç"
            },
            "skincare": {
                "name": "–£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π", 
                "steps": ["B1_TYPE", "B2_CONCERNS", "B3_CONFIRM", "B4_REPORT"],
                "description": "–ü–æ–¥–±–æ—Ä —É—Ö–æ–¥–∞ –ø–æ–¥ –≤–∞—à —Ç–∏–ø –∫–æ–∂–∏",
                "duration_estimate": "3-5 –º–∏–Ω—É—Ç"
            },
            "detailed_palette": {
                "name": "–î–µ—Ç–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ—Ç–∏–ø",
                "steps": ["Q1_HAIR_COLOR", "Q2_EYE_COLOR", "Q3_SKIN_UNDERTONE", "Q4_CONTRAST", "Q5_SUN_REACTION", "Q6_FACE_SHAPE", "Q7_MAKEUP_STYLE", "Q8_LIP_COLOR", "RESULT"],
                "description": "–£–≥–ª—É–±–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞",
                "duration_estimate": "10-12 –º–∏–Ω—É—Ç"
            },
            "detailed_skincare": {
                "name": "–î–µ—Ç–∞–ª—å–Ω—ã–π —É—Ö–æ–¥",
                "steps": ["Q1_TIGHTNESS", "Q2_SUN_REACTION", "Q3_IMPERFECTIONS", "Q4_EYE_AREA", "Q5_COUPEROSE", "Q6_CURRENT_CARE", "Q7_ALLERGIES", "Q8_DESIRED_EFFECT", "RESULT"],
                "description": "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–∂–∏",
                "duration_estimate": "10-15 –º–∏–Ω—É—Ç"
            }
        }
    
    async def can_start_flow(self, user_id: int, requested_flow: str) -> Tuple[bool, Optional[str]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫"""
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ–∞–Ω—Å–æ–≤
        await self._cleanup_expired_sessions()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ–∞–Ω—Å–∞
        if user_id in self._active_sessions:
            active_session = self._active_sessions[user_id]
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è —Ç–æ—Ç –∂–µ –ø–æ—Ç–æ–∫ - —Ä–∞–∑—Ä–µ—à–∞–µ–º (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
            if active_session.current_flow == requested_flow:
                return True, None
            
            # –ò–Ω–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ
            flow_info = self.flow_definitions.get(active_session.current_flow, {})
            active_flow_name = flow_info.get("name", active_session.current_flow)
            
            conflict_message = (
                f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ç–µ—Å—Ç: **{active_flow_name}**\n\n"
                f"üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {active_session.flow_progress:.0%} ({active_session.step_count} —à–∞–≥–æ–≤)\n"
                f"‚è±Ô∏è –ê–∫—Ç–∏–≤–µ–Ω: {self._format_time_ago(active_session.last_activity)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
                f"‚Ä¢ **–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å** —Ç–µ–∫—É—â–∏–π —Ç–µ—Å—Ç\n"
                f"‚Ä¢ **–û—Ç–º–µ–Ω–∏—Ç—å** –∏ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π\n"
                f"‚Ä¢ **–î–æ–º–æ–π** –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            )
            
            return False, conflict_message
        
        return True, None
    
    async def start_flow(self, user_id: int, flow_name: str, state: FSMContext) -> SessionData:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ FSM"""
        
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        if user_id in self._active_sessions:
            await state.clear()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞
        session = SessionData(
            user_id=user_id,
            current_flow=flow_name,
            current_step="",
            flow_data={},
            started_at=time.time(),
            last_activity=time.time(),
            step_count=0,
            flow_progress=0.0
        )
        
        self._active_sessions[user_id] = session
        return session
    
    async def update_step(self, user_id: int, step_name: str, step_data: Dict[str, Any] = None) -> Optional[SessionData]:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥ –≤ —Å–µ–∞–Ω—Å–µ"""
        
        if user_id not in self._active_sessions:
            return None
        
        session = self._active_sessions[user_id]
        session.current_step = step_name
        session.last_activity = time.time()
        session.step_count += 1
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —à–∞–≥–∞
        if step_data:
            session.flow_data.update(step_data)
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        flow_def = self.flow_definitions.get(session.current_flow, {})
        steps = flow_def.get("steps", [])
        if steps and step_name in steps:
            step_index = steps.index(step_name)
            session.flow_progress = (step_index + 1) / len(steps)
        
        return session
    
    async def complete_flow(self, user_id: int) -> Optional[SessionData]:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ—Ç–æ–∫ –∏ —É–¥–∞–ª—è–µ—Ç —Å–µ–∞–Ω—Å"""
        
        if user_id not in self._active_sessions:
            return None
        
        session = self._active_sessions[user_id]
        session.flow_progress = 1.0
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤
        completed_session = self._active_sessions.pop(user_id)
        
        return completed_session
    
    async def abandon_flow(self, user_id: int, state: FSMContext) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ç–æ–∫"""
        
        if user_id not in self._active_sessions:
            return False
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Å–µ–∞–Ω—Å–∞
        await state.clear()
        del self._active_sessions[user_id]
        
        return True
    
    async def get_session(self, user_id: int) -> Optional[SessionData]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–µ–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self._cleanup_expired_sessions()
        return self._active_sessions.get(user_id)
    
    async def get_recovery_message(self, user_id: int) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞"""
        
        session = await self.get_session(user_id)
        if not session:
            return None
        
        flow_def = self.flow_definitions.get(session.current_flow, {})
        flow_name = flow_def.get("name", session.current_flow)
        
        time_ago = self._format_time_ago(session.last_activity)
        
        recovery_message = (
            f"üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∞–Ω—Å–∞**\n\n"
            f"üìã –¢–µ—Å—Ç: **{flow_name}**\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {session.flow_progress:.0%} ({session.step_count} —à–∞–≥–æ–≤)\n"
            f"‚è±Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {time_ago}\n\n"
            f"üí° *{flow_def.get('description', '')}*\n\n"
            f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏?"
        )
        
        return recovery_message
    
    def get_step_hint(self, flow_name: str, step_name: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
        
        hints = {
            # Palette Flow hints
            "A1_UNDERTONE": "üîç –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç–æ—Ä–æ–Ω—É –∑–∞–ø—è—Å—Ç—å—è –ø—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –ø–æ–¥—Ç–æ–Ω.",
            "A2_VALUE": "üí° –°–≤–µ—Ç–ª–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è—Ä–∫–∏–º–∏ –∏–ª–∏ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∞—à–∏ —Ü–≤–µ—Ç–∞.",
            "A3_HAIR": "üé® –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—ã–±–æ—Ä –æ—Ç—Ç–µ–Ω–∫–æ–≤ –º–∞–∫–∏—è–∂–∞ –∏ –æ–¥–µ–∂–¥—ã.",
            "A4_BROWS": "‚ú® –§–æ—Ä–º–∞ –∏ —Ü–≤–µ—Ç –±—Ä–æ–≤–µ–π –ø–æ–º–æ–≥–∞—é—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–∑.",
            "A5_EYES": "üëÅÔ∏è –¶–≤–µ—Ç –≥–ª–∞–∑ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤—ã–∏–≥—Ä—ã—à–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ —Ç–µ–Ω–µ–π –∏ –ø–æ–¥–≤–æ–¥–∫–∏.",
            "A6_CONTRAST": "‚ö° –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –º–∞–∫–∏—è–∂–∞ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤.",
            
            # Skincare Flow hints  
            "B1_TYPE": "üß¥ –¢–∏–ø –∫–æ–∂–∏ - –æ—Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É—Ö–æ–¥–∞.",
            "B2_CONCERNS": "üéØ –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏ –ø–æ–º–æ–≥—É—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ü–µ–ª–µ–≤—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –Ω—É–∂–Ω—ã–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏.",
            "B3_CONFIRM": "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.",
            
            # Detailed Palette hints
            "Q1_HAIR_COLOR": "üíá –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å –±–µ–∑ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è.",
            "Q2_EYE_COLOR": "üëÄ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ä–∞–¥—É–∂–∫–∏, –Ω–µ —É—á–∏—Ç—ã–≤–∞—è –≤–∫—Ä–∞–ø–ª–µ–Ω–∏—è.",
            "Q3_SKIN_UNDERTONE": "ü©∏ –í–µ–Ω—ã –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ: —Å–∏–Ω–∏–µ = —Ö–æ–ª–æ–¥–Ω—ã–π, –∑–µ–ª–µ–Ω—ã–µ = —Ç–µ–ø–ª—ã–π –ø–æ–¥—Ç–æ–Ω.",
            "Q4_CONTRAST": "üîÑ –†–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ü–≤–µ—Ç–æ–º –≤–æ–ª–æ—Å, –≥–ª–∞–∑ –∏ –∫–æ–∂–∏.",
            "Q5_SUN_REACTION": "‚òÄÔ∏è –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–∂–∏.",
            
            # Detailed Skincare hints
            "Q1_TIGHTNESS": "üíß –û—â—É—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—á–∏—â–µ–Ω–∏—è –≥–æ–≤–æ—Ä—è—Ç –æ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–∏.",
            "Q2_SUN_REACTION": "üåû –†–µ–∞–∫—Ü–∏—è –Ω–∞ UV –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SPF.",
            "Q3_IMPERFECTIONS": "üîç –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç —Ü–µ–ª–µ–≤—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã.",
            "Q4_EYE_AREA": "üëÅÔ∏è –î–µ–ª–∏–∫–∞—Ç–Ω–∞—è –∑–æ–Ω–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É—Ö–æ–¥–∞.",
        }
        
        return hints.get(step_name)
    
    async def _cleanup_expired_sessions(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–µ–∫—à–∏–µ —Å–µ–∞–Ω—Å—ã"""
        current_time = time.time()
        expired_users = []
        
        for user_id, session in self._active_sessions.items():
            if current_time - session.last_activity > self._session_timeout:
                expired_users.append(user_id)
        
        for user_id in expired_users:
            del self._active_sessions[user_id]
            
    async def force_cleanup_expired_sessions(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π —Å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º timeout"""
        current_time = time.time()
        expired_users = []
        
        # –ë–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π timeout: 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)
        aggressive_timeout = 300
        
        for user_id, session in self._active_sessions.items():
            if current_time - session.last_activity > aggressive_timeout:
                expired_users.append(user_id)
                print(f"üßπ Force cleaning expired session for user {user_id} (inactive for {current_time - session.last_activity:.0f}s)")
        
        for user_id in expired_users:
            del self._active_sessions[user_id]
            
        if expired_users:
            print(f"üßπ Cleaned {len(expired_users)} expired sessions")
            
    async def clear_user_session(self, user_id: int):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self._active_sessions:
            del self._active_sessions[user_id]
            print(f"üßπ Manually cleared session for user {user_id}")
    
    def _format_time_ago(self, timestamp: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è '–Ω–∞–∑–∞–¥'"""
        seconds_ago = time.time() - timestamp
        
        if seconds_ago < 60:
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ"
        elif seconds_ago < 3600:
            minutes = int(seconds_ago / 60)
            return f"{minutes} –º–∏–Ω –Ω–∞–∑–∞–¥"
        else:
            hours = int(seconds_ago / 3600)
            return f"{hours} —á –Ω–∞–∑–∞–¥"
    
    def get_active_sessions_count(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤"""
        return len(self._active_sessions)
    
    def get_session_stats(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∞–Ω—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not self._active_sessions:
            return {"active_sessions": 0}
        
        flow_counts = {}
        total_progress = 0
        
        for session in self._active_sessions.values():
            flow = session.current_flow
            flow_counts[flow] = flow_counts.get(flow, 0) + 1
            total_progress += session.flow_progress
        
        avg_progress = total_progress / len(self._active_sessions)
        
        return {
            "active_sessions": len(self._active_sessions),
            "flow_distribution": flow_counts,
            "average_progress": avg_progress,
            "total_steps_completed": sum(s.step_count for s in self._active_sessions.values())
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
_coordinator = None

def get_fsm_coordinator() -> FSMCoordinator:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä FSM –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞"""
    global _coordinator
    if _coordinator is None:
        _coordinator = FSMCoordinator()
    return _coordinator


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å handlers
def require_single_flow(flow_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
    def decorator(handler_func):
        async def wrapper(event, state: FSMContext, *args, **kwargs):
            coordinator = get_fsm_coordinator()
            user_id = event.from_user.id
            
            can_start, conflict_msg = await coordinator.can_start_flow(user_id, flow_name)
            
            if not can_start:
                if isinstance(event, Message):
                    await event.answer(conflict_msg)
                elif isinstance(event, CallbackQuery):
                    await event.message.edit_text(conflict_msg)
                return
            
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ handler'–∞
            return await handler_func(event, state, *args, **kwargs)
        
        return wrapper
    return decorator


if __name__ == "__main__":
    # –¢–µ—Å—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞
    import asyncio
    
    async def test_coordinator():
        coordinator = FSMCoordinator()
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞
        class MockState:
            async def clear(self): pass
        
        session = await coordinator.start_flow(12345, "palette", MockState())
        print(f"Created session: {session.current_flow}")
        
        # –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–≥–∞
        await coordinator.update_step(12345, "A1_UNDERTONE", {"undertone": "warm"})
        session = await coordinator.get_session(12345)
        print(f"Progress: {session.flow_progress:.1%}")
        
        # –¢–µ—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏
        hint = coordinator.get_step_hint("palette", "A1_UNDERTONE")
        print(f"Hint: {hint}")
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = coordinator.get_session_stats()
        print(f"Stats: {stats}")
    
    asyncio.run(test_coordinator())






