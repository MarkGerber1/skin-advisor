"""
üí¨ Step Hints Integration - –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å FSM Coordinator –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .fsm_coordinator import get_fsm_coordinator

def add_step_hint_to_message(flow_name: str, step_name: str, base_message: str) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é —à–∞–≥–∞"""
    
    coordinator = get_fsm_coordinator()
    hint = coordinator.get_step_hint(flow_name, step_name)
    
    if hint:
        return f"{base_message}\n\nüí° {hint}"
    
    return base_message

def create_step_keyboard_with_hint(base_keyboard: InlineKeyboardMarkup, 
                                  flow_name: str, 
                                  step_name: str) -> InlineKeyboardMarkup:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ"""
    
    coordinator = get_fsm_coordinator()
    hint = coordinator.get_step_hint(flow_name, step_name)
    
    if not hint:
        return base_keyboard
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
    new_keyboard = []
    for row in base_keyboard.inline_keyboard:
        new_keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Å–∫–∞–∑–∫–∏
    hint_button = InlineKeyboardButton(
        text="üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞",
        callback_data=f"hint:{flow_name}:{step_name}"
    )
    new_keyboard.append([hint_button])
    
    return InlineKeyboardMarkup(inline_keyboard=new_keyboard)

def get_progress_indicator(flow_name: str, step_name: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —à–∞–≥–∞"""
    
    coordinator = get_fsm_coordinator()
    flow_def = coordinator.flow_definitions.get(flow_name, {})
    steps = flow_def.get("steps", [])
    
    if not steps or step_name not in steps:
        return ""
    
    current_step = steps.index(step_name) + 1
    total_steps = len(steps)
    progress_percent = int((current_step / total_steps) * 100)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    filled_blocks = int(progress_percent / 10)
    progress_bar = "‚ñà" * filled_blocks + "‚ñë" * (10 - filled_blocks)
    
    return f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_step}/{total_steps} ({progress_percent}%) {progress_bar}"

def format_step_message(flow_name: str, step_name: str, base_message: str, 
                       show_progress: bool = True, show_hint: bool = True) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∞–≥–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ø–æ–¥—Å–∫–∞–∑–∫–æ–π"""
    
    result = base_message
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if show_progress:
        progress = get_progress_indicator(flow_name, step_name)
        if progress:
            result = f"{progress}\n\n{result}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
    if show_hint:
        result = add_step_hint_to_message(flow_name, step_name, result)
    
    return result


# Callback handler –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ (–¥–æ–±–∞–≤–∏—Ç—å –≤ main router)
async def handle_hint_callback(cb, state):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫"""
    
    parts = cb.data.split(":")
    if len(parts) != 3:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏")
        return
    
    _, flow_name, step_name = parts
    
    coordinator = get_fsm_coordinator()
    hint = coordinator.get_step_hint(flow_name, step_name)
    
    if hint:
        await cb.answer(hint, show_alert=True)
    else:
        await cb.answer("üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞")


# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ UX —É–ª—É—á—à–µ–Ω–∏—è
def get_encouragement_message(step_count: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    
    if step_count == 1:
        return "üöÄ –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å —á–µ—Å—Ç–Ω–æ –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."
    elif step_count == 3:
        return "‚≠ê –í—ã —É–∂–µ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø—É—Ç–∏! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ."
    elif step_count == 5:
        return "üéØ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
    elif step_count >= 7:
        return "üèÜ –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è! –°–µ–π—á–∞—Å —Å—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    
    return ""

def get_completion_celebration() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞"""
    
    return (
        "üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!** üéâ\n\n"
        "‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã\n"
        "üé® –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
        "‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )


if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥—Å–∫–∞–∑–æ–∫
    test_msg = format_step_message(
        "detailed_palette", 
        "Q1_HAIR_COLOR", 
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å:",
        show_progress=True,
        show_hint=True
    )
    print("Test formatted message:")
    print(test_msg)
    print()
    
    encouragement = get_encouragement_message(3)
    print(f"Encouragement: {encouragement}")
    
    celebration = get_completion_celebration()
    print(f"Celebration: {celebration}")
    
    print("\nStep hints system ready! ‚úÖ")





