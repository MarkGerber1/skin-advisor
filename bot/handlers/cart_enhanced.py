#!/usr/bin/env python3
"""
üõí –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å–º–µ–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –≥—Ä—É–ø–ø–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
"""

from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from services.cart_service import get_cart_service, CartServiceError, CartErrorCode
from engine.business_metrics import get_metrics_tracker
from engine.analytics import get_analytics_tracker

router = Router()
metrics = get_metrics_tracker()


def _user_id(cb: CallbackQuery) -> int | None:
    """–ò–∑–≤–ª–µ—á—å user_id –∏–∑ callback query"""
    return cb.from_user.id if cb.from_user else None


@router.callback_query(F.data.startswith("cart:change_variant:"))
async def change_item_variant(cb: CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback: cart:change_variant:product_id:old_variant_id:new_variant_id
        parts = cb.data.split(":", 5)
        if len(parts) < 5:
            await cb.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
            
        product_id = parts[2]
        old_variant_id = parts[3] if parts[3] != "default" else None
        new_variant_id = parts[4] if parts[4] != "default" else None
        
        cart_service = get_cart_service()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç
        updated_item = await cart_service.update_item_variant(
            user_id=user_id,
            product_id=product_id,
            old_variant_id=old_variant_id,
            new_variant_id=new_variant_id
        )
        
        # Analytics: Cart item updated (variant changed)
        analytics = get_analytics_tracker()
        analytics.cart_item_updated(user_id, product_id, old_variant_id, 1, 1)
        
        metrics.track_event("cart_variant_changed", user_id, {
            "product_id": product_id,
            "old_variant": old_variant_id,
            "new_variant": new_variant_id
        })
        
        variant_name = updated_item.variant_name or "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"
        await cb.answer(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {variant_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        from bot.handlers.cart import show_cart
        await show_cart(cb.message, state)
        
    except CartServiceError as e:
        print(f"‚ùå Error changing variant: {e}")
        await cb.answer(f"‚ö†Ô∏è {e.message}")
        
    except Exception as e:
        print(f"‚ùå Unexpected error in change_item_variant: {e}")
        await cb.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("cart:set_qty:"))
async def set_item_quantity(cb: CallbackQuery, state: FSMContext) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback: cart:set_qty:product_id:variant_id:qty
        parts = cb.data.split(":", 5)
        if len(parts) < 5:
            await cb.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
            
        product_id = parts[2]
        variant_id = parts[3] if parts[3] != "default" else None
        qty = int(parts[4])
        
        cart_service = get_cart_service()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        result_item = cart_service.set_item_quantity(
            user_id=user_id,
            product_id=product_id,
            variant_id=variant_id,
            qty=qty
        )
        
        # Analytics: Cart item updated or removed
        analytics = get_analytics_tracker()
        
        if result_item:
            analytics.cart_item_updated(user_id, product_id, variant_id, qty_before=0, qty_after=qty)
            
            metrics.track_event("cart_quantity_changed", user_id, {
                "product_id": product_id,
                "variant_id": variant_id,
                "new_qty": qty
            })
            await cb.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ: {qty}")
        else:
            analytics.cart_item_removed(user_id, product_id, variant_id)
            
            metrics.track_event("cart_item_removed", user_id, {
                "product_id": product_id,
                "variant_id": variant_id,
                "reason": "qty_zero"
            })
            await cb.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        from bot.handlers.cart import show_cart
        await show_cart(cb.message, state)
        
    except (ValueError, IndexError):
        await cb.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        
    except CartServiceError as e:
        print(f"‚ùå Error setting quantity: {e}")
        await cb.answer(f"‚ö†Ô∏è {e.message}")
        
    except Exception as e:
        print(f"‚ùå Unexpected error in set_item_quantity: {e}")
        await cb.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data.startswith("cart:remove_exact:"))
async def remove_exact_item(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–Ω—ã–π —Ç–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback: cart:remove_exact:product_id:variant_id
        parts = cb.data.split(":", 4)
        if len(parts) < 4:
            await cb.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return
            
        product_id = parts[2]
        variant_id = parts[3] if parts[3] != "default" else None
        
        cart_service = get_cart_service()
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        success = cart_service.remove_item(
            user_id=user_id,
            product_id=product_id,
            variant_id=variant_id
        )
        
        if success:
            # Analytics: Cart item removed  
            analytics = get_analytics_tracker()
            analytics.cart_item_removed(user_id, product_id, variant_id)
            
            metrics.track_event("cart_item_removed", user_id, {
                "product_id": product_id,
                "variant_id": variant_id,
                "reason": "manual"
            })
            await cb.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        else:
            await cb.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
        from bot.handlers.cart import show_cart
        await show_cart(cb.message, state)
        
    except CartServiceError as e:
        print(f"‚ùå Error removing item: {e}")
        await cb.answer(f"‚ö†Ô∏è {e.message}")
        
    except Exception as e:
        print(f"‚ùå Unexpected error in remove_exact_item: {e}")
        await cb.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "cart:clear_enhanced")
async def clear_cart_enhanced(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear_confirmed"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cart:clear_cancelled")
        ]
    ])
    
    await cb.message.edit_text(
        "üóëÔ∏è **–û–ß–ò–°–¢–ö–ê –ö–û–†–ó–ò–ù–´**\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirm_kb,
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "cart:clear_confirmed")
async def clear_cart_confirmed(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    try:
        cart_service = get_cart_service()
        cart_service.clear_cart(user_id)
        
        metrics.track_event("cart_cleared", user_id, {"reason": "manual"})
        
        await cb.message.edit_text(
            "‚úÖ **–ö–û–†–ó–ò–ù–ê –û–ß–ò–©–ï–ù–ê**\n\n"
            "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."
        )
        await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
        
    except CartServiceError as e:
        print(f"‚ùå Error clearing cart: {e}")
        await cb.answer(f"‚ö†Ô∏è {e.message}")
        
    except Exception as e:
        print(f"‚ùå Unexpected error in clear_cart_confirmed: {e}")
        await cb.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "cart:clear_cancelled")
async def clear_cart_cancelled(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    await cb.answer("–û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ
    from bot.handlers.cart import show_cart
    await show_cart(cb.message, state)
