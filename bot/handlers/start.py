from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.ui.keyboards import (
    main_menu,
    BTN_PALETTE,
    BTN_SKINCARE,
    BTN_ABOUT,
    BTN_PICK,
    BTN_SETTINGS,
    BTN_REPORT,
)


router = Router()


@router.message(CommandStart())
async def on_start(m: Message, state: FSMContext) -> None:
    print(f"üèÅ /start command from user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    
    # Clear any webhook conflicts
    try:
        from aiogram import Bot
        bot = m.bot
        await bot.delete_webhook(drop_pending_updates=True)
        print("üßπ Webhook cleared for conflict resolution")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not clear webhook: {e}")
    
    main_menu_kb = main_menu()
    print(f"üìã Sending main menu with {len(main_menu_kb.keyboard)} rows")
    
    await m.answer(
        "üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**\n\n"
        "–ü—Ä–∏–≤–µ—Ç! ‚ú® –Ø –ø–æ–¥–±–µ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –º–∞–∫–∏—è–∂–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.\n\n"
        "**üëá –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ù–û–ü–ö–ò –ù–ò–ñ–ï:**",
        reply_markup=main_menu_kb,
        parse_mode="Markdown"
    )
    print("‚úÖ Main menu sent successfully")


@router.message(F.text == BTN_SKINCARE)
async def start_skincare(m: Message, state: FSMContext) -> None:
    """Start skincare test - works from ANY state"""
    print(f"üß¥ SKINCARE BUTTON PRESSED! User: {m.from_user.id if m.from_user else 'Unknown'}")
    print(f"üß¥ Message text: '{m.text}'")
    print(f"üß¥ BTN_SKINCARE constant: '{BTN_SKINCARE}'")
    print(f"üß¥ Text match: {m.text == BTN_SKINCARE}")
    await state.clear()  # Clear any existing state
    
    try:
        from .detailed_skincare import start_detailed_skincare_flow
        await start_detailed_skincare_flow(m, state)
        print("üß¥ Skincare flow started successfully!")
    except Exception as e:
        print(f"‚ùå Error starting skincare flow: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


@router.message(F.text == BTN_PALETTE)
async def start_palette(m: Message, state: FSMContext) -> None:
    """Start palette test - works from ANY state"""
    print(f"üé® PALETTE BUTTON PRESSED! User: {m.from_user.id if m.from_user else 'Unknown'}")
    print(f"üé® Message text: '{m.text}'")
    print(f"üé® BTN_PALETTE constant: '{BTN_PALETTE}'")
    print(f"üé® Text match: {m.text == BTN_PALETTE}")
    await state.clear()  # Clear any existing state
    
    try:
        from .detailed_palette import start_detailed_palette_flow
        await start_detailed_palette_flow(m, state)
        print("üé® Palette flow started successfully!")
    except Exception as e:
        print(f"‚ùå Error starting palette flow: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–ª–∏—Ç–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


@router.message(F.text == BTN_ABOUT)
async def about(m: Message, state: FSMContext) -> None:
    """Show about info - works from ANY state"""
    print(f"‚ÑπÔ∏è About button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    await m.answer(
        "ü§ñ –û –±–æ—Ç–µ:\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥! ‚ú®\n\n"
        "üîπ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–∂–∏ –∏ –ø—Ä–æ–±–ª–µ–º\n"
        "üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã (undertone)\n"
        "üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∏ –º–∞–∫–∏—è–∂—É\n"
        "üîπ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "üí° –ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç!",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_PICK)
async def my_picks(m: Message, state: FSMContext) -> None:
    """Show user picks - works from ANY state"""
    print(f"üõí Picks button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.ui.pdf import load_last_report_json
    
    uid = int(m.from_user.id) if m.from_user and m.from_user.id else 0
    if uid:
        report_data = load_last_report_json(uid)
        if report_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            from bot.handlers.cart import show_cart
            await show_cart(m, state)
            return
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    await m.answer(
        "üõí –ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–æ–∂–∏ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã!",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_SETTINGS)
async def settings(m: Message, state: FSMContext) -> None:
    """Show settings - works from ANY state"""
    print(f"‚öôÔ∏è Settings button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    
    from bot.ui.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    
    settings_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π", callback_data="settings:language")],
        [InlineKeyboardButton(text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª", callback_data="settings:notifications")],
        [InlineKeyboardButton(text="üé® –¢–µ–º–Ω–∞—è —Ç–µ–º–∞: –ê–≤—Ç–æ", callback_data="settings:theme")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="settings:clear_data")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="settings:support")],
        [InlineKeyboardButton(text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="settings:privacy")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="settings:back")]
    ])
    
    await m.answer(
        "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=settings_kb,
        parse_mode="Markdown"
    )


@router.message(F.text == BTN_REPORT)
async def report_latest(m: Message, state: FSMContext) -> None:
    """Show latest report - works from ANY state"""
    print(f"üìä Report button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    
    # Direct report sending without fake callback
    try:
        import os
        try:
            from aiogram.types import FSInputFile
        except ImportError:
            from aiogram.types import InputFile as FSInputFile
            
        uid = int(m.from_user.id) if m.from_user and m.from_user.id else 0
        if not uid:
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
            
        path = os.path.join("data", "reports", str(uid), "last.pdf")
        if not os.path.exists(path):
            await m.answer("üìÑ –û—Ç—á—ë—Ç –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ –ø–∞–ª–∏—Ç–æ–º–µ—Ä!")
            return
        
        # Direct document sending
        await m.answer_document(
            document=FSInputFile(path),
            caption="üìÑ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç"
        )
        print("‚úÖ Report sent successfully!")
        
    except Exception as e:
        print(f"‚ùå Error in report_latest: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def privacy_policy(m: Message, state: FSMContext) -> None:
    """Show privacy policy"""
    print(f"üîí Privacy policy shown to user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    
    privacy_text = """üîí **–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò**

**–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ú—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç—ã
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–µ–∫–ª–∞–º—ã

**–í–∞—à–∏ –ø—Ä–∞–≤–∞:**
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: /reset –∏–ª–∏ "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
‚Ä¢ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –û—Ç–∫–∞–∑ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞

**–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∫–æ–º–∞–Ω–¥–∞ /help
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π."""

    from bot.ui.keyboards import InlineKeyboardMarkup, InlineKeyboardButton
    privacy_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="privacy:accept")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="privacy:delete")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="privacy:back")]
    ])
    
    await m.answer(privacy_text, reply_markup=privacy_kb, parse_mode="Markdown")


# ========================================
# SETTINGS CALLBACK HANDLERS
# ========================================

@router.callback_query(F.data.startswith("settings:"))
async def handle_settings(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle settings menu interactions"""
    action = cb.data.split(":")[1]
    
    if action == "language":
        await cb.answer("üåç –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
        
    elif action == "notifications":
        await cb.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
    elif action == "theme":
        await cb.answer("üé® –¢–µ–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram")
        
    elif action == "clear_data":
        await cb.answer("üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞", show_alert=True)
        await state.clear()
        
    elif action == "support":
        if cb.message:
            await cb.message.answer(
                "üìû **–ü–û–î–î–ï–†–ñ–ö–ê**\n\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º: –∫–æ–º–∞–Ω–¥–∞ /help\n"
                "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n\n"
                "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 24/7",
                parse_mode="Markdown"
            )
        await cb.answer("üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    elif action == "privacy":
        if cb.message:
            # Convert message to fake message for privacy_policy function
            class FakeMessage:
                def __init__(self, original_message):
                    self.from_user = original_message.chat
                    self.answer = original_message.answer
                    
            fake_msg = FakeMessage(cb.message)
            await privacy_policy(fake_msg, state)
        await cb.answer("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
        
    elif action == "back":
        if cb.message:
            await cb.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu()
            )
        await cb.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("privacy:"))
async def handle_privacy(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle privacy policy interactions"""
    action = cb.data.split(":")[1]
    
    if action == "accept":
        await cb.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π")
        
    elif action == "delete":
        await cb.answer("üóëÔ∏è –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞", show_alert=True)
        await state.clear()
        
    elif action == "back":
        if cb.message:
            await cb.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=main_menu()
            )
        await cb.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")


# ========================================
# REMOVED CALLBACK HANDLERS - SIDE MENU USES TEXT BUTTONS
# ========================================
# Side menu uses ReplyKeyboardMarkup (text buttons), not InlineKeyboardMarkup (callbacks)
# Text handlers above handle: BTN_PALETTE, BTN_SKINCARE, BTN_ABOUT, etc.


# ========================================
# UNIVERSAL ANTI-HANG PROTECTION  
# ========================================

@router.callback_query(F.data.startswith("noop"))
async def handle_noop_callback(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle refresh/noop buttons to prevent hanging"""
    print(f"üîÑ Noop callback from user {cb.from_user.id if cb.from_user else 'Unknown'}")
    await cb.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")


# REMOVED: Catch-all callback handler moved to separate router
# This handler was intercepting test callbacks (hair:a, eye:b, etc.)
# Now handled by universal router with lower priority


# ========================================
# DEBUG CATCH-ALL MESSAGE HANDLER
# ========================================

@router.message()
async def debug_all_messages(m: Message, state: FSMContext) -> None:
    """Debug handler to catch ALL unhandled messages"""
    print(f"üîç UNHANDLED MESSAGE from user {m.from_user.id if m.from_user else 'Unknown'}")
    print(f"üìù Message text: '{m.text}'")
    print(f"üîç Current state: {await state.get_state()}")
    
    # Check if it's a side menu button
    if m.text in [BTN_PALETTE, BTN_SKINCARE, BTN_ABOUT, BTN_PICK, BTN_SETTINGS, BTN_REPORT]:
        print(f"üö® CRITICAL: Side menu button '{m.text}' not handled by specific handlers!")
        await m.answer(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '{m.text}' –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    # Handle common commands user is sending
    elif m.text and m.text.startswith('/'):
        command = m.text.lower()
        if command in ['/results', '/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã']:
            print(f"üìä /results command detected - redirecting to report")
            await report_latest(m, state)
        elif command in ['/export', '/—ç–∫—Å–ø–æ—Ä—Ç']:
            print(f"üì§ /export command detected - redirecting to report") 
            await report_latest(m, state)
        elif command in ['/privacy', '/–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å']:
            print(f"üîí /privacy command detected - showing privacy policy")
            await privacy_policy(m, state)
        elif command in ['/reset', '/—Å–±—Ä–æ—Å']:
            print(f"üîÑ /reset command detected - redirecting to start")
            await state.clear()
            await m.answer("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ", reply_markup=main_menu())
        elif command in ['/help', '/–ø–æ–º–æ—â—å']:
            print(f"‚ùì /help command detected - redirecting to about")
            await about(m, state)
        else:
            print(f"‚ùì Unknown command: '{m.text}'")
            await m.answer(
                f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {m.text}\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /start",
                reply_markup=main_menu()
            )
    else:
        print(f"‚ùì Unknown message: '{m.text}'")
        # Don't respond to avoid spam
