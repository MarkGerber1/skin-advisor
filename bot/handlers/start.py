from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.ui.keyboards import (
    main_menu,
    BTN_PALETTE,
    BTN_SKINCARE,
    BTN_ABOUT,
    BTN_PICK,
    BTN_SETTINGS,
    BTN_REPORT,
)
from .fsm_coordinator import get_fsm_coordinator


router = Router()


@router.message(CommandStart())
async def on_start(m: Message, state: FSMContext) -> None:
    print(f"üèÅ /start command from user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()

    # Clear any webhook conflicts
    try:

        bot = m.bot
        await bot.delete_webhook(drop_pending_updates=True)
        print("üßπ Webhook cleared for conflict resolution")
    except Exception as e:
        print(f"‚ö†Ô∏è Could not clear webhook: {e}")

    main_menu_kb = main_menu()
    print(f"üìã Sending main menu with {len(main_menu_kb.keyboard)} rows")

    from bot.utils.security import sanitize_message

    await m.answer(
        sanitize_message(
            "üè† –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ\n\n"
            "–ü—Ä–∏–≤–µ—Ç! ‚ú® –Ø –ø–æ–¥–±–µ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –º–∞–∫–∏—è–∂–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.\n\n"
            "üëá –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ù–û–ü–ö–ò –ù–ò–ñ–ï:"
        ),
        reply_markup=main_menu_kb,
    )
    print("‚úÖ Main menu sent successfully")


@router.message(F.text == BTN_SKINCARE)
async def start_skincare(m: Message, state: FSMContext) -> None:
    """Start skincare test with FSM coordination"""
    print(f"üß¥ SKINCARE BUTTON PRESSED! User: {m.from_user.id if m.from_user else 'Unknown'}")

    coordinator = get_fsm_coordinator()
    user_id = m.from_user.id if m.from_user else 0

    # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –õ–Æ–ë–£–Æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    print(f"üßπ SKINCARE: Force clearing any existing session for user {user_id}")
    await coordinator.clear_user_session(user_id)
    await coordinator.force_cleanup_expired_sessions()

    # Check for flow conflicts
    can_start, conflict_msg = await coordinator.can_start_flow(user_id, "detailed_skincare")
    if not can_start:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="recovery:continue"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="recovery:restart:detailed_skincare"
                    )
                ],
                [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="recovery:home")],
            ]
        )
        from bot.utils.security import sanitize_message

        await m.answer(sanitize_message(conflict_msg), reply_markup=kb)
        return

    # Check for session recovery - –ù–ï –î–û–õ–ñ–ù–û —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    recovery_msg = await coordinator.get_recovery_message(user_id)
    if recovery_msg:
        print("‚ö†Ô∏è UNEXPECTED: Recovery message still exists after cleanup!")
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="recovery:continue")],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="recovery:restart:detailed_skincare"
                    )
                ],
                [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="recovery:home")],
            ]
        )
        from bot.utils.security import sanitize_message

        await m.answer(sanitize_message(recovery_msg), reply_markup=kb)
        return

    await state.clear()  # Clear any existing state

    try:
        # Start new coordinated flow
        await coordinator.start_flow(user_id, "detailed_skincare", state)

        from .detailed_skincare import start_detailed_skincare_flow

        await start_detailed_skincare_flow(m, state)
        print("üß¥ Skincare flow started successfully!")
    except Exception as e:
        print(f"‚ùå Error starting skincare flow: {e}")
        await coordinator.abandon_flow(user_id, state)
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


@router.message(F.text == BTN_PALETTE)
async def start_palette(m: Message, state: FSMContext) -> None:
    """Start palette test with FSM coordination"""
    print(f"üé® PALETTE BUTTON PRESSED! User: {m.from_user.id if m.from_user else 'Unknown'}")

    coordinator = get_fsm_coordinator()
    user_id = m.from_user.id if m.from_user else 0

    # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –õ–Æ–ë–£–Æ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    print(f"üßπ PALETTE: Force clearing any existing session for user {user_id}")
    await coordinator.clear_user_session(user_id)
    await coordinator.force_cleanup_expired_sessions()

    # Check for flow conflicts
    can_start, conflict_msg = await coordinator.can_start_flow(user_id, "detailed_palette")
    if not can_start:
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–π", callback_data="recovery:continue"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="recovery:restart:detailed_palette"
                    )
                ],
                [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="recovery:home")],
            ]
        )
        from bot.utils.security import sanitize_message

        await m.answer(sanitize_message(conflict_msg), reply_markup=kb)
        return

    # Check for session recovery - –ù–ï –î–û–õ–ñ–ù–û —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
    recovery_msg = await coordinator.get_recovery_message(user_id)
    if recovery_msg:
        print("‚ö†Ô∏è UNEXPECTED: Recovery message still exists after cleanup!")
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="recovery:continue")],
                [
                    InlineKeyboardButton(
                        text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="recovery:restart:detailed_palette"
                    )
                ],
                [InlineKeyboardButton(text="üè† –î–æ–º–æ–π", callback_data="recovery:home")],
            ]
        )
        from bot.utils.security import sanitize_message

        await m.answer(sanitize_message(recovery_msg), reply_markup=kb)
        return

    await state.clear()  # Clear any existing state

    try:
        # Start new coordinated flow
        await coordinator.start_flow(user_id, "detailed_palette", state)

        from .detailed_palette import start_detailed_palette_flow

        await start_detailed_palette_flow(m, state)
        print("üé® Palette flow started successfully!")
    except Exception as e:
        print(f"‚ùå Error starting palette flow: {e}")
        await coordinator.abandon_flow(user_id, state)
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞–ª–∏—Ç–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")


@router.message(F.text == BTN_ABOUT)
async def about(m: Message, state: FSMContext) -> None:
    """Show about info - works from ANY state"""
    print(f"‚ÑπÔ∏è About button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    await m.answer(
        "ü§ñ **–û –±–æ—Ç–µ:**\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥! ‚ú®\n\n"
        "üîπ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–∂–∏ –∏ –ø—Ä–æ–±–ª–µ–º\n"
        "üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã (undertone)\n"
        "üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∏ –º–∞–∫–∏—è–∂—É\n"
        "üîπ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "üí° –ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç!\n\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
        "üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** Laboratory from Larin R.R\n"
        "üì± **Telegram:** @GerberMark\n"
        "üåê **–°–∞–π—Ç:** stasya-makeuphair.ru\n"
        "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_PICK)
async def my_picks(m: Message, state: FSMContext) -> None:
    """Show user picks - works from ANY state"""
    print(f"üõí Picks button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from bot.ui.pdf import load_last_report_json

    uid = int(m.from_user.id) if m.from_user and m.from_user.id else 0
    if uid:
        report_data = load_last_report_json(uid)
        if report_data:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—à–µ–ª —Ç–µ—Å—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
            from bot.handlers.cart_v2 import show_cart

            await show_cart(m, state)
            return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
    await m.answer(
        "üõí –ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ª–∏—Ü–∞ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã!",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_SETTINGS)
async def settings(m: Message, state: FSMContext) -> None:
    """Show settings - works from ANY state"""
    print(f"‚öôÔ∏è Settings button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()

    from bot.ui.keyboards import InlineKeyboardMarkup, InlineKeyboardButton

    settings_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="settings:clear_data")],
            [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="settings:support")],
            [
                InlineKeyboardButton(
                    text="üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="settings:privacy"
                )
            ],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="settings:about")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="settings:back")],
        ]
    )

    await m.answer(
        "‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê**\n\n" "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=settings_kb,
        parse_mode="Markdown",
    )


@router.message(F.text == BTN_REPORT)
async def report_latest(m: Message, state: FSMContext) -> None:
    """Show latest report - works from ANY state"""
    print(f"üìä Report button pressed by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()

    # Direct report sending without fake callback
    try:
        import os

        try:
            from aiogram.types import FSInputFile
        except ImportError:
            from aiogram.types import InputFile as FSInputFile

        uid = int(m.from_user.id) if m.from_user and m.from_user.id else 0
        if not uid:
            await m.answer("‚ùå –û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return

        path = os.path.join("data", "reports", str(uid), "last.pdf")
        if not os.path.exists(path):
            await m.answer("üìÑ –û—Ç—á—ë—Ç –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.\n–ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ –ø–∞–ª–∏—Ç–æ–º–µ—Ä!")
            return

        # Direct document sending
        await m.answer_document(document=FSInputFile(path), caption="üìÑ –í–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—á—ë—Ç")
        print("‚úÖ Report sent successfully!")

    except Exception as e:
        print(f"‚ùå Error in report_latest: {e}")
        await m.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def privacy_policy(m: Message, state: FSMContext) -> None:
    """Show privacy policy"""
    print(f"üîí Privacy policy shown to user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()

    privacy_text = """üîí **–ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò**

**–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –ú—ã –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç—ã
‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ

**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:**
‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
‚Ä¢ –ù–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–µ–∫–ª–∞–º—ã

**–í–∞—à–∏ –ø—Ä–∞–≤–∞:**
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: /reset –∏–ª–∏ "–û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
‚Ä¢ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
‚Ä¢ –û—Ç–∫–∞–∑ –æ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞

**–ö–æ–Ω—Ç–∞–∫—Ç—ã:**
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –∫–æ–º–∞–Ω–¥–∞ /help
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã: –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

–ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç–∞, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –¥–∞–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π."""

    from bot.ui.keyboards import InlineKeyboardMarkup, InlineKeyboardButton

    privacy_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü–æ–Ω—è—Ç–Ω–æ", callback_data="privacy:accept")],
            [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="privacy:delete")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="privacy:back")],
        ]
    )

    from bot.utils.security import sanitize_message

    await m.answer(sanitize_message(privacy_text), reply_markup=privacy_kb)


# ========================================
# SETTINGS CALLBACK HANDLERS
# ========================================


@router.callback_query(F.data.startswith("settings:"))
async def handle_settings(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle settings menu interactions"""
    action = cb.data.split(":")[1]

    if action == "clear_data":
        await cb.answer("üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞", show_alert=True)
        await state.clear()

    elif action == "support":
        if cb.message:
            await cb.message.answer(
                "üìû **–ü–û–î–î–ï–†–ñ–ö–ê**\n\n"
                "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º: –∫–æ–º–∞–Ω–¥–∞ /help\n"
                "‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–≤–∞—Ä–∞–º: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã: –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start\n\n"
                "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 24/7",
            )
        await cb.answer("üìû –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    elif action == "privacy":
        if cb.message:
            # Convert message to fake message for privacy_policy function
            class FakeMessage:
                def __init__(self, original_message):
                    self.from_user = original_message.chat
                    self.answer = original_message.answer

            fake_msg = FakeMessage(cb.message)
            await privacy_policy(fake_msg, state)
        await cb.answer("üîí –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")

    elif action == "about":
        if cb.message:
            await cb.message.answer(
                "ü§ñ **–û –±–æ—Ç–µ:**\n\n"
                "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥! ‚ú®\n\n"
                "üîπ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–∂–∏ –∏ –ø—Ä–æ–±–ª–µ–º\n"
                "üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã (undertone)\n"
                "üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∏ –º–∞–∫–∏—è–∂—É\n"
                "üîπ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
                "üí° –ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç!\n\n"
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                "üë®‚Äçüíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** Laboratory from Larin R.R\n"
                "üì± **Telegram:** @GerberMark\n"
                "üåê **–°–∞–π—Ç:** stasya-makeuphair.ru\n"
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê",
            )
        await cb.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")

    elif action == "back":
        if cb.message:
            await cb.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu()
            )
        await cb.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("privacy:"))
async def handle_privacy(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle privacy policy interactions"""
    action = cb.data.split(":")[1]

    if action == "accept":
        await cb.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π")

    elif action == "delete":
        await cb.answer(
            "üóëÔ∏è –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã! –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ –Ω–∞—á–∞–ª–∞", show_alert=True
        )
        await state.clear()

    elif action == "back":
        if cb.message:
            await cb.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_inline()
            )
        await cb.answer("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")


@router.callback_query(F.data.startswith("recovery:"))
async def handle_recovery(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle session recovery interactions"""

    coordinator = get_fsm_coordinator()
    user_id = cb.from_user.id if cb.from_user else 0

    action = cb.data.split(":")[1]

    if action == "continue":
        # Continue existing session
        session = await coordinator.get_session(user_id)
        if not session:
            await cb.answer("‚ùå –°–µ–∞–Ω—Å –∏—Å—Ç–µ–∫, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ", show_alert=True)
            if cb.message:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º inline –≤–µ—Ä—Å–∏—é –¥–ª—è edit_text
                from bot.ui.keyboards import main_menu_inline

                await cb.message.edit_text(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_inline()
                )
            return

        # Resume flow - restart from beginning since resume functions cause loops
        try:
            await cb.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å –Ω–∞—á–∞–ª–∞...")
            await coordinator.abandon_flow(user_id, state)

            if session.current_flow == "detailed_palette":
                await coordinator.start_flow(user_id, "detailed_palette", state)
                from .detailed_palette import start_detailed_palette_flow

                # Convert callback to message for compatibility
                fake_message = type(
                    "obj",
                    (object,),
                    {
                        "from_user": cb.from_user,
                        "answer": cb.message.answer if cb.message else lambda *a, **k: None,
                    },
                )()
                await start_detailed_palette_flow(fake_message, state)

            elif session.current_flow == "detailed_skincare":
                await coordinator.start_flow(user_id, "detailed_skincare", state)
                from .detailed_skincare import start_detailed_skincare_flow

                # Convert callback to message for compatibility
                fake_message = type(
                    "obj",
                    (object,),
                    {
                        "from_user": cb.from_user,
                        "answer": cb.message.answer if cb.message else lambda *a, **k: None,
                    },
                )()
                await start_detailed_skincare_flow(fake_message, state)

            else:
                await cb.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ—Ç–æ–∫–∞", show_alert=True)
                await coordinator.abandon_flow(user_id, state)
                # Go to main menu
                from bot.ui.keyboards import main_menu_inline

                if cb.message:
                    await cb.message.edit_text(
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_inline()
                    )

        except Exception as e:
            print(f"‚ùå Error in recovery restart: {e}")
            await cb.answer("‚ùå –û—à–∏–±–∫–∞. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=True)
            await coordinator.abandon_flow(user_id, state)

            # Go to main menu
            from bot.ui.keyboards import main_menu_inline

            if cb.message:
                await cb.message.edit_text(
                    "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_inline()
                )

    elif action == "restart":
        # Start new flow, abandon current
        await coordinator.abandon_flow(user_id, state)

        # Get new flow type
        parts = cb.data.split(":")
        if len(parts) >= 3:
            new_flow = parts[2]

            # Start new flow
            await coordinator.start_flow(user_id, new_flow, state)

            if new_flow == "detailed_palette":
                from .detailed_palette import start_detailed_palette_flow

                # Convert callback to message for compatibility
                fake_message = type(
                    "obj",
                    (object,),
                    {
                        "from_user": cb.from_user,
                        "answer": cb.message.answer if cb.message else lambda *a, **k: None,
                    },
                )()
                await start_detailed_palette_flow(fake_message, state)

            elif new_flow == "detailed_skincare":
                from .detailed_skincare import start_detailed_skincare_flow

                # Convert callback to message for compatibility
                fake_message = type(
                    "obj",
                    (object,),
                    {
                        "from_user": cb.from_user,
                        "answer": cb.message.answer if cb.message else lambda *a, **k: None,
                    },
                )()
                await start_detailed_skincare_flow(fake_message, state)

        await cb.answer("üîÑ –ù–æ–≤—ã–π —Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω")

    elif action == "home":
        # Go to main menu, abandon flow
        await coordinator.abandon_flow(user_id, state)

        if cb.message:
            await cb.message.edit_text(
                "üè† **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ**\n\n"
                "–ü—Ä–∏–≤–µ—Ç! ‚ú® –Ø –ø–æ–¥–±–µ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –º–∞–∫–∏—è–∂–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.\n\n"
                "**üëá –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï –ö–ù–û–ü–ö–ò –ù–ò–ñ–ï:**",
                reply_markup=main_menu(),
            )

        await cb.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


# ========================================
# REMOVED CALLBACK HANDLERS - SIDE MENU USES TEXT BUTTONS
# ========================================
# Side menu uses ReplyKeyboardMarkup (text buttons), not InlineKeyboardMarkup (callbacks)
# Text handlers above handle: BTN_PALETTE, BTN_SKINCARE, BTN_ABOUT, etc.


async def help_command(m: Message, state: FSMContext) -> None:
    """Show help information - works from ANY state"""
    print(f"‚ùì Help requested by user {m.from_user.id if m.from_user else 'Unknown'}")
    await state.clear()
    await m.answer(
        "‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n"
        "1. **üß¥ –£—Ö–æ–¥ –¥–ª—è –ª–∏—Ü–∞** ‚Äî –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ª–∏—Ü–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "2. **üé® –ü–∞–ª–∏—Ç–æ–º–µ—Ç—Ä** ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–π —Ü–≤–µ—Ç–æ—Ç–∏–ø –∏ –ø–æ–¥–±–µ—Ä–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –º–∞–∫–∏—è–∂–∞\n"
        "3. **üìÑ –û—Ç—á—ë—Ç** ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
        "4. **üõç –ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞** ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n"
        "5. **‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏** ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è\n\n"
        "**–ö–æ–º–∞–Ω–¥—ã:**\n"
        "‚Ä¢ `/start` ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ `/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢ `/privacy` ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n\n"
        "üí° **–°–æ–≤–µ—Ç:** –ù–∞—á–Ω–∏—Ç–µ —Å —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!",
        reply_markup=main_menu(),
    )


# ========================================
# UNIVERSAL ANTI-HANG PROTECTION
# ========================================


@router.callback_query(F.data.startswith("noop"))
async def handle_noop_callback(cb: CallbackQuery, state: FSMContext) -> None:
    """Handle refresh/noop buttons to prevent hanging"""
    print(f"üîÑ Noop callback from user {cb.from_user.id if cb.from_user else 'Unknown'}")
    await cb.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ")


# REMOVED: Catch-all callback handler moved to separate router
# This handler was intercepting test callbacks (hair:a, eye:b, etc.)
# Now handled by universal router with lower priority


# ========================================
# DEBUG CATCH-ALL MESSAGE HANDLER
# ========================================


@router.message()
async def debug_all_messages(m: Message, state: FSMContext) -> None:
    """Debug handler to catch ALL unhandled messages"""
    print(f"üîç UNHANDLED MESSAGE from user {m.from_user.id if m.from_user else 'Unknown'}")
    print(f"üìù Message text: '{m.text}'")
    print(f"üîç Current state: {await state.get_state()}")

    # Check if it's a side menu button
    if m.text in [BTN_PALETTE, BTN_SKINCARE, BTN_ABOUT, BTN_PICK, BTN_SETTINGS, BTN_REPORT]:
        print(f"üö® CRITICAL: Side menu button '{m.text}' not handled by specific handlers!")
        await m.answer(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ '{m.text}' –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    # Handle common commands user is sending
    elif m.text and m.text.startswith("/"):
        command = m.text.lower()
        if command in ["/results", "/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"]:
            print("üìä /results command detected - redirecting to report")
            await report_latest(m, state)
        elif command in ["/export", "/—ç–∫—Å–ø–æ—Ä—Ç"]:
            print("üì§ /export command detected - redirecting to report")
            await report_latest(m, state)
        elif command in ["/privacy", "/–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"]:
            print("üîí /privacy command detected - showing privacy policy")
            await privacy_policy(m, state)
        elif command in ["/reset", "/—Å–±—Ä–æ—Å"]:
            print("üîÑ /reset command detected - redirecting to start")
            await state.clear()
            await m.answer("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ", reply_markup=main_menu())
        elif command in ["/help", "/–ø–æ–º–æ—â—å"]:
            print("‚ùì /help command detected - showing help")
            await help_command(m, state)
        else:
            print(f"‚ùì Unknown command: '{m.text}'")
            await m.answer(
                f"‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {m.text}\n\n" "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ /start",
                reply_markup=main_menu(),
            )
    else:
        print(f"‚ùì Unknown message: '{m.text}'")
        # Don't respond to avoid spam
