from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import CommandStart, StateFilter
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from bot.ui.keyboards import (
    main_menu,
    BTN_PALETTE,
    BTN_SKINCARE,
    BTN_ABOUT,
    BTN_PICK,
    BTN_SETTINGS,
    BTN_REPORT,
)


router = Router()


@router.message(CommandStart())
async def on_start(m: Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! ‚ú® –Ø –ø–æ–¥–±–µ—Ä—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥ –∏ –∏–¥–µ–∞–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –º–∞–∫–∏—è–∂–∞ –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_SKINCARE, StateFilter(None))
async def start_skincare(m: Message, state: FSMContext) -> None:
    from .flow_skincare import start_flow

    await start_flow(m, state)


@router.message(F.text == BTN_PALETTE, StateFilter(None))
async def start_palette(m: Message, state: FSMContext) -> None:
    from .flow_palette import start_flow

    await start_flow(m, state)


@router.message(F.text == BTN_ABOUT, StateFilter(None))
async def about(m: Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer(
        "ü§ñ –û –±–æ—Ç–µ:\n\n"
        "–Ø - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥! ‚ú®\n\n"
        "üîπ –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–æ–∂–∏ –∏ –ø—Ä–æ–±–ª–µ–º\n"
        "üîπ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã (undertone)\n"
        "üîπ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∏ –º–∞–∫–∏—è–∂—É\n"
        "üîπ –ü—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã\n\n"
        "üí° –ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç!",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_PICK, StateFilter(None))
async def my_picks(m: Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer(
        "üõí –ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞\n\n"
        "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.\n"
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–æ–∂–∏ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–ª–∏—Ç—Ä—ã!",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_SETTINGS, StateFilter(None))
async def settings(m: Message, state: FSMContext) -> None:
    await state.clear()
    await m.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π üá∑üá∫\n"
        "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª—é—á–µ–Ω—ã üîî\n"
        "‚Ä¢ –¢–µ–º–Ω–∞—è —Ç–µ–º–∞: –ê–≤—Ç–æ üåô\n\n"
        "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        reply_markup=main_menu(),
    )


@router.message(F.text == BTN_REPORT, StateFilter(None))
async def report_latest(m: Message, state: FSMContext) -> None:
    await state.clear()
    from aiogram.types import CallbackQuery

    # –ò–º–∏—Ç–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ report:latest
    class _FakeCb(CallbackQuery):
        pass

    # –í—ã–∑–æ–≤–µ–º —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
    from bot.handlers.report import send_latest_report

    cb = _FakeCb(id="0", from_user=m.from_user, chat_instance="0", data="report:latest", message=m)
    try:
        await send_latest_report(cb)
    except Exception:
        await m.answer("–û—Ç—á—ë—Ç –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏–ª–∏ –ø–∞–ª–∏—Ç—Ä–æ–º–µ—Ç—Ä.")
