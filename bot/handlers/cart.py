from __future__ import annotations

from typing import List

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext

from engine.cart_store import CartStore, CartItem


router = Router()
store = CartStore()


def _user_id(msg: Message | None) -> int | None:
    if msg and msg.from_user and msg.from_user.id:
        return int(msg.from_user.id)
    return None


@router.callback_query(F.data.startswith("cart:add:"))
async def add_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    if not cb.data:
        await cb.answer()
        return
    msg = cb.message
    if not isinstance(msg, Message):
        await cb.answer()
        return
    user_id = _user_id(msg)
    if not user_id:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return
    pid = cb.data.split(":", 2)[2]
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ; –ø–æ–ª–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    store.add(user_id, CartItem(product_id=pid, qty=1))
    await cb.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É")


@router.message(F.text == "üõí –ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞")
async def show_cart(m: Message, state: FSMContext) -> None:
    user_id = _user_id(m)
    if not user_id:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
    items: List[CartItem] = store.get(user_id)
    if not items:
        await m.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        return
    lines = ["üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"]
    total = 0.0
    for it in items:
        price = it.price or 0.0
        qty = it.qty
        total += price * qty
        title = it.name or it.product_id
        lines.append(f"‚Äî {title} √ó {qty}")
    lines.append("")
    lines.append(f"–ò—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {len(items)}")
    await m.answer("\n".join(lines))


