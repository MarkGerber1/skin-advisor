from __future__ import annotations

from typing import List, Dict, Optional
from datetime import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from engine.cart_store import CartStore, CartItem
from engine.selector import SelectorV2
from engine.business_metrics import get_metrics_tracker


router = Router()
store = CartStore()
selector = SelectorV2()
metrics = get_metrics_tracker()


def _user_id(msg: Message | None) -> int | None:
    if msg and msg.from_user and msg.from_user.id:
        return int(msg.from_user.id)
    return None


async def _find_product_in_recommendations(user_id: int, product_id: str) -> Optional[Dict]:
    """–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from engine.models import UserProfile
        from engine.catalog import get_catalog_manager
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ FSM coordinator
        from bot.handlers.fsm_coordinator import get_fsm_coordinator
        coordinator = get_fsm_coordinator()
        session = await coordinator.get_session(user_id)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if session and session.flow_data:
            profile_data = session.flow_data
            print(f"üîç Found session profile data: {profile_data}")
            
            user_profile = UserProfile(
                user_id=user_id,
                skin_type=profile_data.get("skin_type", "normal"),
                concerns=profile_data.get("concerns", []),
                season=profile_data.get("season", "spring"),
                undertone=profile_data.get("undertone", "neutral"),
                contrast=profile_data.get("contrast", "medium")
            )
            print(f"‚úÖ Using real profile: skin_type={user_profile.skin_type}, season={user_profile.season}")
        else:
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            print(f"‚ö†Ô∏è No session found for user {user_id}, using fallback profile")
            user_profile = UserProfile(
                user_id=user_id,
                skin_type="normal",
                concerns=[],
                season="spring",
                undertone="neutral",
                contrast="medium"
            )
            print(f"üîÑ Using fallback profile: skin_type={user_profile.skin_type}, season={user_profile.season}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å—Ç—Ä–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        catalog_manager = get_catalog_manager()
        catalog = catalog_manager.get_catalog()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"üîß Calling selector.select_products_v2 with profile...")
        result = selector.select_products_v2(user_profile, catalog, partner_code="S1")
        print(f"üì¶ Selector result keys: {list(result.keys()) if result else 'None'}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if result and result.get("makeup"):
            for category, products in result["makeup"].items():
                print(f"  üíÑ Makeup {category}: {len(products)} products")
        if result and result.get("skincare"):
            for step, products in result["skincare"].items():
                print(f"  üß¥ Skincare {step}: {len(products)} products")
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        all_products = []
        if result.get("makeup"):
            for category_products in result["makeup"].values():
                all_products.extend(category_products)
        if result.get("skincare"):
            for category_products in result["skincare"].values():
                all_products.extend(category_products)
        
        # –ò—â–µ–º –ø–æ ID
        for product in all_products:
            if str(product.get("id", "")) == product_id:
                return product
                
    except Exception as e:
        print(f"‚ùå Error finding product {product_id}: {e}")
    
    return None


@router.callback_query(F.data.startswith("cart:add:"))
async def add_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π"""
    if not cb.data:
        await cb.answer()
        return
        
    msg = cb.message
    if not isinstance(msg, Message):
        await cb.answer()
        return
        
    user_id = _user_id(msg)
    if not user_id:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data: cart:add:product_id –∏–ª–∏ cart:add:product_id:variant_id
        parts = cb.data.split(":", 3)
        product_id = parts[2] if len(parts) > 2 else ""
        variant_id = parts[3] if len(parts) > 3 else None
        
        print(f"üõí Adding product {product_id} (variant: {variant_id}) to cart for user {user_id}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –∫–æ—Ä–∑–∏–Ω—ã
        from services.cart_service import get_cart_service, CartServiceError, CartErrorCode
        cart_service = get_cart_service()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        cart_item = await cart_service.add_item(
            user_id=user_id,
            product_id=product_id,
            variant_id=variant_id,
            qty=1
        )
        
        # –ú–µ—Ç—Ä–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        metrics.track_event("cart_add_success", user_id, {
            "product_id": product_id,
            "variant_id": variant_id,
            "category": cart_item.category,
            "price": cart_item.price
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        brand_name = f"{cart_item.brand or ''} {cart_item.name or ''}".strip()
        price_text = f"{cart_item.price} {cart_item.price_currency}"
        
        message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\nüõçÔ∏è {brand_name}"
        if cart_item.variant_name:
            message += f" ({cart_item.variant_name})"
        message += f"\nüí∞ {price_text}"
        
        if cart_item.explain:
            message += f"\nüí° {cart_item.explain}"
        
        await cb.answer(message, show_alert=True)
        
    except CartServiceError as e:
        print(f"‚ùå Cart service error: {e}")
        
        # –ú–µ—Ç—Ä–∏–∫–∞: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        metrics.track_event("cart_add_failed", user_id, {
            "reason": e.code.value,
            "product_id": parts[2] if len(parts) > 2 else "",
            "variant_id": parts[3] if len(parts) > 3 else None,
            "error_message": e.message
        })
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
        error_messages = {
            CartErrorCode.INVALID_PRODUCT_ID: "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞",
            CartErrorCode.INVALID_VARIANT_ID: "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞", 
            CartErrorCode.PRODUCT_NOT_FOUND: "‚ö†Ô∏è –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ",
            CartErrorCode.OUT_OF_STOCK: "‚ö†Ô∏è –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            CartErrorCode.VARIANT_NOT_SUPPORTED: "‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã",
            CartErrorCode.VARIANT_MISMATCH: "‚ö†Ô∏è –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            CartErrorCode.DUPLICATE_REQUEST: "‚ö†Ô∏è –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —Ç–æ–≤–∞—Ä —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è...",
        }
        
        user_message = error_messages.get(e.code, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")
        await cb.answer(user_message, show_alert=True)
        
    except Exception as e:
        print(f"‚ùå Unexpected error in add_to_cart: {e}")
        
        # –ú–µ—Ç—Ä–∏–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
        metrics.track_event("cart_add_failed", user_id, {
            "reason": "unexpected_error",
            "product_id": parts[2] if len(parts) > 2 else "",
            "error_message": str(e)
        })
        
        await cb.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", show_alert=True)


@router.message(F.text == "üõí –ú–æ—è –ø–æ–¥–±–æ—Ä–∫–∞")
async def show_cart(m: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = _user_id(m)
    if not user_id:
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    items: List[CartItem] = store.get(user_id)
    if not items:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]
        ])
        await m.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!", reply_markup=kb)
        return
    
    # –ú–µ—Ç—Ä–∏–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    metrics.track_event("cart_view", user_id, {"items_count": len(items)})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    lines = ["üõí **–í–ê–®–ê –ö–û–†–ó–ò–ù–ê**\n"]
    total = 0.0
    available_items = 0
    
    for i, item in enumerate(items, 1):
        price = item.price or 0.0
        qty = item.qty
        total += price * qty
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        brand_name = f"{item.brand or ''} {item.name or item.product_id}".strip()
        price_text = f"{price} {item.price_currency or '‚ÇΩ'}" if price > 0 else "–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
        stock_emoji = "‚úÖ" if item.in_stock else "‚ùå"
        if item.in_stock:
            available_items += 1
        
        lines.append(f"{i}. {stock_emoji} **{brand_name}**")
        lines.append(f"   üí∞ {price_text} √ó {qty} = {price * qty} {item.price_currency or '‚ÇΩ'}")
        
        if item.explain:
            lines.append(f"   üí° {item.explain}")
        
        if item.category:
            lines.append(f"   üìÇ {item.category}")
            
        lines.append("")
    
    # –ò—Ç–æ–≥–∏
    lines.append(f"üìä **–ò–¢–û–ì–û:**")
    lines.append(f"‚Ä¢ –ü–æ–∑–∏—Ü–∏–π: {len(items)}")
    lines.append(f"‚Ä¢ –í –Ω–∞–ª–∏—á–∏–∏: {available_items}")
    lines.append(f"‚Ä¢ –°—É–º–º–∞: {total:.0f} ‚ÇΩ")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
    buy_buttons = []
    for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        if item.in_stock and item.ref_link:
            brand_short = (item.brand or "")[:10]
            buy_buttons.append([
                InlineKeyboardButton(
                    text=f"üõí {brand_short}",
                    url=item.ref_link
                )
            ])
    
    if buy_buttons:
        buttons.extend(buy_buttons)
        buttons.append([InlineKeyboardButton(text="üõçÔ∏è –ö—É–ø–∏—Ç—å –≤—Å—ë", callback_data="cart:buy_all")])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    buttons.extend([
        [
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cart:refresh")
        ],
        [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="cart:details")]
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await m.answer("\n".join(lines), reply_markup=kb, parse_mode="Markdown")


@router.callback_query(F.data == "cart:clear")
async def clear_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    store.clear(user_id)
    metrics.track_event("cart_clear", user_id, {})
    await cb.message.edit_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")


@router.callback_query(F.data == "cart:refresh")
async def refresh_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    items = store.get(user_id)
    updated_count = 0
    removed_count = 0
    
    for item in items:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        current_product = await _find_product_in_recommendations(user_id, item.product_id)
        
        if not current_product:
            # –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            store.remove(user_id, item.product_id)
            removed_count += 1
        elif current_product.get("in_stock") != item.in_stock or current_product.get("price") != item.price:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_item = CartItem(
                product_id=item.product_id,
                qty=item.qty,
                brand=current_product.get("brand", item.brand),
                name=current_product.get("name", item.name),
                price=current_product.get("price", item.price),
                price_currency=current_product.get("price_currency", item.price_currency),
                ref_link=current_product.get("ref_link", item.ref_link),
                explain=current_product.get("explain", item.explain),
                category=current_product.get("category", item.category),
                in_stock=current_product.get("in_stock", True),
                added_at=item.added_at
            )
            store.remove(user_id, item.product_id)
            store.add(user_id, updated_item)
            updated_count += 1
    
    metrics.track_event("cart_refresh", user_id, {
        "updated": updated_count,
        "removed": removed_count
    })
    
    message = f"üîÑ –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    if updated_count > 0:
        message += f"\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}"
    if removed_count > 0:
        message += f"\n‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {removed_count}"
    
    await cb.answer(message, show_alert=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(cb.message, state)


@router.callback_query(F.data == "cart:buy_all")  
async def buy_all_items(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    items = store.get(user_id)
    available_items = [item for item in items if item.in_stock and item.ref_link]
    
    if not available_items:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    buttons = []
    for i, item in enumerate(available_items[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Å—ã–ª–æ–∫
        brand_name = f"{item.brand or ''} {item.name or ''}".strip()[:20]
        buttons.append([
            InlineKeyboardButton(
                text=f"{i}. {brand_name}",
                url=item.ref_link
            )
        ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    metrics.track_event("cart_buy_all_clicked", user_id, {
        "items_count": len(available_items)
    })
    
    await cb.message.answer(
        f"üõçÔ∏è **–ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–û–í**\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n" +
        f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available_items)} —Ç–æ–≤–∞—Ä–æ–≤",
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await cb.answer("–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ—Ç–æ–≤—ã!")


async def _find_product_alternatives(user_id: int, unavailable_product_id: str) -> List[Dict]:
    """–ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        from engine.models import UserProfile
        from engine.catalog import get_catalog_manager
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ—Å—Ç–æ–≤—ã–π)
        test_profile = UserProfile(
            user_id=user_id,
            skin_type="normal",
            concerns=[],
            season="spring",
            undertone="neutral",
            contrast="medium"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å—Ç—Ä–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å fallback
        catalog_manager = get_catalog_manager()
        catalog = catalog_manager.get_catalog()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–µ–ª–µ–∫—Ç–æ—Ä
        result = selector.select_products_v2(test_profile, catalog, partner_code="S1")
        
        # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        alternatives = []
        all_products = []
        
        if result.get("makeup"):
            for category_products in result["makeup"].values():
                all_products.extend(category_products)
        if result.get("skincare"):
            for category_products in result["skincare"].values():
                all_products.extend(category_products)
        
        # –ë–µ—Ä–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π)
        for product in all_products:
            if (product.get("in_stock", True) and 
                str(product.get("id", "")) != unavailable_product_id and
                len(alternatives) < 3):
                alternatives.append(product)
        
        return alternatives
        
    except Exception as e:
        print(f"‚ùå Error finding alternatives: {e}")
        return []


@router.callback_query(F.data.startswith("cart:unavailable:"))
async def handle_unavailable_product(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä - –ø–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"""
    if not cb.data:
        await cb.answer()
        return
        
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
        
    product_id = cb.data.split(":", 2)[2]
    print(f"üîç Finding alternatives for unavailable product {product_id}")
    
    # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    alternatives = await _find_product_alternatives(user_id, product_id)
    
    metrics.track_event("cart_unavailable_viewed", user_id, {
        "product_id": product_id,
        "alternatives_found": len(alternatives)
    })
    
    if not alternatives:
        await cb.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏
    lines = ["‚ö†Ô∏è **–¢–û–í–ê–† –ù–ï–î–û–°–¢–£–ü–ï–ù**\n"]
    lines.append("–í–æ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:\n")
    
    buttons = []
    
    for i, alt in enumerate(alternatives, 1):
        brand_name = f"{alt.get('brand', '')} {alt.get('name', '')}".strip()
        price_text = f"{alt.get('price', 0)} {alt.get('price_currency', '‚ÇΩ')}"
        explain = alt.get('explain', '')
        
        lines.append(f"{i}. **{brand_name}**")
        lines.append(f"   üí∞ {price_text}")
        if explain:
            lines.append(f"   üí° {explain}")
    lines.append("")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        alt_id = str(alt.get('id', ''))
        if alt_id:
            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                    callback_data=f"cart:add:{alt_id}"
                ),
                InlineKeyboardButton(
                    text=f"üõí –ö—É–ø–∏—Ç—å {i}",
                    url=alt.get('ref_link', 'https://goldapple.ru/')
                )
            ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="cart:back")
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await cb.message.answer(
        "\n".join(lines),
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await cb.answer("–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã")


@router.callback_query(F.data == "cart:back")
async def back_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ"""
    await show_cart(cb.message, state)


@router.callback_query(F.data == "get_recommendations")
async def get_recommendations(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    print(f"üéØ get_recommendations: user {user_id} wants recommendations for cart")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart(cb, state)
    
    await cb.answer("–û—Ç–∫—Ä—ã–≤–∞—é –∫–æ—Ä–∑–∏–Ω—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")


@router.callback_query(F.data == "cart:details")
async def show_cart_details(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    items = store.get(user_id)
    if not items:
        await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for i, item in enumerate(items, 1):
        lines = [f"**–¢–û–í–ê–† {i}/{len(items)}**\n"]
        
        brand_name = f"{item.brand or ''} {item.name or item.product_id}".strip()
        lines.append(f"üè∑Ô∏è **{brand_name}**")
        
        if item.category:
            lines.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
        
        price_text = f"{item.price} {item.price_currency}" if item.price else "–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
        lines.append(f"üí∞ –¶–µ–Ω–∞: {price_text}")
        lines.append(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.qty}")
        
        stock_text = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if item.in_stock else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        lines.append(f"üìä –°—Ç–∞—Ç—É—Å: {stock_text}")
        
        if item.explain:
            lines.append(f"\nüí° **–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:**\n{item.explain}")
        
        if item.added_at:
            lines.append(f"\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item.added_at[:10]}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        buttons = []
        
        if item.in_stock and item.ref_link:
            buttons.append([
                InlineKeyboardButton(
                    text="üõí –ö—É–ø–∏—Ç—å",
                    url=item.ref_link
                )
            ])
        elif not item.in_stock:
            buttons.append([
                InlineKeyboardButton(
                    text="üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ",
                    callback_data=f"cart:unavailable:{item.product_id}"
                )
            ])
        
        buttons.extend([
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"cart:remove:{item.product_id}"
                ),
                InlineKeyboardButton(
                    text="üìä +1",
                    callback_data=f"cart:inc:{item.product_id}"
                ),
                InlineKeyboardButton(
                    text="üìâ -1", 
                    callback_data=f"cart:dec:{item.product_id}"
                )
            ]
        ])
        
        if i == len(items):  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
            buttons.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="cart:back")
            ])
        else:
            buttons.append([
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä", callback_data="cart:details")
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await cb.message.answer(
            "\n".join(lines),
            reply_markup=kb,
            parse_mode="Markdown"
        )
    
    await cb.answer("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")


@router.callback_query(F.data.startswith("cart:remove:"))
async def remove_from_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    product_id = cb.data.split(":", 2)[2]
    store.remove(user_id, product_id)
    
    metrics.track_event("cart_remove", user_id, {"product_id": product_id})
    await cb.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await show_cart(cb.message, state)


@router.callback_query(F.data.startswith("cart:inc:"))
async def increase_quantity(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    product_id = cb.data.split(":", 2)[2]
    items = store.get(user_id)
    
    for item in items:
        if item.product_id == product_id:
            new_qty = min(item.qty + 1, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —à—Ç—É–∫
            store.set_qty(user_id, product_id, new_qty)
            
            metrics.track_event("cart_qty_change", user_id, {
                "product_id": product_id,
                "new_qty": new_qty,
                "action": "increase"
            })
            
            await cb.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")
            break
    
    await show_cart(cb.message, state)


@router.callback_query(F.data.startswith("cart:dec:"))
async def decrease_quantity(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    user_id = _user_id(cb.message)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    product_id = cb.data.split(":", 2)[2]
    items = store.get(user_id)
    
    for item in items:
        if item.product_id == product_id:
            new_qty = max(item.qty - 1, 1)  # –ú–∏–Ω–∏–º—É–º 1 —à—Ç—É–∫–∞
            store.set_qty(user_id, product_id, new_qty)
            
            metrics.track_event("cart_qty_change", user_id, {
                "product_id": product_id,
                "new_qty": new_qty,
                "action": "decrease"
            })
            
            await cb.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")
            break
    
    await show_cart(cb.message, state)
