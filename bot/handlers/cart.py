# -*- coding: utf-8 -*-
from __future__ import annotations

from typing import List, Dict, Optional
from datetime import datetime

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from services.cart_store import get_cart_store, CartStore, CartItem
from engine.selector import SelectorV2
from engine.business_metrics import get_metrics_tracker
from engine.analytics import get_analytics_tracker

# Cart service removed - using direct CartStore operations
print("[OK] Using CartStore directly (services/cart_service removed)")
CART_SERVICE_AVAILABLE = False


router = Router()
store = get_cart_store()
selector = SelectorV2()
metrics = get_metrics_tracker()


def _compare_keyboards(kb1: InlineKeyboardMarkup | None, kb2: InlineKeyboardMarkup | None) -> bool:
    """–°—Ä–∞–≤–Ω–∏—Ç—å –¥–≤–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if not kb1 and not kb2:
        return True
    if not kb1 or not kb2:
        return False

    if len(kb1.inline_keyboard) != len(kb2.inline_keyboard):
        return False

    for row1, row2 in zip(kb1.inline_keyboard, kb2.inline_keyboard):
        if len(row1) != len(row2):
            return False
        for btn1, btn2 in zip(row1, row2):
            if (btn1.text != btn2.text or
                btn1.callback_data != btn2.callback_data or
                btn1.url != btn2.url):
                return False

    return True

def _user_id(msg_or_cb: Message | CallbackQuery | None) -> int | None:
    """Extract real user ID, not bot ID from Message or CallbackQuery"""
    if msg_or_cb and hasattr(msg_or_cb, 'from_user') and msg_or_cb.from_user and msg_or_cb.from_user.id:
        user_id = int(msg_or_cb.from_user.id)
        print(f"üîç _user_id: {type(msg_or_cb).__name__}.from_user.id = {user_id}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ bot ID (8345324302)
        if user_id == 8345324302:
            print(f"[WARNING] Got bot ID instead of user ID!")
            # –í callback query –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–µ–∞–ª—å–Ω—ã–π user ID
            if hasattr(msg_or_cb, 'message') and msg_or_cb.message and msg_or_cb.message.from_user:
                real_user_id = int(msg_or_cb.message.from_user.id)
                if real_user_id != 8345324302:
                    print(f"[OK] Found real user ID from callback message: {real_user_id}")
                    return real_user_id
        return user_id
    print(f"[ERROR] _user_id: no message/callback or from_user")
    return None


async def _find_product_in_recommendations(user_id: int, product_id: str) -> Optional[Dict]:
    """–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from engine.models import UserProfile
        from engine.catalog_store import CatalogStore

        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.handlers.user_profile_store import get_user_profile_store
        profile_store = get_user_profile_store()
        user_profile = profile_store.load_profile(user_id)

        if user_profile:
            print(f"[OK] Using saved profile: skin_type={user_profile.skin_type}, season={user_profile.season}")
        else:
            # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ FSM coordinator
            from bot.handlers.fsm_coordinator import get_fsm_coordinator
            coordinator = get_fsm_coordinator()
            session = await coordinator.get_session(user_id)

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
            if session and session.flow_data:
                profile_data = session.flow_data
                print(f"üîç Found session profile data: {profile_data}")

                user_profile = UserProfile(
                    user_id=user_id,
                    skin_type=profile_data.get("skin_type", "normal"),
                    concerns=profile_data.get("concerns", []),
                    season=profile_data.get("season", "spring"),
                    undertone=profile_data.get("undertone", "neutral"),
                    contrast=profile_data.get("contrast", "medium")
                )
                print(f"[OK] Using session profile: skin_type={user_profile.skin_type}, season={user_profile.season}")
            else:
                # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
                print(f"[WARNING] No saved or session profile found for user {user_id}, using fallback profile")
                user_profile = UserProfile(
                    user_id=user_id,
                    skin_type="normal",
                    concerns=[],
                    season="spring",
                    undertone="neutral",
                    contrast="medium"
                )
                print(f"üîÑ Using fallback profile: skin_type={user_profile.skin_type}, season={user_profile.season}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å—Ç—Ä–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        import os
        catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print(f"üîß Calling selector.select_products_v2 with profile...")
        result = selector.select_products_v2(user_profile, catalog, partner_code="S1")
        print(f"üì¶ Selector result keys: {list(result.keys()) if result else 'None'}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if result and result.get("makeup"):
            for category, products in result["makeup"].items():
                print(f"  üíÑ Makeup {category}: {len(products)} products")
        if result and result.get("skincare"):
            for step, products in result["skincare"].items():
                print(f"  üß¥ Skincare {step}: {len(products)} products")
        
        # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
        all_products = []
        if result.get("makeup"):
            for category_products in result["makeup"].values():
                all_products.extend(category_products)
        if result.get("skincare"):
            for category_products in result["skincare"].values():
                all_products.extend(category_products)
        
        # –ò—â–µ–º –ø–æ ID
        for product in all_products:
            if str(product.get("id", "")) == product_id:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º affiliate link –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if not product.get("ref_link"):
                    try:
                        from services.affiliates import build_ref_link
                        product["ref_link"] = build_ref_link(product, "cart_add")
                        print(f"üîó Generated affiliate link for {product_id}: {product['ref_link'][:50]}...")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Failed to generate affiliate link: {e}")
                return product
                
    except Exception as e:
        print(f"[ERROR] Error finding product {product_id}: {e}")
    
    return None


@router.callback_query(F.data.startswith("cart:add:"))
async def add_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–ª–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –¥—É–±–ª–µ–π"""
    print(f"üõí Cart add callback triggered: {cb.data}")
    
    if not cb.data:
        print("[ERROR] No callback data provided")
        await cb.answer()
        return
        
    user_id = _user_id(cb)
    if not user_id:
        print("‚ùå No user ID found")
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return

    msg = cb.message
    if not isinstance(msg, Message):
        print("‚ùå Invalid message type")
        await cb.answer()
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback data: cart:add:product_id –∏–ª–∏ cart:add:product_id:variant_id
        parts = cb.data.split(":", 3)
        product_id = parts[2] if len(parts) > 2 else ""
        variant_id = parts[3] if len(parts) > 3 else None

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        if not product_id or not isinstance(product_id, str) or len(product_id.strip()) == 0:
            await cb.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞", show_alert=True)
            return
        
        print(f"üõí DETAILED: Adding product '{product_id}' (variant: {variant_id}) to cart for user {user_id}")
        print(f"üõí Using CartStore directly (cart_service removed)")

        # Direct CartStore operations (fallback logic)
        print(f"üîÑ Using fallback cart method for {product_id}")
        product_data = await _find_product_in_recommendations(user_id, product_id)
        print(f"üîç Product data found: {product_data is not None}")
        if product_data:
            print(f"üì¶ Product details: brand={product_data.get('brand')}, name={product_data.get('name')}, price={product_data.get('price')}")

        if not product_data:
            print(f"‚ùå Product {product_id} not found in recommendations")
            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö", show_alert=True)
            return

        cart_item = CartItem(
            product_id=product_id,
            quantity=1,
            brand=product_data.get('brand'),
            name=product_data.get('name'),
            price=product_data.get('price'),
            price_currency=product_data.get('price_currency', 'RUB'),
            ref_link=product_data.get('ref_link'),
            category=product_data.get('category'),
            variant_id=variant_id
        )
        print(f"üìù Created cart item: {cart_item}")

        # Add to store
        print(f"üíæ Adding to store for user {user_id}")
        store.add_item(
            user_id=user_id,
            product_id=cart_item.product_id,
            variant_id=cart_item.variant_id,
            quantity=cart_item.quantity,
            brand=cart_item.brand,
            name=cart_item.name,
            price=cart_item.price,
            ref_link=cart_item.ref_link,
            category=cart_item.category
        )
        print(f"‚úÖ Successfully added to store")
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏–ª—Å—è
        stored_items = store.get_cart(user_id)
        print(f"üîç STORE VERIFICATION: User {user_id} now has {len(stored_items)} items in cart")
        for i, item in enumerate(stored_items):
            print(f"    {i+1}. {item.brand} {item.name} (ID: {item.product_id})")
        
        # Analytics: Product added to cart
        analytics = get_analytics_tracker()
        analytics.product_added_to_cart(
            user_id=user_id,
            product_id=product_id,
            variant_id=variant_id,
            source=cart_item.ref_link,
            price=cart_item.price,
            category=cart_item.category
        )
        
        # –ú–µ—Ç—Ä–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
        metrics.track_event("cart_add_success", user_id, {
            "product_id": product_id,
            "variant_id": variant_id,
            "category": cart_item.category,
            "price": cart_item.price
        })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        brand_name = f"{cart_item.brand or ''} {cart_item.name or ''}".strip()
        price_text = f"{cart_item.price} {cart_item.price_currency}"
        
        message = f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!\n\nüõçÔ∏è {brand_name}"
        if cart_item.variant_name:
            message += f" ({cart_item.variant_name})"
        message += f"\nüí∞ {price_text}"
        
        if cart_item.explain:
            message += f"\nüí° {cart_item.explain}"
        
        await cb.answer(message, show_alert=True)
        
    except Exception as e:
        print(f"‚ùå Cart operation error: {e}")
        print(f"‚ùå Exception type: {type(e).__name__}")
        import traceback
        print(f"‚ùå Full traceback: {traceback.format_exc()}")

        # –ú–µ—Ç—Ä–∏–∫–∞: –æ—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        try:
            metrics.track_event("cart_add_failed", user_id, {
                "reason": "cart_error",
                "product_id": parts[2] if len(parts) > 2 else "",
                "variant_id": parts[3] if len(parts) > 3 else None,
                "error_message": str(e)
            })
        except:
            pass  # Ignore metrics errors

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await cb.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)


@router.callback_query(F.data == "show_cart")
async def show_cart_callback(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    print(f"üõí Show cart callback triggered for user {cb.from_user.id if cb.from_user else 'unknown'}")
    print(f"üîç CALLBACK DIAGNOSTIC: cb.from_user.id = {cb.from_user.id if cb.from_user else 'None'}")

    user_id = _user_id(cb)
    if not user_id:
        print("‚ùå No user ID found in callback")
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", show_alert=True)
        return

    print(f"üîç CART DIAGNOSTIC: show_cart called")
    print(f"  üë§ Callback user ID: {cb.from_user.id if cb.from_user else 'None'}")
    print(f"  üîë Processed user ID: {user_id}")

    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    items: List[CartItem] = store.get_cart(user_id)
    print(f"  üõí Cart items for user {user_id}: {len(items)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ store –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    all_carts = store._carts if hasattr(store, '_carts') else {}
    print(f"  üì¶ All carts in store: {list(all_carts.keys())}")
    for cart_user_id, cart_items in all_carts.items():
        print(f"    User {cart_user_id}: {len(cart_items)} items")

    if not items:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]
        ])
        await cb.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!", reply_markup=kb)
        await cb.answer()
        return

    # –ú–µ—Ç—Ä–∏–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    metrics.track_event("cart_view", user_id, {"items_count": len(items)})

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    lines = ["üõí **–í–ê–®–ê –ö–û–†–ó–ò–ù–ê**\n"]
    total = 0.0
    available_items = 0
    item_buttons = []

    for i, item in enumerate(items, 1):
        price = item.price or 0.0
        qty = item.quantity
        total += price * qty

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        brand_name = f"{item.brand or ''} {item.name or item.product_id}".strip()
        price_text = f"{price} {item.price_currency or '‚ÇΩ'}" if price > 0 else "–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"

        # –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
        stock_emoji = "‚úÖ" if item.in_stock else "‚ùå"
        if item.in_stock:
            available_items += 1

        # –°—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
        lines.append(f"{i}. {stock_emoji} **{brand_name}**\n   {price_text} √ó {qty}")
        if item.explain:
            lines.append(f"   _{item.explain}_\n")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        item_buttons.append([
            InlineKeyboardButton(text="‚ûñ", callback_data=f"cart:dec:{item.product_id}"),
            InlineKeyboardButton(text=f"{qty}", callback_data=f"cart:show:{item.product_id}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"cart:inc:{item.product_id}"),
            InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"cart:del:{item.product_id}")
        ])

    # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    lines.append(f"\nüí∞ **–ò—Ç–æ–≥–æ:** {total:.0f} ‚ÇΩ")
    lines.append(f"üì¶ –î–æ—Å—Ç—É–ø–Ω–æ: {available_items}/{len(items)} —Ç–æ–≤–∞—Ä–æ–≤")

    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    all_buttons = item_buttons + [
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear")],
        [InlineKeyboardButton(text="üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="cart:checkout")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back:main")]
    ]
    kb = InlineKeyboardMarkup(inline_keyboard=all_buttons)

    text = "\n".join(lines)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å "message is not modified"
    current_text = cb.message.text or ""
    current_markup = cb.message.reply_markup

    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ä–∞–∑–º–µ—Ç–∫—É
    text_changed = current_text != text
    markup_changed = self._compare_keyboards(current_markup, kb) if current_markup else True

    if text_changed or markup_changed:
        await cb.message.edit_text(text, reply_markup=kb, parse_mode="Markdown")
    else:
        print("‚ÑπÔ∏è Cart content unchanged, skipping edit_message_text")

    await cb.answer()

@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(m: Message, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = _user_id(m)
    print(f"üîç CART DIAGNOSTIC: show_cart called")
    print(f"  üë§ Message user ID: {m.from_user.id if m.from_user else 'None'}")
    print(f"  üîë Processed user ID: {user_id}")
    
    if not user_id:
        print("‚ùå No user ID found")
        await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return
        
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    items: List[CartItem] = store.get_cart(user_id)
    print(f"  üõí Cart items for user {user_id}: {len(items)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ store –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    all_carts = store._carts if hasattr(store, '_carts') else {}
    print(f"  üì¶ All carts in store: {list(all_carts.keys())}")
    for cart_user_id, cart_items in all_carts.items():
        print(f"    User {cart_user_id}: {len(cart_items)} items")
    if not items:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", callback_data="get_recommendations")]
        ])
        await m.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.\n\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!", reply_markup=kb)
        return
    
    # –ú–µ—Ç—Ä–∏–∫–∞: –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
    metrics.track_event("cart_view", user_id, {"items_count": len(items)})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    lines = ["üõí **–í–ê–®–ê –ö–û–†–ó–ò–ù–ê**\n"]
    total = 0.0
    available_items = 0
    
    for i, item in enumerate(items, 1):
        price = item.price or 0.0
        qty = item.qty
        total += price * qty
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        brand_name = f"{item.brand or ''} {item.name or item.product_id}".strip()
        price_text = f"{price} {item.price_currency or '‚ÇΩ'}" if price > 0 else "–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
        
        # –°—Ç–∞—Ç—É—Å –Ω–∞–ª–∏—á–∏—è
        stock_emoji = "‚úÖ" if item.in_stock else "‚ùå"
        if item.in_stock:
            available_items += 1
        
        lines.append(f"{i}. {stock_emoji} **{brand_name}**")
        lines.append(f"   üí∞ {price_text} √ó {qty} = {price * qty} {item.price_currency or '‚ÇΩ'}")
        
        if item.explain:
            lines.append(f"   üí° {item.explain}")
        
        if item.category:
            lines.append(f"   üìÇ {item.category}")
            
        lines.append("")
    
    # –ò—Ç–æ–≥–∏
    lines.append(f"üìä **–ò–¢–û–ì–û:**")
    lines.append(f"‚Ä¢ –ü–æ–∑–∏—Ü–∏–π: {len(items)}")
    lines.append(f"‚Ä¢ –í –Ω–∞–ª–∏—á–∏–∏: {available_items}")
    lines.append(f"‚Ä¢ –°—É–º–º–∞: {total:.0f} ‚ÇΩ")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
    buy_buttons = []
    for item in items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        if item.in_stock and item.ref_link:
            brand_short = (item.brand or "")[:10]
            buy_buttons.append([
                InlineKeyboardButton(
                    text=f"üõí {brand_short}",
                    url=item.ref_link
                )
            ])
    
    if buy_buttons:
        buttons.extend(buy_buttons)
        buttons.append([InlineKeyboardButton(text="üõçÔ∏è –ö—É–ø–∏—Ç—å –≤—Å—ë", callback_data="cart:buy_all")])
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    buttons.extend([
        [
            InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", callback_data="cart:clear"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="cart:refresh")
        ],
        [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="cart:details")]
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await m.answer("\n".join(lines), reply_markup=kb, parse_mode="Markdown")


@router.callback_query(F.data == "cart:clear")
async def clear_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    store.clear(user_id)
    metrics.track_event("cart_clear", user_id, {})
    await cb.message.edit_text("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")


@router.callback_query(F.data == "cart:refresh")
async def refresh_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
    items = store.get_cart(user_id)
    updated_count = 0
    removed_count = 0
    
    for item in items:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        current_product = await _find_product_in_recommendations(user_id, item.product_id)
        
        if not current_product:
            # –¢–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            store.remove_item(user_id, item.product_id, item.variant_id)
            removed_count += 1
        elif current_product.get("in_stock") != item.in_stock or current_product.get("price") != item.price:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            updated_item = CartItem(
                product_id=item.product_id,
                qty=item.qty,
                brand=current_product.get("brand", item.brand),
                name=current_product.get("name", item.name),
                price=current_product.get("price", item.price),
                price_currency=current_product.get("price_currency", item.price_currency),
                ref_link=current_product.get("ref_link", item.ref_link),
                explain=current_product.get("explain", item.explain),
                category=current_product.get("category", item.category),
                in_stock=current_product.get("in_stock", True),
                added_at=item.added_at
            )
            store.remove_item(user_id, item.product_id, item.variant_id)
            store.add_item(
                user_id=user_id,
                product_id=updated_item.product_id,
                variant_id=updated_item.variant_id,
                quantity=updated_item.quantity,
                brand=updated_item.brand,
                name=updated_item.name,
                price=updated_item.price,
                ref_link=updated_item.ref_link,
                category=updated_item.category
            )
            updated_count += 1
    
    metrics.track_event("cart_refresh", user_id, {
        "updated": updated_count,
        "removed": removed_count
    })
    
    message = f"üîÑ –ö–æ—Ä–∑–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
    if updated_count > 0:
        message += f"\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated_count}"
    if removed_count > 0:
        message += f"\n‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã—Ö: {removed_count}"
    
    await cb.answer(message, show_alert=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart_callback(cb, state)


@router.callback_query(F.data == "cart:buy_all")  
async def buy_all_items(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–∫—Ä—ã—Ç—å –≤—Å–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    items = store.get_cart(user_id)
    available_items = [item for item in items if item.in_stock and item.ref_link]
    
    if not available_items:
        await cb.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏", show_alert=True)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    buttons = []
    for i, item in enumerate(available_items[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 —Å—Å—ã–ª–æ–∫
        brand_name = f"{item.brand or ''} {item.name or ''}".strip()[:20]
        buttons.append([
            InlineKeyboardButton(
                text=f"{i}. {brand_name}",
                url=item.ref_link
            )
        ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    metrics.track_event("cart_buy_all_clicked", user_id, {
        "items_count": len(available_items)
    })
    
    await cb.message.answer(
        f"üõçÔ∏è **–ü–û–ö–£–ü–ö–ê –¢–û–í–ê–†–û–í**\n\n–ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:\n\n" +
        f"–í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(available_items)} —Ç–æ–≤–∞—Ä–æ–≤",
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await cb.answer("–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–æ—Ç–æ–≤—ã!")


async def _find_product_alternatives(user_id: int, unavailable_product_id: str) -> List[Dict]:
    """–ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        from engine.models import UserProfile
        from engine.catalog_store import CatalogStore
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–µ—Å—Ç–æ–≤—ã–π)
        test_profile = UserProfile(
            user_id=user_id,
            skin_type="normal",
            concerns=[],
            season="spring",
            undertone="neutral",
            contrast="medium"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –∏ —Å—Ç—Ä–æ–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å fallback
        import os
        catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–µ–ª–µ–∫—Ç–æ—Ä
        result = selector.select_products_v2(test_profile, catalog, partner_code="S1")
        
        # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        alternatives = []
        all_products = []
        
        if result.get("makeup"):
            for category_products in result["makeup"].values():
                all_products.extend(category_products)
        if result.get("skincare"):
            for category_products in result["skincare"].values():
                all_products.extend(category_products)
        
        # –ë–µ—Ä–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (–∏—Å–∫–ª—é—á–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π)
        for product in all_products:
            if (product.get("in_stock", True) and 
                str(product.get("id", "")) != unavailable_product_id and
                len(alternatives) < 3):
                alternatives.append(product)
        
        return alternatives
        
    except Exception as e:
        print(f"‚ùå Error finding alternatives: {e}")
        return []


@router.callback_query(F.data.startswith("cart:unavailable:"))
async def handle_unavailable_product(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Ç–æ–≤–∞—Ä - –ø–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"""
    if not cb.data:
        await cb.answer()
        return
        
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
        
    product_id = cb.data.split(":", 2)[2]
    print(f"üîç Finding alternatives for unavailable product {product_id}")
    
    # –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    alternatives = await _find_product_alternatives(user_id, product_id)
    
    metrics.track_event("cart_unavailable_viewed", user_id, {
        "product_id": product_id,
        "alternatives_found": len(alternatives)
    })
    
    if not alternatives:
        await cb.answer("üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞–º–∏
    lines = ["‚ö†Ô∏è **–¢–û–í–ê–† –ù–ï–î–û–°–¢–£–ü–ï–ù**\n"]
    lines.append("–í–æ—Ç –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:\n")
    
    buttons = []
    
    for i, alt in enumerate(alternatives, 1):
        brand_name = f"{alt.get('brand', '')} {alt.get('name', '')}".strip()
        price_text = f"{alt.get('price', 0)} {alt.get('price_currency', '‚ÇΩ')}"
        explain = alt.get('explain', '')
        
        lines.append(f"{i}. **{brand_name}**")
        lines.append(f"   üí∞ {price_text}")
        if explain:
            lines.append(f"   üí° {explain}")
    lines.append("")

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
    alt_id = str(alt.get('id', ''))
    if alt_id:
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                callback_data=f"cart:add:{alt_id}"
            ),
            InlineKeyboardButton(
                text=f"üõí –ö—É–ø–∏—Ç—å {i}",
                url=alt.get('ref_link', 'https://goldapple.ru/')
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ—Ä–∑–∏–Ω–µ
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="cart:back")
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await cb.message.answer(
        "\n".join(lines),
        reply_markup=kb,
        parse_mode="Markdown"
    )
    await cb.answer("–ù–∞–π–¥–µ–Ω—ã –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã")


@router.callback_query(F.data == "cart:back")
async def back_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ—Ä–∑–∏–Ω–µ"""
    await show_cart_callback(cb, state)


@router.callback_query(F.data.startswith("cart:update_variant:"))
async def update_item_variant(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±–Ω–æ–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return

    try:
        # –ü–∞—Ä—Å–∏–º: cart:update_variant:product_id:old_variant:new_variant
        parts = cb.data.split(":", 5)
        if len(parts) < 5:
            await cb.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return

        product_id = parts[2]
        old_variant = parts[3] if parts[3] != "null" else None
        new_variant = parts[4] if parts[4] != "null" else None

        # Use CartStore directly (cart_service removed)
        updated_item = store.update_item_variant(
            user_id=user_id,
            product_id=product_id,
            old_variant_id=old_variant,
            new_variant_id=new_variant
        )

        if updated_item:
            # Analytics
            analytics = get_analytics_tracker()
            analytics.track_event("cart_variant_updated", user_id, {
                "product_id": product_id,
                "old_variant": old_variant,
                "new_variant": new_variant
            })

            await cb.answer(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {updated_item.variant_name or '–°—Ç–∞–Ω–¥–∞—Ä—Ç'}", show_alert=True)
        else:
            await cb.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)

    except Exception as e:
        print(f"‚ùå Unexpected error in variant update: {e}")
        await cb.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞", show_alert=True)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart_callback(cb, state)


@router.callback_query(F.data == "get_recommendations")
async def get_recommendations(cb: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    print(f"üéØ get_recommendations: user {user_id} wants recommendations for cart")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–æ—Ä–∑–∏–Ω—É
    await show_cart_callback(cb, state)
    
    await cb.answer("–û—Ç–∫—Ä—ã–≤–∞—é –∫–æ—Ä–∑–∏–Ω—É —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏")


@router.callback_query(F.data == "cart:details")
async def show_cart_details(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    items = store.get_cart(user_id)
    if not items:
        await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    for i, item in enumerate(items, 1):
        lines = [f"**–¢–û–í–ê–† {i}/{len(items)}**\n"]
        
        brand_name = f"{item.brand or ''} {item.name or item.product_id}".strip()
        lines.append(f"üè∑Ô∏è **{brand_name}**")
        
        if item.category:
            lines.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item.category}")
        
        price_text = f"{item.price} {item.price_currency}" if item.price else "–¶–µ–Ω–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è"
        lines.append(f"üí∞ –¶–µ–Ω–∞: {price_text}")
        lines.append(f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.qty}")
        
        stock_text = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if item.in_stock else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        lines.append(f"üìä –°—Ç–∞—Ç—É—Å: {stock_text}")
        
        if item.explain:
            lines.append(f"\nüí° **–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç:**\n{item.explain}")
        
        if item.added_at:
            lines.append(f"\nüìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item.added_at[:10]}")
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        buttons = []
        
        if item.in_stock and item.ref_link:
            buttons.append([
                InlineKeyboardButton(
                    text="üõí –ö—É–ø–∏—Ç—å",
                    url=item.ref_link
                )
            ])
        elif not item.in_stock:
            buttons.append([
                InlineKeyboardButton(
                    text="üîç –ù–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ",
                    callback_data=f"cart:unavailable:{item.product_id}"
                )
            ])
        
        buttons.extend([
            [
                InlineKeyboardButton(
                    text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"cart:remove:{item.product_id}"
                ),
                InlineKeyboardButton(
                    text="üìä +1",
                    callback_data=f"cart:inc:{item.product_id}"
                ),
                InlineKeyboardButton(
                    text="üìâ -1", 
                    callback_data=f"cart:dec:{item.product_id}"
                )
            ]
        ])
        
        if i == len(items):  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–≤–∞—Ä
            buttons.append([
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="cart:back")
            ])
        else:
            buttons.append([
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä", callback_data="cart:details")
            ])
        
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await cb.message.answer(
            "\n".join(lines),
            reply_markup=kb,
            parse_mode="Markdown"
        )
    
    await cb.answer("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")


@router.callback_query(F.data.startswith("cart:rm:"))
async def remove_from_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return

    parts = cb.data.split(":")
    product_id = parts[2]
    variant_id = parts[3] if len(parts) > 3 else None

    success = store.remove_item(user_id, product_id, variant_id)

    if success:
        metrics.track_event("cart_item_removed", user_id, {
            "product_id": product_id,
            "variant_id": variant_id
        })
        await cb.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    else:
        await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")

    await show_cart_callback(cb, state)


@router.callback_query(F.data.startswith("cart:inc:"))
async def increase_quantity(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    product_id = cb.data.split(":", 2)[2]
    cart = store.get_cart(user_id)

    for item in cart:
        if item.product_id == product_id:
            new_qty = min(item.quantity + 1, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 —à—Ç—É–∫
            store.update_quantity(user_id, product_id, item.variant_id, new_qty)

            metrics.track_event("cart_qty_change", user_id, {
                "product_id": product_id,
                "variant_id": item.variant_id,
                "new_qty": new_qty,
                "action": "increase"
            })

            await cb.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")
            break

    await show_cart_callback(cb, state)


@router.callback_query(F.data.startswith("cart:dec:"))
async def decrease_quantity(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    product_id = cb.data.split(":", 2)[2]
    cart = store.get_cart(user_id)

    for item in cart:
        if item.product_id == product_id:
            new_qty = max(item.quantity - 1, 1)  # –ú–∏–Ω–∏–º—É–º 1 —à—Ç—É–∫–∞
            store.update_quantity(user_id, product_id, item.variant_id, new_qty)

            metrics.track_event("cart_qty_change", user_id, {
                "product_id": product_id,
                "variant_id": item.variant_id,
                "new_qty": new_qty,
                "action": "decrease"
            })

            await cb.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")
            break

    await show_cart_callback(cb, state)

@router.callback_query(F.data.startswith("cart:inc:"))
async def increase_quantity(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    product_id = cb.data.split(":", 2)[2]
    cart = store.get_cart(user_id)
    
    for item in cart:
        if item.product_id == product_id:
            new_qty = item.quantity + 1
            store.update_quantity(user_id, product_id, item.variant_id, new_qty)
            
            metrics.track_event("cart_qty_change", user_id, {
                "product_id": product_id,
                "variant_id": item.variant_id,
                "new_qty": new_qty,
                "action": "increase"
            })
            
            await cb.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")
            break
    
    await show_cart_callback(cb, state)


@router.callback_query(F.data.startswith("cart:rm:"))
async def remove_from_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    parts = cb.data.split(":")
    product_id = parts[2]
    variant_id = parts[3] if len(parts) > 3 else None
    
    success = store.remove_item(user_id, product_id, variant_id)
    
    if success:
        metrics.track_event("cart_item_removed", user_id, {
            "product_id": product_id,
            "variant_id": variant_id
        })
        
        await cb.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    else:
        await cb.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await show_cart_callback(cb, state)


@router.callback_query(F.data == "cart:checkout")
async def checkout_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"""
    user_id = _user_id(cb)
    if not user_id:
        await cb.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    cart = store.get_cart(user_id)
    if not cart:
        await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏
    text_lines = ["üõí **–û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê**\n"]
    
    total_price = 0
    buttons = []
    
    for item in cart:
        price = (item.price or 0) * item.quantity
        total_price += price
        
        text_lines.append(f"‚Ä¢ {item.brand or ''} {item.name or ''}")
        text_lines.append(f"  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}")
        text_lines.append(f"  –¶–µ–Ω–∞: {price:.0f} ‚ÇΩ")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –Ω–∞ —Å–∞–π—Ç–µ
        if item.ref_link:
            buttons.append([InlineKeyboardButton(
                text=f"ÔøΩÔøΩÔøΩ –ö—É–ø–∏—Ç—å {item.brand or item.name}",
                url=item.ref_link
            )])
        elif hasattr(item, 'link') and item.link:
            buttons.append([InlineKeyboardButton(
                text=f"ÔøΩÔøΩÔøΩ –ö—É–ø–∏—Ç—å {item.brand or item.name}",
                url=item.link
            )])
        
        text_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    text_lines.append(f"**–ò—Ç–æ–≥–æ: {total_price:.0f} ‚ÇΩ**")
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="show_cart"),
        InlineKeyboardButton(text="ÔøΩÔøΩÔøΩ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main")
    ])
    
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    await cb.message.edit_text("\\n".join(text_lines), reply_markup=kb)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    metrics.track_event("cart_checkout_opened", user_id, {
        "items_count": len(cart),
        "total_price": total_price
    })

    await cb.answer()


@router.callback_query(F.data.startswith("cart:inc:"))
async def cart_increment(cb: CallbackQuery):
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        user_id = cb.from_user.id
        product_id = cb.data.split(":")[2]

        print(f"üìà Incrementing {product_id} for user {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        store = get_cart_store()
        cart = store.get_cart(user_id)

        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for item in cart:
            if item.product_id == product_id:
                item.quantity += 1
                store._save_cart(user_id, cart)
                print(f"‚úÖ Incremented {product_id} to {item.quantity}")

                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                if ANALYTICS_AVAILABLE:
                    analytics = get_analytics_tracker()
                    analytics.track_event("cart_quantity_changed", user_id, {
                        "product_id": product_id,
                        "action": "increment",
                        "new_quantity": item.quantity
                    })
                break

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await show_cart_callback(cb)

    except Exception as e:
        print(f"‚ùå Error incrementing cart item: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")


@router.callback_query(F.data.startswith("cart:dec:"))
async def cart_decrement(cb: CallbackQuery):
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ"""
    try:
        user_id = cb.from_user.id
        product_id = cb.data.split(":")[2]

        print(f"üìâ Decrementing {product_id} for user {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        store = get_cart_store()
        cart = store.get_cart(user_id)

        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        for i, item in enumerate(cart):
            if item.product_id == product_id:
                if item.quantity > 1:
                    item.quantity -= 1
                    print(f"‚úÖ Decremented {product_id} to {item.quantity}")
                else:
                    # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 1
                    cart.pop(i)
                    print(f"üóëÔ∏è Removed {product_id} from cart")

                store._save_cart(user_id, cart)

                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                if ANALYTICS_AVAILABLE:
                    analytics = get_analytics_tracker()
                    analytics.track_event("cart_quantity_changed", user_id, {
                        "product_id": product_id,
                        "action": "decrement" if item.quantity > 0 else "remove",
                        "new_quantity": item.quantity if item.quantity > 0 else 0
                    })
                break

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await show_cart_callback(cb)

    except Exception as e:
        print(f"‚ùå Error decrementing cart item: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–º–µ–Ω—å—à–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞")


@router.callback_query(F.data.startswith("cart:del:"))
async def cart_delete(cb: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""
    try:
        user_id = cb.from_user.id
        product_id = cb.data.split(":")[2]

        print(f"üóëÔ∏è Deleting {product_id} from cart for user {user_id}")

        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        store = get_cart_store()
        cart = store.get_cart(user_id)

        # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
        for i, item in enumerate(cart):
            if item.product_id == product_id:
                removed_item = cart.pop(i)
                store._save_cart(user_id, cart)
                print(f"‚úÖ Removed {product_id} from cart")

                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
                if ANALYTICS_AVAILABLE:
                    analytics = get_analytics_tracker()
                    analytics.track_event("cart_item_removed", user_id, {
                        "product_id": product_id,
                        "brand": removed_item.brand,
                        "name": removed_item.name
                    })
                break

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await show_cart_callback(cb)

    except Exception as e:
        print(f"‚ùå Error deleting cart item: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")


@router.callback_query(F.data == "cart:clear")
async def cart_clear(cb: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        user_id = cb.from_user.id
        print(f"üßπ Clearing cart for user {user_id}")

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        store = get_cart_store()
        store.clear_cart(user_id)

        print("‚úÖ Cart cleared")

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("cart_cleared", user_id)

        await cb.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞!")

        # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É (–±—É–¥–µ—Ç –ø—É—Å—Ç–∞—è)
        await show_cart_callback(cb)

    except Exception as e:
        print(f"‚ùå Error clearing cart: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")
