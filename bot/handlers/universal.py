"""Universal handlers for state recovery and navigation"""

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from bot.ui.keyboards import main_menu, BTN_HOME

router = Router()


# Debug handler moved to end of router chain


@router.callback_query(F.data == "universal:home")
async def universal_home_callback(cb: CallbackQuery, state: FSMContext) -> None:
    """Universal home button - always works from any state"""
    try:
        print(f"üè† Universal home called by user {cb.from_user.id if cb.from_user else 'Unknown'}")

        # Clear all FSM state
        await state.clear()

        # Send main menu
        if cb.message:
            await cb.message.edit_text(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=None
            )
            # Send main menu keyboard as new message
            await cb.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

        await cb.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

    except Exception as e:
        print(f"‚ùå Error in universal home: {e}")
        try:
            await cb.answer("üè† –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start")
        except:
            pass


@router.callback_query(F.data == "universal:retry")
async def universal_retry_callback(cb: CallbackQuery, state: FSMContext) -> None:
    """Universal retry button"""
    try:
        print(f"üîÑ Universal retry called by user {cb.from_user.id if cb.from_user else 'Unknown'}")

        # Get current state
        current_state = await state.get_state()
        print(f"üîç Current state: {current_state}")

        if current_state:
            await cb.answer("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        else:
            # No state, go to main menu
            await state.clear()
            await cb.message.edit_text(
                "üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=None
            )
            await cb.message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())
            await cb.answer("üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

    except Exception as e:
        print(f"‚ùå Error in universal retry: {e}")
        try:
            await cb.answer("üîÑ –û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        except:
            pass


@router.message(F.text == BTN_HOME)
async def home_button_message(message: Message, state: FSMContext) -> None:
    """Handle home button from text messages"""
    try:
        print(
            f"üè† Home button pressed by user {message.from_user.id if message.from_user else 'Unknown'}"
        )

        # Clear all state
        await state.clear()

        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=main_menu())

    except Exception as e:
        print(f"‚ùå Error in home button: {e}")
        await message.answer(
            "üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –Ω–∞–∂–º–∏—Ç–µ /start"
        )


@router.message(F.text.in_({"üè†", "–¥–æ–º–æ–π", "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–º–µ–Ω—é", "–Ω–∞–∑–∞–¥", "–≤—ã—Ö–æ–¥"}))
async def emergency_home_keywords(message: Message, state: FSMContext) -> None:
    """Emergency home via keywords"""
    try:
        print(
            f"üö® Emergency home via keyword '{message.text}' by user {message.from_user.id if message.from_user else 'Unknown'}"
        )

        # Clear all state
        await state.clear()

        await message.answer(
            "üè† –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n" "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=main_menu(),
        )

    except Exception as e:
        print(f"‚ùå Error in emergency home: {e}")
        await message.answer("üè† –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–±—Ä–æ—Å–∞")


# State recovery middleware
async def state_recovery_middleware(message: Message, state: FSMContext) -> bool:
    """Check if user is stuck in bad state and offer recovery"""
    try:
        current_state = await state.get_state()
        state_data = await state.get_data()

        # If user has been in the same state for too long, offer recovery
        if current_state and len(state_data.get("error_count", [])) > 3:
            print(
                f"üö® User {message.from_user.id if message.from_user else 'Unknown'} seems stuck in state {current_state}"
            )

            await message.answer(
                "‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "‚Ä¢ /start –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞",
                reply_markup=main_menu(),
            )

            # Clear problematic state
            await state.clear()
            return True

    except Exception as e:
        print(f"‚ùå Error in state recovery middleware: {e}")

    return False


# ========================================
# CATCH-ALL CALLBACK HANDLER (LOW PRIORITY)
# ========================================


@router.callback_query()
async def handle_any_unhandled_callback(cb: CallbackQuery, state: FSMContext) -> None:
    """Catch-all for unhandled callbacks - LOWEST priority"""
    print(
        f"‚ùì TRULY UNHANDLED callback: '{cb.data}' from user {cb.from_user.id if cb.from_user else 'Unknown'}"
    )
    print(f"üîç Current state: {await state.get_state()}")

    # Don't handle test-related callbacks - let them be processed by test routers
    if cb.data and any(
        prefix in cb.data
        for prefix in [
            "hair:",
            "eye:",
            "skin:",
            "lips:",
            "face:",
            "contrast:",
            "style:",
            "undertone:",
        ]
    ):
        print(f"üß™ Test callback detected: {cb.data} - should be handled by test router")
        print("‚ö†Ô∏è State mismatch - resetting to allow proper handling")

        # Clear state to allow proper handling
        await state.clear()

        try:
            await cb.answer("‚ö†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å /start")
        except:
            pass
        return

    try:
        # Always answer to prevent loading state
        await cb.answer("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é –∏–ª–∏ /start")

        # Send recovery options
        if cb.message:
            await cb.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ\n"
                "‚Ä¢ –ù–∞–∂–∞—Ç—å /start –¥–ª—è —Å–±—Ä–æ—Å–∞",
                reply_markup=main_menu(),
            )

    except Exception as e:
        print(f"‚ùå Error in catch-all callback handler: {e}")
        try:
            await cb.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞–∂–º–∏—Ç–µ /start")
        except:
            pass
