"""
–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ —Ü–≤–µ—Ç–æ—Ç–∏–ø –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ (8 –≤–æ–ø—Ä–æ—Å–æ–≤)
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ "–£–õ–£–ß–®–ï–ù–ù–´–ô –¢–ï–°–¢ –ù–ê –¶–í–ï–¢–û–¢–ò–ü –í–ù–ï–®–ù–û–°.txt"
"""
from __future__ import annotations

import os
from typing import List, Dict
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from engine.catalog_store import CatalogStore
from engine.models import UserProfile, Season, Undertone, ReportData
from engine.selector import SelectorV2
from engine.answer_expander import AnswerExpanderV2
from bot.ui.keyboards import add_home_button

router = Router()

class DetailedPaletteFlow(StatesGroup):
    # 8 –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞
    Q1_HAIR_COLOR = State()      # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å
    Q2_EYE_COLOR = State()       # –û—Ç—Ç–µ–Ω–æ–∫ –≥–ª–∞–∑ 
    Q3_SKIN_UNDERTONE = State()  # –ü–æ–¥—Ç–æ–Ω –∫–æ–∂–∏ (–≤–µ–Ω—ã –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ)
    Q4_CONTRAST = State()        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É –≤–æ–ª–æ—Å–∞–º–∏, –≥–ª–∞–∑–∞–º–∏ –∏ –∫–æ–∂–µ–π
    Q5_SUN_REACTION = State()    # –†–µ–∞–∫—Ü–∏—è –∫–æ–∂–∏ –Ω–∞ —Å–æ–ª–Ω—Ü–µ
    Q6_FACE_SHAPE = State()      # –§–æ—Ä–º–∞ –ª–∏—Ü–∞ (–¥–ª—è –±—Ä–æ–Ω–∑–∞—Ç–æ—Ä–∞/—Å–∫—É–ª—å–ø—Ç–æ—Ä–∞)
    Q7_MAKEUP_STYLE = State()    # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –º–∞–∫–∏—è–∂–µ
    Q8_LIP_COLOR = State()       # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≥—É–±
    RESULT = State()             # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞


def _kb_hair_color() -> InlineKeyboardMarkup:
    """Q1: –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å (–±–µ–∑ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è)"""
    buttons = [
        [InlineKeyboardButton(text="a) –°–≤–µ—Ç–ª—ã–µ —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –æ—Ç–ª–∏–≤–æ–º (–ø—à–µ–Ω–∏—á–Ω—ã–µ, –º–µ–¥–æ–≤—ã–µ)", callback_data="hair:a")],
        [InlineKeyboardButton(text="b) –ü–µ–ø–µ–ª—å–Ω—ã–µ, —Ä—É—Å—ã–µ —Å —Ö–æ–ª–æ–¥–Ω—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º", callback_data="hair:b")],
        [InlineKeyboardButton(text="c) –¢–µ–ø–ª—ã–µ –∫–∞—à—Ç–∞–Ω–æ–≤—ã–µ, —Ä—ã–∂–∏–µ, –º–µ–¥–Ω—ã–µ", callback_data="hair:c")],
        [InlineKeyboardButton(text="d) –¢–µ–º–Ω—ã–µ —Å —Å–∏–Ω–µ–≤–∞—Ç—ã–º –æ—Ç–ª–∏–≤–æ–º –∏–ª–∏ –ø–ª–∞—Ç–∏–Ω–æ–≤—ã–π –±–ª–æ–Ω–¥", callback_data="hair:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_eye_color() -> InlineKeyboardMarkup:
    """Q2: –û—Ç—Ç–µ–Ω–æ–∫ –≥–ª–∞–∑"""
    buttons = [
        [InlineKeyboardButton(text="a) –ì–æ–ª—É–±—ã–µ (—Å–∞–ø—Ñ–∏—Ä—ã), —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–µ (–∞–∫–≤–∞–º–∞—Ä–∏–Ω—ã)", callback_data="eyes:a")],
        [InlineKeyboardButton(text="b) –°–µ—Ä–æ-–≥–æ–ª—É–±—ã–µ, —Å–≤–µ—Ç–ª–æ-–∫–∞—Ä–∏–µ", callback_data="eyes:b")],
        [InlineKeyboardButton(text="c) –ö–∞—Ä–∏–µ (—Ç–µ—Ä—Ä–∞–∫–æ—Ç–∞), –±–æ–ª–æ—Ç–Ω—ã–µ, —è–Ω—Ç–∞—Ä–Ω—ã–µ", callback_data="eyes:c")],
        [InlineKeyboardButton(text="d) –Ø—Ä–∫–æ-—Å–∏–Ω–∏–µ, –∏–∑—É–º—Ä—É–¥–Ω—ã–µ, —Ç–µ–º–Ω–æ-–∫–∞—Ä–∏–µ", callback_data="eyes:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_skin_undertone() -> InlineKeyboardMarkup:
    """Q3: –ü–æ–¥—Ç–æ–Ω –∫–æ–∂–∏ (–ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–µ–Ω—ã –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ –≤ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ)"""
    buttons = [
        [InlineKeyboardButton(text="a) –¢–µ–ø–ª—ã–π (–∑–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–µ –≤–µ–Ω—ã) ‚Äî –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–µ/–ø–µ—Ä—Å–∏–∫–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏", callback_data="undertone:a")],
        [InlineKeyboardButton(text="b) –•–æ–ª–æ–¥–Ω—ã–π (—Å–∏–Ω–∏–µ –≤–µ–Ω—ã) ‚Äî —Ä–æ–∑–æ–≤—ã–µ/–≥–æ–ª—É–±–æ–≤–∞—Ç—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏", callback_data="undertone:b")],
        [InlineKeyboardButton(text="c) –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (—Å–º–µ—à–∞–Ω–Ω—ã–µ –≤–µ–Ω—ã)", callback_data="undertone:c")],
        [InlineKeyboardButton(text="d) –°–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å", callback_data="undertone:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_contrast() -> InlineKeyboardMarkup:
    """Q4: –ö–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É —Ü–≤–µ—Ç–æ–º –≤–æ–ª–æ—Å, –≥–ª–∞–∑ –∏ –∫–æ–∂–∏"""
    buttons = [
        [InlineKeyboardButton(text="a) –ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (–≤—Å–µ –æ—Ç—Ç–µ–Ω–∫–∏ –±–ª–∏–∑–∫–∏ –ø–æ —è—Ä–∫–æ—Å—Ç–∏)", callback_data="contrast:a")],
        [InlineKeyboardButton(text="b) –°—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç", callback_data="contrast:b")],
        [InlineKeyboardButton(text="c) –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç (—è—Ä–∫–∏–µ –≥–ª–∞–∑–∞ –Ω–∞ —Å–≤–µ—Ç–ª–æ–π –∫–æ–∂–µ –∏–ª–∏ —Ç–µ–º–Ω—ã–µ –≤–æ–ª–æ—Å—ã —Å —Å–≤–µ—Ç–ª—ã–º–∏ –≥–ª–∞–∑–∞–º–∏)", callback_data="contrast:c")],
        [InlineKeyboardButton(text="d) –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç", callback_data="contrast:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_sun_reaction() -> InlineKeyboardMarkup:
    """Q5: –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à–∞ –∫–æ–∂–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ?"""
    buttons = [
        [InlineKeyboardButton(text="a) –ë—ã—Å—Ç—Ä–æ –∑–∞–≥–æ—Ä–∞–µ—Ç, —Ä–µ–¥–∫–æ –æ–±–≥–æ—Ä–∞–µ—Ç", callback_data="sun:a")],
        [InlineKeyboardButton(text="b) –ó–∞–≥–æ—Ä–∞–µ—Ç —Å —Ç—Ä—É–¥–æ–º, —á–∞—Å—Ç–æ –æ–±–≥–æ—Ä–∞–µ—Ç", callback_data="sun:b")],
        [InlineKeyboardButton(text="c) –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ–±–≥–æ—Ä–∞–µ—Ç, –Ω–µ –∑–∞–≥–æ—Ä–∞–µ—Ç", callback_data="sun:c")],
        [InlineKeyboardButton(text="d) –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –∑–∞–≥–æ—Ä–∞–µ—Ç –±–µ–∑ –ø—Ä–æ–±–ª–µ–º", callback_data="sun:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_face_shape() -> InlineKeyboardMarkup:
    """Q6: –ö–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞ —É –≤–∞—Å –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç? (–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –±—Ä–æ–Ω–∑–∞—Ç–æ—Ä–∞ –∏ —Å–∫—É–ª—å–ø—Ç–æ—Ä–∞)"""
    buttons = [
        [InlineKeyboardButton(text="a) –û–≤–∞–ª—å–Ω–æ–µ", callback_data="face:a")],
        [InlineKeyboardButton(text="b) –ö—Ä—É–≥–ª–æ–µ", callback_data="face:b")],
        [InlineKeyboardButton(text="c) –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ", callback_data="face:c")],
        [InlineKeyboardButton(text="d) –°–µ—Ä–¥—Ü–µ–≤–∏–¥–Ω–æ–µ", callback_data="face:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_makeup_style() -> InlineKeyboardMarkup:
    """Q7: –ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –º–∞–∫–∏—è–∂–µ?"""
    buttons = [
        [InlineKeyboardButton(text="a) –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, \"–Ω—É–ª–µ–≤–æ–π\"", callback_data="style:a")],
        [InlineKeyboardButton(text="b) –°–≤–µ–∂–∏–π –¥–Ω–µ–≤–Ω–æ–π", callback_data="style:b")],
        [InlineKeyboardButton(text="c) –Ø—Ä–∫–∏–π –≤–µ—á–µ—Ä–Ω–∏–π", callback_data="style:c")],
        [InlineKeyboardButton(text="d) –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ü–µ–Ω–∏—á–µ—Å–∫–∏–π", callback_data="style:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def _kb_lip_color() -> InlineKeyboardMarkup:
    """Q8: –ö–∞–∫–æ–π —Ü–≤–µ—Ç –≥—É–± —É –≤–∞—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π?"""
    buttons = [
        [InlineKeyboardButton(text="a) –¢–µ–ø–ª—ã–π —Ä–æ–∑–æ–≤—ã–π/–ø–µ—Ä—Å–∏–∫–æ–≤—ã–π", callback_data="lips:a")],
        [InlineKeyboardButton(text="b) –•–æ–ª–æ–¥–Ω—ã–π —Ä–æ–∑–æ–≤—ã–π/—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π", callback_data="lips:b")],
        [InlineKeyboardButton(text="c) –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–µ–∂–µ–≤—ã–π", callback_data="lips:c")],
        [InlineKeyboardButton(text="d) –Ø—Ä–∫–æ-–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π", callback_data="lips:d")]
    ]
    return add_home_button(InlineKeyboardMarkup(inline_keyboard=buttons))


def determine_season(answers: Dict[str, str]) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞:
    ‚Ä¢ –í–µ—Å–Ω–∞ ‚Äì –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –æ—Ç–≤–µ—Ç—ã ¬´–∞¬ª.
    ‚Ä¢ –õ–µ—Ç–æ ‚Äì –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç ¬´b¬ª.
    ‚Ä¢ –û—Å–µ–Ω—å ‚Äì –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç ¬´c¬ª.
    ‚Ä¢ –ó–∏–º–∞ ‚Äì –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç ¬´d¬ª.
    """
    scores = {"spring": 0, "summer": 0, "autumn": 0, "winter": 0}
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Ñ–∞–π–ª—É
    for answer_key, answer_value in answers.items():
        if answer_value == "a":
            scores["spring"] += 1
        elif answer_value == "b":
            scores["summer"] += 1
        elif answer_value == "c":
            scores["autumn"] += 1
        elif answer_value == "d":
            scores["winter"] += 1
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    max_score = max(scores.values())
    winners = [season for season, score in scores.items() if score == max_score]
    
    if len(winners) == 1:
        return winners[0]
    
    # –ü—Ä–∏ –Ω–∏—á—å–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Winter > Autumn > Spring > Summer
    # (–æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ —Ü–≤–µ—Ç–æ—Ç–∏–ø–æ–≤)
    if "winter" in winners:
        return "winter"
    elif "autumn" in winners:
        return "autumn"
    elif "spring" in winners:
        return "spring"
    else:
        return "summer"


async def start_detailed_palette_flow(message: Message, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–∞ —Ü–≤–µ—Ç–æ—Ç–∏–ø"""
    print(f"üé® Starting detailed palette flow for user {message.from_user.id if message.from_user else 'Unknown'}")
    await state.clear()
    await state.set_state(DetailedPaletteFlow.Q1_HAIR_COLOR)
    print(f"‚úÖ Set state to Q1_HAIR_COLOR")
    
    await message.answer(
        "üé® **–ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ê –¶–í–ï–¢–û–¢–ò–ü**\n\n"
        "–û—Ç–≤–µ—Ç—å—Ç–µ —á–µ—Å—Ç–Ω–æ –Ω–∞ 8 –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Ü–≤–µ—Ç–æ—Ç–∏–ø "
        "–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–µ.\n\n"
        "**–í–æ–ø—Ä–æ—Å 1 –∏–∑ 8**\n"
        "üåà –ö–∞–∫–æ–π —É –≤–∞—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤–æ–ª–æ—Å (–±–µ–∑ –æ–∫—Ä–∞—à–∏–≤–∞–Ω–∏—è)?",
        reply_markup=_kb_hair_color()
    )


# Handlers for each question
@router.callback_query(F.data.startswith("hair:"), DetailedPaletteFlow.Q1_HAIR_COLOR)
async def q1_hair_color(cb: CallbackQuery, state: FSMContext) -> None:
    print(f"üéØ q1_hair_color called! data={cb.data}, user={cb.from_user.id if cb.from_user else 'Unknown'}")
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        print(f"üí° Processing hair color answer: {answer}")
        await state.update_data(hair=answer)
        await state.set_state(DetailedPaletteFlow.Q2_EYE_COLOR)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 2 –∏–∑ 8**\n"
            "üëÅÔ∏è –ö–∞–∫–æ–π –æ—Ç—Ç–µ–Ω–æ–∫ —É –≤–∞—à–∏—Ö –≥–ª–∞–∑?",
            reply_markup=_kb_eye_color()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q1_hair_color: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("eyes:"), DetailedPaletteFlow.Q2_EYE_COLOR)
async def q2_eye_color(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(eyes=answer)
        await state.set_state(DetailedPaletteFlow.Q3_SKIN_UNDERTONE)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 3 –∏–∑ 8**\n"
            "üîç –ö–∞–∫–æ–π —É –≤–∞—Å –ø–æ–¥—Ç–æ–Ω –∫–æ–∂–∏?\n\n"
            "*–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –≤–µ–Ω—ã –Ω–∞ –∑–∞–ø—è—Å—Ç—å–µ –≤ –¥–Ω–µ–≤–Ω–æ–º —Å–≤–µ—Ç–µ:*",
            reply_markup=_kb_skin_undertone()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q2_eye_color: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("undertone:"), DetailedPaletteFlow.Q3_SKIN_UNDERTONE)
async def q3_skin_undertone(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(undertone=answer)
        await state.set_state(DetailedPaletteFlow.Q4_CONTRAST)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 4 –∏–∑ 8**\n"
            "‚öñÔ∏è –ö–∞–∫–æ–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–µ–∂–¥—É —Ü–≤–µ—Ç–æ–º –≤–æ–ª–æ—Å, –≥–ª–∞–∑ –∏ –∫–æ–∂–∏?",
            reply_markup=_kb_contrast()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q3_skin_undertone: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("contrast:"), DetailedPaletteFlow.Q4_CONTRAST)
async def q4_contrast(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(contrast=answer)
        await state.set_state(DetailedPaletteFlow.Q5_SUN_REACTION)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 5 –∏–∑ 8**\n"
            "‚òÄÔ∏è –ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à–∞ –∫–æ–∂–∞ –ø–æ—Å–ª–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —Å–æ–ª–Ω—Ü–µ?",
            reply_markup=_kb_sun_reaction()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q4_contrast: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("sun:"), DetailedPaletteFlow.Q5_SUN_REACTION)
async def q5_sun_reaction(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(sun=answer)
        await state.set_state(DetailedPaletteFlow.Q6_FACE_SHAPE)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 6 –∏–∑ 8**\n"
            "üë§ –ö–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞ —É –≤–∞—Å –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç?\n\n"
            "*–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–æ—á–Ω–æ –ø–æ–¥–æ–±—Ä–∞—Ç—å –±—Ä–æ–Ω–∑–∞—Ç–æ—Ä –∏ —Å–∫—É–ª—å–ø—Ç–æ—Ä:*",
            reply_markup=_kb_face_shape()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q5_sun_reaction: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("face:"), DetailedPaletteFlow.Q6_FACE_SHAPE)
async def q6_face_shape(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(face_shape=answer)
        await state.set_state(DetailedPaletteFlow.Q7_MAKEUP_STYLE)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 7 –∏–∑ 8**\n"
            "üíÑ –ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –≤ –º–∞–∫–∏—è–∂–µ?",
            reply_markup=_kb_makeup_style()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q6_face_shape: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("style:"), DetailedPaletteFlow.Q7_MAKEUP_STYLE)
async def q7_makeup_style(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(makeup_style=answer)
        await state.set_state(DetailedPaletteFlow.Q8_LIP_COLOR)
        
        await cb.message.edit_text(
            "**–í–æ–ø—Ä–æ—Å 8 –∏–∑ 8**\n"
            "üíã –ö–∞–∫–æ–π —Ü–≤–µ—Ç –≥—É–± —É –≤–∞—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π?",
            reply_markup=_kb_lip_color()
        )
        await cb.answer()
    except Exception as e:
        print(f"‚ùå Error in q7_makeup_style: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


@router.callback_query(F.data.startswith("lips:"), DetailedPaletteFlow.Q8_LIP_COLOR)
async def q8_lip_color(cb: CallbackQuery, state: FSMContext) -> None:
    try:
        print("üé® Starting q8_lip_color handler...")
        answer = cb.data.split(":")[1]  # a, b, c, d
        await state.update_data(lips=answer)
        await state.set_state(DetailedPaletteFlow.RESULT)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        data = await state.get_data()
        print(f"üîç Test data: {data}")
        season = determine_season(data)
        print(f"üå∏ Determined season: {season}")
        
        # –ü–æ–ª—É—á–∞–µ–º uid –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        uid = int(cb.from_user.id) if cb.from_user and cb.from_user.id else 0
        print(f"üë§ User ID: {uid}")
        
        # –°–æ–∑–¥–∞–µ–º UserProfile –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        print("üì¶ Importing modules...")
        from engine.models import UserProfile, Season, Undertone
        from engine.selector import SelectorV2
        from engine.catalog_store import CatalogStore
        from engine.answer_expander import AnswerExpanderV2
        from engine.models import ReportData
        from bot.ui.pdf import save_last_json, save_text_pdf
        from bot.ui.render import render_makeup_report
        import os
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç–æ—Ç–∏–ø –¥–ª—è Engine
        print("üó∫Ô∏è Mapping season...")
        season_mapping = {
            "spring": Season.SPRING,
            "summer": Season.SUMMER,
            "autumn": Season.AUTUMN,
            "winter": Season.WINTER
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ç–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
        print("üé® Processing undertone...")
        undertone_answer = data.get("undertone", "")
        if undertone_answer == "a":  # –¢–µ–ø–ª—ã–π
            undertone = Undertone.WARM
        elif undertone_answer == "b":  # –•–æ–ª–æ–¥–Ω—ã–π
            undertone = Undertone.COOL
        else:  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
            undertone = Undertone.NEUTRAL
        print(f"üíÑ Undertone: {undertone}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç –≥–ª–∞–∑ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –≤ enum
        print("üëÅÔ∏è Processing eye color...")
        from engine.models import EyeColor
        eye_answer = data.get("eyes", "")
        eye_color_mapping = {
            "a": EyeColor.BLUE,    # –ì–æ–ª—É–±—ã–µ, —Å–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–µ
            "b": EyeColor.GRAY,    # –°–µ—Ä–æ-–≥–æ–ª—É–±—ã–µ, —Å–≤–µ—Ç–ª–æ-–∫–∞—Ä–∏–µ  
            "c": EyeColor.BROWN,   # –¢–µ–º–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏
            "d": EyeColor.BLUE     # –Ø—Ä–∫–æ-—Å–∏–Ω–∏–µ, –∏–∑—É–º—Ä—É–¥–Ω—ã–µ, —Ç–µ–º–Ω–æ-–∫–∞—Ä–∏–µ
        }
        eye_color = eye_color_mapping.get(eye_answer, EyeColor.BROWN)
        print(f"üëÅÔ∏è Eye color: {eye_color}")
        
        print("üë§ Creating UserProfile...")
        profile = UserProfile(
            user_id=uid,  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
            season=season_mapping[season],
            undertone=undertone,
            age=25,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
            hair_color=data.get("hair", ""),
            eye_color=eye_color,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º enum
            face_shape=data.get("face_shape", ""),
            makeup_style=data.get("makeup_style", ""),
            lip_color=data.get("lips", "")
        )
        print("‚úÖ UserProfile created successfully!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()
        print(f"üìö Catalog loaded: {len(catalog) if catalog else 0} products total")
        if catalog:
            makeup_categories = set()
            for product in catalog:
                if hasattr(product, 'category'):
                    makeup_categories.add(product.category)
            print(f"üé® Available product categories: {sorted(makeup_categories)}")
        else:
            print("‚ùå No catalog loaded!")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ SelectorV2
        print(f"üîß Profile: season={profile.season}, undertone={profile.undertone}, age={profile.age}")
        selector = SelectorV2()
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        print(f"üìä Catalog products: {len(catalog) if catalog else 0}")
        if catalog:
            cat_stats = {}
            for prod in catalog:
                cat = getattr(prod, 'category', 'Unknown')
                cat_stats[cat] = cat_stats.get(cat, 0) + 1
            print(f"üìà Category stats: {cat_stats}")
        
        result = selector.select_products_v2(
            profile=profile,
            catalog=catalog,
            partner_code="S1",
            redirect_base="https://skin-advisor.example.com"
        )
        print(f"üõçÔ∏è Selector result keys: {list(result.keys()) if result else 'No result'}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞–∫–∏—è–∂–∞
        if result and result.get("makeup"):
            makeup = result["makeup"]
            print(f"üíÑ Makeup categories in result: {list(makeup.keys())}")
            
            # CRITICAL: Show which categories have products vs which are empty
            print("üìä MAKEUP PRODUCTS BREAKDOWN:")
            total_makeup_products = 0
            populated_categories = []
            empty_categories = []
            
            for cat, products in makeup.items():
                count = len(products) if products else 0
                total_makeup_products += count
                if count > 0:
                    populated_categories.append(f"{cat}({count})")
                    print(f"  ‚úÖ {cat}: {count} products")
                    for prod in products[:1]:  # Show 1 example
                        print(f"    üì¶ Example: {prod.get('name', 'No name')}")
                else:
                    empty_categories.append(cat)
                    print(f"  ‚ùå {cat}: EMPTY")
            
            print(f"üíÑ Total makeup products found: {total_makeup_products}")
            print(f"‚úÖ POPULATED: {populated_categories}")
            print(f"‚ùå EMPTY: {empty_categories}")
        else:
            print("‚ùå No makeup products in result")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞–∫–∏—è–∂ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –æ—Ç—á–µ—Ç–∞
        makeup_products = []
        makeup_data = result.get("makeup", {})
        for category_products in makeup_data.values():
            if isinstance(category_products, list):
                makeup_products.extend(category_products[:2])  # –ü–µ—Ä–≤—ã–µ 2 –∏–∑ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_data = ReportData(
            user_profile=profile,
            skincare_products=[],
            makeup_products=makeup_products
        )
        
        expander = AnswerExpanderV2()
        tldr_report = expander.generate_tldr_report(report_data)
        full_report = expander.generate_full_report(report_data)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º UI —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        text, kb = render_makeup_report(result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if uid:
            snapshot = {
                "type": "detailed_palette",
                "profile": profile.model_dump(),
                "result": result,
                "tl_dr": tldr_report,
                "full_text": full_report,
                "answers": data
            }
            save_last_json(uid, snapshot)
            save_text_pdf(uid, title="üé® –û—Ç—á—ë—Ç –ø–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø—É", body_text=full_report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            season=season,
            profile=profile.model_dump(),
            result=result,
            makeup_products=makeup_products,
            tldr_report=tldr_report,
            full_report=full_report
        )
        print(f"üíæ Saved to state: season={season}, result_keys={list(result.keys()) if result else 'No result'}")
        print(f"üìù Reports: tldr={len(tldr_report)} chars, full={len(full_report)} chars")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
        season_names = {
            "spring": "üå∏ –Ø—Ä–∫–∞—è –í–µ—Å–Ω–∞",
            "summer": "üåä –ú—è–≥–∫–æ–µ –õ–µ—Ç–æ", 
            "autumn": "üçÇ –ì–ª—É–±–æ–∫–∞—è –û—Å–µ–Ω—å",
            "winter": "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –ó–∏–º–∞"
        }
        
        print(f"üé≠ About to show result buttons with state: {await state.get_state()}")
        await cb.message.edit_text(
            f"üéâ **–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê**\n\n"
            f"**–í–∞—à —Ü–≤–µ—Ç–æ—Ç–∏–ø:** {season_names[season]}\n\n"
            f"üìä **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n{tldr_report}\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞", callback_data="result:description")],
                [InlineKeyboardButton(text="üíÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="result:products")],
                [InlineKeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="report:latest")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")]
            ])
        )
        print(f"‚úÖ Result buttons displayed for state: {await state.get_state()}")
        await cb.answer("üéä –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        import traceback
        print(f"‚ùå Error in q8_lip_color: {e}")
        print(f"üìç Traceback: {traceback.format_exc()}")
        try:
            await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", show_alert=True)
        except:
            pass


# Result handlers
@router.callback_query(F.data == "result:description", DetailedPaletteFlow.RESULT)
async def show_description(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞"""
    try:
        print(f"üî• result:description called by user {cb.from_user.id if cb.from_user else 'Unknown'}")
        data = await state.get_data()
        print(f"üîç State data keys: {list(data.keys())}")
        season = data.get("season", "spring")
        print(f"üå∏ Season from state: {season}")
        
        descriptions = {
            "spring": "üå∏ **–Ø–†–ö–ê–Ø –í–ï–°–ù–ê**\n\n–í—ã –æ–±–ª–∞–¥–∞—Ç–µ–ª—å —Ç–µ–ø–ª–æ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º –∫–æ–∂–∏. –í–∞—à–∏ –≤–æ–ª–æ—Å—ã –∏–º–µ—é—Ç –º–µ–¥–æ–≤—ã–µ –∏–ª–∏ –ø—à–µ–Ω–∏—á–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏, –∞ –≥–ª–∞–∑–∞ —è—Ä–∫–∏–µ –∏ —á–∏—Å—Ç—ã–µ.\n\n**–í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n‚Ä¢ –ö–æ–∂–∞ —Å –ø–µ—Ä—Å–∏–∫–æ–≤—ã–º –∏–ª–∏ –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º\n‚Ä¢ –í–æ–ª–æ—Å—ã —Ç–µ–ø–ª—ã—Ö —Å–≤–µ—Ç–ª—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤\n‚Ä¢ –Ø—Ä–∫–∏–µ, —á–∏—Å—Ç—ã–µ –≥–ª–∞–∑–∞\n‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –≤–Ω–µ—à–Ω–æ—Å—Ç–∏\n\n**–£–∫—Ä–∞—à–µ–Ω–∏—è:** –ó–æ–ª–æ—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –≤–∞—à—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É",
            
            "summer": "üåä **–ú–Ø–ì–ö–û–ï –õ–ï–¢–û**\n\n–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ —Å —Ä–æ–∑–æ–≤—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º –∫–æ–∂–∏. –í–∞—à–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –º—è–≥–∫–∏–º–∏, –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–º–∏ —Ç–æ–Ω–∞–º–∏.\n\n**–í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n‚Ä¢ –ö–æ–∂–∞ —Å —Ä–æ–∑–æ–≤—ã–º –∏–ª–∏ –≥–æ–ª—É–±–æ–≤–∞—Ç—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º\n‚Ä¢ –í–æ–ª–æ—Å—ã –ø–µ–ø–µ–ª—å–Ω—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤\n‚Ä¢ –ú—è–≥–∫–∏–µ, –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≥–ª–∞–∑\n‚Ä¢ –ù–∏–∑–∫–∏–π –∏–ª–∏ —Å—Ä–µ–¥–Ω–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç\n\n**–£–∫—Ä–∞—à–µ–Ω–∏—è:** –°–µ—Ä–µ–±—Ä–æ –∏ –ø–ª–∞—Ç–∏–Ω–∞ –∏–¥–µ–∞–ª—å–Ω–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—Ç",
            
            "autumn": "üçÇ **–ì–õ–£–ë–û–ö–ê–Ø –û–°–ï–ù–¨**\n\n–í—ã –æ–±–ª–∞–¥–∞—Ç–µ–ª—å —Ç–µ–ø–ª–æ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ —Å –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏, –≥–ª—É–±–æ–∫–∏–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏. –í–∞—à–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –±–æ–≥–∞—Ç—Å—Ç–≤–æ–º –∏ —Ç–µ–ø–ª–æ—Ç–æ–π.\n\n**–í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n‚Ä¢ –ö–æ–∂–∞ —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –∏–ª–∏ –æ–ª–∏–≤–∫–æ–≤—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º\n‚Ä¢ –í–æ–ª–æ—Å—ã –≥–ª—É–±–æ–∫–∏—Ö —Ç–µ–ø–ª—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤\n‚Ä¢ –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ –∫–∞—Ä–∏–µ –∏–ª–∏ –∑–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞\n‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –∏–ª–∏ –≤—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç\n\n**–£–∫—Ä–∞—à–µ–Ω–∏—è:** –ó–æ–ª–æ—Ç–æ, –º–µ–¥—å –∏ –±—Ä–æ–Ω–∑–∞ - –≤–∞—à–∏ –º–µ—Ç–∞–ª–ª—ã",
            
            "winter": "‚ùÑÔ∏è **–•–û–õ–û–î–ù–ê–Ø –ó–ò–ú–ê**\n\n–í—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å —Ö–æ–ª–æ–¥–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ —Å –≤—ã—Å–æ–∫–∏–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º. –í–∞—à–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–æ—Ä–∞–∂–∞–µ—Ç —è—Ä–∫–æ—Å—Ç—å—é –∏ —á–µ—Ç–∫–æ—Å—Ç—å—é –ª–∏–Ω–∏–π.\n\n**–í–∞—à–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**\n‚Ä¢ –ö–æ–∂–∞ —Å —Ä–æ–∑–æ–≤—ã–º –∏–ª–∏ –æ–ª–∏–≤–∫–æ–≤—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º\n‚Ä¢ –¢–µ–º–Ω—ã–µ –∏–ª–∏ –æ—á–µ–Ω—å —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã\n‚Ä¢ –Ø—Ä–∫–∏–µ, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ –≥–ª–∞–∑–∞\n‚Ä¢ –í—ã—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –≤–Ω–µ—à–Ω–æ—Å—Ç–∏\n\n**–£–∫—Ä–∞—à–µ–Ω–∏—è:** –°–µ—Ä–µ–±—Ä–æ, –ø–ª–∞—Ç–∏–Ω–∞ –∏ –±–µ–ª–æ–µ –∑–æ–ª–æ—Ç–æ"
        }
        
        await cb.message.edit_text(
            descriptions[season],
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back:results")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")]
            ])
        )
        await cb.answer()
        
    except Exception as e:
        print(f"‚ùå Error in show_description: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–ø–∏—Å–∞–Ω–∏—è")


@router.callback_query(F.data == "result:products", DetailedPaletteFlow.RESULT)
async def show_products(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏"""
    try:
        print(f"üõçÔ∏è result:products called by user {cb.from_user.id if cb.from_user else 'Unknown'}")
        data = await state.get_data()
        print(f"üîç State data keys: {list(data.keys())}")
        result = data.get("result", {})
        print(f"üéØ Product result keys: {list(result.keys()) if result else 'No result'}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        from bot.ui.render import render_makeup_report
        
        if result and result.get("makeup"):
            print("üé® Found makeup in result, calling render_makeup_report")
            text, kb = render_makeup_report(result)
            print(f"üìù Rendered text length: {len(text)}, buttons: {len(kb.inline_keyboard) if kb else 0}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            buttons = kb.inline_keyboard if kb else []
            buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back:results")])
            kb = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await cb.message.edit_text(
                f"üíÑ **–†–ï–ö–û–ú–ï–ù–î–û–í–ê–ù–ù–´–ï –ü–†–û–î–£–ö–¢–´**\n\n{text}",
                reply_markup=kb
            )
            print("‚úÖ Products displayed successfully")
        else:
            # Fallback –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            print("‚ö†Ô∏è No makeup found in result, showing fallback")
            season = data.get("season", "spring")
            season_names = {
                "spring": "üå∏ –Ø—Ä–∫–æ–π –í–µ—Å–Ω—ã",
                "summer": "üåä –ú—è–≥–∫–æ–≥–æ –õ–µ—Ç–∞", 
                "autumn": "üçÇ –ì–ª—É–±–æ–∫–æ–π –û—Å–µ–Ω–∏",
                "winter": "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–æ–π –ó–∏–º—ã"
            }
            
            await cb.message.edit_text(
                f"üíÑ **–ü–†–û–î–£–ö–¢–´ –î–õ–Ø {season_names[season].upper()}**\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ.\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back:results")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")]
                ])
            )
        
        await cb.answer()
        
    except Exception as e:
        print(f"‚ùå Error in show_products: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")


@router.callback_query(F.data == "back:results", DetailedPaletteFlow.RESULT)
async def back_to_results(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞"""
    try:
        print(f"üîô back:results called by user {cb.from_user.id if cb.from_user else 'Unknown'}")
        data = await state.get_data()
        season = data.get("season", "spring")
        tldr_report = data.get("tldr_report", "")
        print(f"üå∏ Returning to results for season: {season}")
        
        season_names = {
            "spring": "üå∏ –Ø—Ä–∫–∞—è –í–µ—Å–Ω–∞",
            "summer": "üåä –ú—è–≥–∫–æ–µ –õ–µ—Ç–æ", 
            "autumn": "üçÇ –ì–ª—É–±–æ–∫–∞—è –û—Å–µ–Ω—å",
            "winter": "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –ó–∏–º–∞"
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        analysis_text = f"\n\nüìä **–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑:**\n{tldr_report}" if tldr_report else ""
        
        await cb.message.edit_text(
            f"üéâ **–†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê**\n\n"
            f"**–í–∞—à —Ü–≤–µ—Ç–æ—Ç–∏–ø:** {season_names[season]}{analysis_text}\n\n"
            f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞", callback_data="result:description")],
                [InlineKeyboardButton(text="üíÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã", callback_data="result:products")],
                [InlineKeyboardButton(text="üìÑ –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="report:latest")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")]
            ])
        )
        await cb.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º")
        print("‚úÖ Back to results displayed successfully")
        
    except Exception as e:
        print(f"‚ùå Error in back_to_results: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")
