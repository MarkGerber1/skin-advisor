"""
üõçÔ∏è –ò–Ω–ª–∞–π–Ω-–ø–æ–¥–±–æ—Ä —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ "–ü–æ—Ä—Ç—Ä–µ—Ç –ª–∏—Ü–∞"
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –¢–æ–≤–∞—Ä—ã ‚Üí –í–∞—Ä–∏–∞–Ω—Ç—ã ‚Üí –ö–æ—Ä–∑–∏–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
from __future__ import annotations

import os
from typing import List, Dict, Optional, Tuple
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from engine.catalog_store import CatalogStore
from engine.models import Product
from engine.selector import SelectorV2
from i18n.ru import *
from services.cart_service import get_cart_service, CartServiceError

# Analytics import with fallback
try:
    from engine.analytics import get_analytics_tracker
    ANALYTICS_AVAILABLE = True
except ImportError:
    ANALYTICS_AVAILABLE = False
    def get_analytics_tracker():
        return None

router = Router()


# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∏—Ö —Å–ª–∞–≥–∏
CATEGORY_MAPPING = {
    CAT_CLEANSE: CATEGORY_CLEANSER,
    CAT_TONE: CATEGORY_TONER,
    CAT_SERUM: CATEGORY_SERUM,
    CAT_MOIST: CATEGORY_MOISTURIZER,
    CAT_EYE: CATEGORY_EYE_CARE,
    CAT_SPF: CATEGORY_SUN_PROTECTION,
    CAT_MASK: CATEGORY_MASK
}

# –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
CATEGORY_TO_ENGINE = {
    CAT_CLEANSE: "cleanser",
    CAT_TONE: "toner",
    CAT_SERUM: "serum",
    CAT_MOIST: "moisturizer",
    CAT_EYE: "eye_cream",
    CAT_SPF: "sunscreen",
    CAT_MASK: "mask"
}


def _format_price(product: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π"""
    price = product.get("price", 0)
    currency = product.get("price_currency", "RUB")

    if currency in ("RUB", "‚ÇΩ"):
        return f"{int(price)} ‚ÇΩ"
    elif currency == "USD":
        return f"${price:.0f}"
    elif currency == "EUR":
        return f"‚Ç¨{price:.0f}"
    else:
        return f"{int(price)} {currency}"


def _format_source_info(product: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
    source_name = product.get("source_name", "")
    price_text = _format_price(product)

    if source_name == "goldapple.ru":
        return f"({SRC_GOLDAPPLE} ¬∑ {price_text})"
    elif any(domain in source_name for domain in ["sephora.ru", "letu.ru", "rive-gauche.ru"]):
        return f"({SRC_RU_OFFICIAL} ¬∑ {price_text})"
    elif any(domain in source_name for domain in ["wildberries.ru", "ozon.ru", "yandex.market.ru"]):
        return f"({SRC_RU_MP} ¬∑ {price_text})"
    else:
        return f"({SRC_INTL} ¬∑ {price_text})"


def _resolve_product_source(product: Dict) -> Dict:
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ source_resolver
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –µ—Å—Ç—å
    return product


def _get_products_by_category(user_id: int, category_slug: str, page: int = 1) -> Tuple[List[Dict], int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.handlers.user_profile_store import get_user_profile_store
        profile_store = get_user_profile_store()
        user_profile = profile_store.load_profile(user_id)

        if not user_profile:
            return [], 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SelectorV2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        selector = SelectorV2()
        result = selector.select_products_v2(
            profile=user_profile,
            catalog=catalog,
            partner_code="S1"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        engine_category = CATEGORY_TO_ENGINE.get(category_slug, category_slug)
        skincare_data = result.get("skincare", {})
        category_products = skincare_data.get(engine_category, [])

        if not category_products:
            return [], 0

        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        resolved_products = []
        for product in category_products:
            resolved = _resolve_product_source(product)
            if resolved:
                resolved_products.append(resolved)

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (8 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        per_page = 8
        total_pages = (len(resolved_products) + per_page - 1) // per_page
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page

        page_products = resolved_products[start_idx:end_idx]

        return page_products, total_pages

    except Exception as e:
        print(f"‚ùå Error getting products for category {category_slug}: {e}")
        return [], 0


@router.callback_query(F.data == "skincare_result:products")
async def start_skincare_picker(cb: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
    try:
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("recommendations_viewed", cb.from_user.id, {
                "branch": "skincare",
                "source": "test_completion"
            })

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        data = await state.get_data()
        skin_analysis = data.get("skin_analysis", {})
        skin_type = skin_analysis.get("type", "normal")
        concerns = skin_analysis.get("concerns", [])

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–∂–∏ –∏ –ø—Ä–æ–±–ª–µ–º
        available_categories = []

        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        available_categories.extend([
            (CAT_CLEANSE, BTN_CLEANSE),
            (CAT_TONE, BTN_TONE),
            (CAT_SERUM, BTN_SERUM),
            (CAT_MOIST, BTN_MOIST)
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if any(concern in ["aging", "dark_circles", "puffiness"] for concern in concerns):
            available_categories.append((CAT_EYE, BTN_EYE))

        if any(concern in ["pigmentation", "sun_damage"] for concern in concerns):
            available_categories.append((CAT_SPF, BTN_SPF))

        # –ú–∞—Å–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        available_categories.append((CAT_MASK, BTN_REMOVER))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons = []
        for slug, name in available_categories:
            buttons.append([InlineKeyboardButton(
                text=name,
                callback_data=f"c:cat:{slug}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text=BTN_BACK, callback_data="back:skincare_results"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text(
            f"üõçÔ∏è **{HEAD_SKINCARE_PICK}**\n\n"
            f"{SUB_PICK}\n\n"
            f"**–í–∞—à —Ç–∏–ø –∫–æ–∂–∏:** {skin_type}\n"
            f"**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:** {', '.join(concerns[:3]) if concerns else '–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º'}",
            reply_markup=kb
        )

        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in start_skincare_picker: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–¥–±–æ—Ä–∞")


@router.callback_query(F.data.startswith("c:cat:"))
async def show_category_products(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 3:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        category_slug = parts[2]
        page = 1

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if len(parts) > 3 and parts[3].startswith("p"):
            try:
                page = int(parts[3][1:])
            except ValueError:
                page = 1

        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("category_opened", user_id, {
                "name": category_slug,
                "page": page
            })

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products, total_pages = _get_products_by_category(user_id, category_slug, page)

        if not products:
            # –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=BTN_BACK, callback_data="c:back:categories")],
                [InlineKeyboardButton(text=BTN_BACK_CAT, callback_data="skincare_result:products")]
            ])

            await cb.message.edit_text(
                f"üòî **{CATEGORY_MAPPING.get(category_slug, category_slug)}**\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=kb
            )
            await cb.answer()
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        text_lines = [f"üõçÔ∏è **{CATEGORY_MAPPING.get(category_slug, category_slug)}**"]

        if total_pages > 1:
            text_lines.append(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}")

        text_lines.append("")

        buttons = []

        for i, product in enumerate(products, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞
            brand = product.get("brand", "")
            name = product.get("name", "")
            source_info = _format_source_info(product)

            text_lines.append(f"{i}. {brand} {name}")
            text_lines.append(f"   {source_info}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
            in_stock = product.get("in_stock", True)
            has_variants = len(product.get("variants", [])) > 1

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            if in_stock:
                if has_variants:
                    # –¢–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"üì¶ –í—ã–±—Ä–∞—Ç—å {i}",
                            callback_data=f"c:prd:{product.get('id', '')}"
                        )
                    ])
                else:
                    # –¢–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                            callback_data=f"c:add:{product.get('id', '')}:default"
                        )
                    ])
            else:
                # –¢–æ–≤–∞—Ä –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
                buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ {i}",
                        callback_data=f"c:oos:{product.get('id', '')}"
                    )
                ])

            text_lines.append("")

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text=BTN_PREV,
                callback_data=f"c:cat:{category_slug}:p{page-1}"
            ))

        nav_buttons.append(InlineKeyboardButton(
            text=BTN_BACK,
            callback_data="skincare_result:products"
        ))

        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text=BTN_NEXT,
                callback_data=f"c:cat:{category_slug}:p{page+1}"
            ))

        buttons.append(nav_buttons)

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb)
        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in show_category_products: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤")


@router.callback_query(F.data.startswith("c:prd:"))
async def show_product_variants(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 3:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("product_opened", user_id, {
                "pid": product_id,
                "source": "category_view"
            })

        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –≤ –±—É–¥—É—â–µ–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞)
        # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ ID

        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        variants = [
            {"id": "variant_30ml", "name": "30 –º–ª", "price": 2500, "in_stock": True},
            {"id": "variant_50ml", "name": "50 –º–ª", "price": 3200, "in_stock": True},
            {"id": "variant_100ml", "name": "100 –º–ª", "price": 4800, "in_stock": False}
        ]

        text_lines = ["üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞**\n"]
        buttons = []

        for i, variant in enumerate(variants, 1):
            price_text = _format_price({"price": variant["price"], "price_currency": "RUB"})

            text_lines.append(f"{i}. {variant['name']} ‚Ä¢ {price_text}")

            if variant["in_stock"]:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                        callback_data=f"c:add:{product_id}:{variant['id']}"
                    )
                ])
            else:
                text_lines[-1] += f" ({BADGE_OOS})"
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã {i}",
                        callback_data=f"c:alt:{product_id}:{variant['id']}"
                    )
                ])

            text_lines.append("")

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(text=BTN_BACK, callback_data="c:back:category")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb)
        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in show_product_variants: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


@router.callback_query(F.data.startswith("c:add:"))
async def add_product_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 4:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        variant_id = parts[3] if parts[3] != "default" else None
        user_id = cb.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if not hasattr(cb.bot, 'cart_service_available'):
            await cb.answer(MSG_ADD_FAILED)
            return

        try:
            cart_service = get_cart_service()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            cart_item = await cart_service.add_item(
                user_id=user_id,
                product_id=product_id,
                variant_id=variant_id,
                qty=1
            )

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            if ANALYTICS_AVAILABLE:
                analytics = get_analytics_tracker()
                analytics.track_event("product_added_to_cart", user_id, {
                    "pid": product_id,
                    "vid": variant_id or "default",
                    "source": cart_item.ref_link or "unknown",
                    "price": cart_item.price,
                    "category": cart_item.category
                })

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            variant_text = f" ({cart_item.variant_name})" if cart_item.variant_name else ""
            item_name = f"{cart_item.brand or ''} {cart_item.name or ''}".strip()
            message = MSG_VARIANT_ADDED.format(
                brand=cart_item.brand or "",
                name=cart_item.name or "",
                variant=cart_item.variant_name or "—Å—Ç–∞–Ω–¥–∞—Ä—Ç"
            )

            await cb.answer(message, show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "‚úì –í –∫–æ—Ä–∑–∏–Ω–µ"
            # TODO: –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

        except CartServiceError as e:
            print(f"‚ùå Cart service error: {e}")
            await cb.answer(MSG_ADD_FAILED)

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            if ANALYTICS_AVAILABLE:
                analytics = get_analytics_tracker()
                analytics.track_event("error_shown", user_id, {
                    "code": e.code.value if hasattr(e, 'code') else "unknown",
                    "place": "cart_add",
                    "error_message": str(e)
                })

    except Exception as e:
        print(f"‚ùå Unexpected error in add_product_to_cart: {e}")
        await cb.answer(MSG_ADD_FAILED)


@router.callback_query(F.data.startswith("c:oos:"))
async def show_out_of_stock_alternatives(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 3:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("oos_shown", user_id, {"pid": product_id})

        # TODO: –ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ

        # –ó–∞–≥–ª—É—à–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        alternatives = [
            {"id": "alt_1", "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1", "brand": "Brand A", "price": 2200},
            {"id": "alt_2", "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2", "brand": "Brand B", "price": 2400},
            {"id": "alt_3", "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 3", "brand": "Brand C", "price": 2100}
        ]

        text_lines = [f"üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞**\n"]
        buttons = []

        for i, alt in enumerate(alternatives, 1):
            price_text = _format_price({"price": alt["price"], "price_currency": "RUB"})
            text_lines.append(f"{i}. {alt['brand']} {alt['name']} ‚Ä¢ {price_text}")

            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                    callback_data=f"c:add:{alt['id']}:default"
                )
            ])

            text_lines.append("")

        buttons.append([
            InlineKeyboardButton(text=BTN_BACK, callback_data="c:back:category")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb)

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("alternatives_shown", user_id, {
                "pid": product_id,
                "base_category": "unknown",  # TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                "alternatives_count": len(alternatives)
            })

        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in show_out_of_stock_alternatives: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤")


@router.callback_query(F.data == "c:back:categories")
async def back_to_categories(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await start_skincare_picker(cb, state)


@router.callback_query(F.data == "c:back:category")
async def back_to_category(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await start_skincare_picker(cb, state)
