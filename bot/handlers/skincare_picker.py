"""
üõçÔ∏è –ò–Ω–ª–∞–π–Ω-–ø–æ–¥–±–æ—Ä —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ "–ü–æ—Ä—Ç—Ä–µ—Ç –ª–∏—Ü–∞"
–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –¢–æ–≤–∞—Ä—ã ‚Üí –í–∞—Ä–∏–∞–Ω—Ç—ã ‚Üí –ö–æ—Ä–∑–∏–Ω–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
from __future__ import annotations

import os
from typing import List, Dict, Optional, Tuple
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# Fix imports for engine modules
try:
    from engine.catalog_store import CatalogStore
    from engine.models import Product
    from engine.selector import SelectorV2
    from engine.selector_schema import canon_slug, safe_get_skincare_data
    from engine.affiliate_validator import AffiliateManager
    from engine.ab_testing import get_ab_testing_framework
    from services.affiliates import build_ref_link
except ImportError:
    print("CRITICAL: Failed to import engine modules, using fallback")
    # Define fallback classes
    class CatalogStore:
        @staticmethod
        def instance(*args):
            return None
    class Product:
        pass
    class SelectorV2:
        pass
    class AffiliateManager:
        def add_affiliate_params(self, url, source, campaign=None):
            return url
        def track_checkout_click(self, *args, **kwargs):
            pass
        def track_external_checkout_opened(self, *args, **kwargs):
            pass
    class ABTestingFramework:
        def log_button_click(self, *args, **kwargs):
            pass
        def log_test_completion(self, *args, **kwargs):
            pass
        def log_add_to_cart(self, *args, **kwargs):
            pass
        def get_category_order_variant(self, user_id):
            return ["cleanser", "toner", "serum", "moisturizer", "eye_care", "sunscreen", "mask"]

        @staticmethod
        def emit_analytics(*args, **kwargs):
            pass

    # Fallback functions for schema
    def canon_slug(slug: str) -> str:
        return slug

    def safe_get_skincare_data(data: Dict, slug: str) -> List:
        if not data or not isinstance(data, dict):
            return []
        return data.get(slug, [])

# Fix import for Railway environment
import sys
import os

# Add project root to sys.path for Railway compatibility
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(os.path.dirname(current_dir))

# Try multiple possible paths for Railway
possible_paths = [
    project_root,  # Local development
    '/usr/src/app',  # Railway production
    os.path.dirname(project_root),  # Fallback
]

for path in possible_paths:
    if os.path.exists(path) and path not in sys.path:
        sys.path.insert(0, path)
        print(f"Added to sys.path: {path}")

# Define category constants outside try/except (–∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–∞–≥–∏)
CAT_CLEANSE = "cleanser"
CAT_TONE = "toner"
CAT_SERUM = "serum"
CAT_MOIST = "moisturizer"
CAT_EYE = "eye_care"
CAT_SPF = "sunscreen"
CAT_MASK = "mask"

# Define UI category names outside try/except
CATEGORY_CLEANSER = "–û—á–∏—â–µ–Ω–∏–µ"
CATEGORY_TONER = "–¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
CATEGORY_SERUM = "–°—ã–≤–æ—Ä–æ—Ç–∫–∏"
CATEGORY_MOISTURIZER = "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ"
CATEGORY_EYE_CARE = "–ó–æ–Ω–∞ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑"
CATEGORY_SUN_PROTECTION = "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞"
CATEGORY_MASK = "–°–Ω—è—Ç–∏–µ –º–∞–∫–∏—è–∂–∞"

# Alias map –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π - –º–∞–ø–ø–∏–Ω–≥ –≤—Ö–æ–¥–Ω—ã—Ö —Å–ª–∞–≥–æ–≤ –∫ —Å–ø–∏—Å–∫—É –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞
CATEGORY_ALIAS_MAP = {
    "cleanser": ["–æ—á–∏—â–µ–Ω–∏–µ", "–≥–µ–ª—å –¥–ª—è —É–º—ã–≤–∞–Ω–∏—è", "–ø–µ–Ω–∫–∞", "–º–∏—Ü–µ–ª–ª—è—Ä–Ω–∞—è –≤–æ–¥–∞", "–º—É—Å—Å", "cleanser", "cleanse", "–æ—á–∏—â–∞—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ"],
    "toner": ["—Ç–æ–Ω–∏–∫", "—Å–æ—Ñ—Ç–Ω–µ—Ä", "–ø–∏–ª–∏–Ω–≥", "–ø–∏–ª–∏–Ω–≥-–ø—ç–¥—ã", "–ø–∏–ª–∏–Ω–≥-—Å–∫–∞—Ç–∫–∞", "toner", "toning", "—Ç–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"],
    "serum": ["—Å—ã–≤–æ—Ä–æ—Ç–∫–∞", "serum"],
    "moisturizer": ["–∫—Ä–µ–º", "—ç–º—É–ª—å—Å–∏—è", "–≥–µ–ª—å", "—Ñ–ª—é–∏–¥", "–º–∞—Å–ª–æ", "moisturizer", "moisturizing", "—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ"],
    "eye_care": ["–∫—Ä–µ–º –¥–ª—è –≥–ª–∞–∑", "–∑–æ–Ω–∞ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑", "eye cream", "eye_care", "–≥–ª–∞–∑–∞", "–ø–æ–¥ –≥–ª–∞–∑–∞–º–∏"],
    "sunscreen": ["—Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞", "spf", "spf –∫—Ä–µ–º", "—Ñ–ª—é–∏–¥ spf", "—Å—Ç–∏–∫ spf", "sunscreen", "sun_protection"],
    "mask": ["–º–∞—Å–∫–∞", "mask", "masks", "—Å–Ω—è—Ç–∏–µ –º–∞–∫–∏—è–∂–∞", "makeup_remover"]
}

try:
    from i18n.ru import *
except ImportError:
    # Fallback: try to import directly
    try:
        import i18n.ru as i18n_module
        # Copy all attributes from i18n.ru to current namespace
        import inspect
        current_module = inspect.currentframe().f_globals
        for name in dir(i18n_module):
            if not name.startswith('_'):
                current_module[name] = getattr(i18n_module, name)
    except ImportError as e:
        print(f"CRITICAL: Failed to import i18n.ru: {e}")
        # Define minimal fallback constants
        HEAD_SKINCARE_PICK = "–ü–æ–¥–±–æ—Ä–∫–∞ —É—Ö–æ–¥–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"
        SUB_PICK = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤—å—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É"

        # Button constants (fallback)
        BTN_CLEANSE = "–û—á–∏—â–µ–Ω–∏–µ"
        BTN_TONE = "–¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ"
        BTN_SERUM = "–°—ã–≤–æ—Ä–æ—Ç–∫–∏"
        BTN_MOIST = "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ"
        BTN_EYE = "–ó–æ–Ω–∞ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑"
        BTN_SPF = "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞"
        BTN_REMOVER = "–°–Ω—è—Ç–∏–µ –º–∞–∫–∏—è–∂–∞"
        BTN_CHOOSE_VARIANT = "–í—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç"
        BTN_ADD_TO_CART = "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"
        BTN_IN_CART = "‚úì –í –∫–æ—Ä–∑–∏–Ω–µ"

        # Category constants (already defined above)

        # UI category names (already defined above)
        MSG_ADDED = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {item}"

        # Display names for categories
        CAT_DISPLAY_NAMES = {
            "cleanser": "–û—á–∏—â–µ–Ω–∏–µ",
            "toner": "–¢–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "serum": "–°—ã–≤–æ—Ä–æ—Ç–∫–∏",
            "moisturizer": "–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ",
            "eye_cream": "–£—Ö–æ–¥ –∑–∞ –≥–ª–∞–∑–∞–º–∏",
            "sunscreen": "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞",
            "mask": "–ú–∞—Å–∫–∏"
        }
        MSG_VARIANT_ADDED = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: {brand} {name} ({variant})"
        BADGE_OOS = "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        BTN_SHOW_ALTS = "–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã"

# Fix import for cart module
try:
    from engine.cart_store import CartStore
    cart_service_available = True
except ImportError:
    print("CRITICAL: Failed to import CartStore, using fallback")
    cart_service_available = False
    class CartStore:
        pass
        # Define fallback functions
        def get_cart_service():
            return None
        class CartServiceError(Exception):
            pass

# Analytics import with fallback
try:
    from engine.analytics import (
        get_analytics_tracker,
        track_skincare_recommendations_viewed,
        track_category_opened,
        track_product_opened,
        track_variant_selected,
        track_oos_shown,
        track_alternatives_shown,
        track_skincare_error,
        track_cart_event
    )
    ANALYTICS_AVAILABLE = True
except ImportError:
    ANALYTICS_AVAILABLE = False
    def get_analytics_tracker():
        return None
    # Stub functions for fallback
    def track_skincare_recommendations_viewed(*args, **kwargs): pass
    def track_category_opened(*args, **kwargs): pass
    def track_product_opened(*args, **kwargs): pass
    def track_variant_selected(*args, **kwargs): pass
    def track_oos_shown(*args, **kwargs): pass
    def track_alternatives_shown(*args, **kwargs): pass
    def track_skincare_error(*args, **kwargs): pass
    def track_cart_event(*args, **kwargs): pass

router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è affiliate –º–µ–Ω–µ–¥–∂–µ—Ä–∞
try:
    affiliate_manager = AffiliateManager()
except:
    affiliate_manager = AffiliateManager()  # fallback

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è A/B testing framework
try:
    ab_framework = get_ab_testing_framework()
except:
    ab_framework = ABTestingFramework()  # fallback

# –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∏—Ö —Å–ª–∞–≥–∏
CATEGORY_MAPPING = {
    CAT_CLEANSE: CATEGORY_CLEANSER,
    CAT_TONE: CATEGORY_TONER,
    CAT_SERUM: CATEGORY_SERUM,
    CAT_MOIST: CATEGORY_MOISTURIZER,
    CAT_EYE: CATEGORY_EYE_CARE,
    CAT_SPF: CATEGORY_SUN_PROTECTION,
    CAT_MASK: CATEGORY_MASK
}

# –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Ç–µ–ø–µ—Ä—å –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ)
CATEGORY_TO_ENGINE = {
    CAT_CLEANSE: "cleanser",
    CAT_TONE: "toner",
    CAT_SERUM: "serum",
    CAT_MOIST: "moisturizer",
    CAT_EYE: "eye_care",
    CAT_SPF: "sunscreen",
    CAT_MASK: "mask"
}


def _format_price(product: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã —Å –≤–∞–ª—é—Ç–æ–π"""
    price = product.get("price", 0)
    currency = product.get("currency", "RUB")

    if currency in ("RUB", "‚ÇΩ"):
        return f"{int(price)} ‚ÇΩ"
    elif currency == "USD":
        return f"${price:.0f}"
    elif currency == "EUR":
        return f"‚Ç¨{price:.0f}"
    else:
        return f"{int(price)} {currency}"


def _format_source_info(product: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
    source_name = product.get("source_name", "")
    price_text = _format_price(product)

    if source_name == "goldapple.ru":
        return f"({SRC_GOLDAPPLE} ¬∑ {price_text})"
    elif any(domain in source_name for domain in ["sephora.ru", "letu.ru", "rive-gauche.ru"]):
        return f"({SRC_RU_OFFICIAL} ¬∑ {price_text})"
    elif any(domain in source_name for domain in ["wildberries.ru", "ozon.ru", "yandex.market.ru"]):
        return f"({SRC_RU_MP} ¬∑ {price_text})"
    else:
        return f"({SRC_INTL} ¬∑ {price_text})"


def _resolve_product_source(product: Dict) -> Dict:
    """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π"""
    # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ source_resolver
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –µ—Å—Ç—å
    return product


def _get_products_by_category(user_id: int, category_slug: str, page: int = 1) -> Tuple[List[Dict], int]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ª–∞–≥ –∫ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É –≤–∏–¥—É
        canonical_slug = canon_slug(category_slug)
        print(f"üîç Looking for category '{category_slug}' ‚Üí canonical '{canonical_slug}'")

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from bot.handlers.user_profile_store import get_user_profile_store
        profile_store = get_user_profile_store()
        user_profile = profile_store.load_profile(user_id)

        if not user_profile:
            print(f"‚ö†Ô∏è No profile found for user {user_id}")
            return [], 0

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
        catalog_store = CatalogStore.instance(catalog_path)
        catalog = catalog_store.get()

        if not catalog:
            print("‚ö†Ô∏è Catalog not loaded")
            return [], 0

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º SelectorV2 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        selector = SelectorV2()
        result = selector.select_products_v2(
            profile=user_profile,
            catalog=catalog,
            partner_code="S1"
        )

        if not result:
            print("‚ö†Ô∏è No results from selector")
            return [], 0

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ª–∞–≥—É
        category_products = safe_get_skincare_data(result.get("skincare"), canonical_slug)

        if not category_products:
            print(f"‚ö†Ô∏è No products found for canonical category '{canonical_slug}' (original: '{category_slug}')")
            print(f"   Available categories: {list(result.get('skincare', {}).keys())}")
            return [], 0

        print(f"‚úÖ Found {len(category_products)} products for category '{canonical_slug}'")

        # –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        resolved_products = []
        for product in category_products:
            resolved = _resolve_product_source(product)
            if resolved:
                resolved_products.append(resolved)

        if not resolved_products:
            print(f"‚ö†Ô∏è No resolved products for category '{canonical_slug}'")
            return [], 0

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (8 —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        per_page = 8
        total_pages = (len(resolved_products) + per_page - 1) // per_page
        start_idx = (page - 1) * per_page
        end_idx = start_idx + per_page

        page_products = resolved_products[start_idx:end_idx]

        return page_products, total_pages

    except Exception as e:
        print(f"‚ùå Error getting products for category {category_slug}: {e}")
        import traceback
        traceback.print_exc()
        return [], 0


# Theme switcher
@router.message(F.text == "/theme")
async def switch_theme(message: Message) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º (—Å–≤–µ—Ç–ª–∞—è/—Ç–µ–º–Ω–∞—è)"""
    user_id = message.from_user.id if message.from_user else 0

    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
    current_theme = "light"  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–∞—Ç—å –∏–∑ user preferences

    if current_theme == "light":
        new_theme = "dark"
        theme_name = "—Ç–µ–º–Ω—É—é"
    else:
        new_theme = "light"
        theme_name = "—Å–≤–µ—Ç–ª—É—é"

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ –±—É–¥—É—â–µ–º)
    # await save_user_theme(user_id, new_theme)

    await message.answer(
        f"üåô –¢–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞ –Ω–∞ {theme_name}!\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è.",
        reply_markup=None
    )

@router.callback_query(F.data == "skincare_picker:start")
async def start_skincare_picker(cb: CallbackQuery, state: FSMContext) -> None:
    """–ó–∞–ø—É—Å–∫ –ø–æ–¥–±–æ—Ä–∞ —É—Ö–æ–¥–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞"""
    try:
        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        track_skincare_recommendations_viewed(user_id)

        # A/B testing: –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π)

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        data = await state.get_data()
        skin_analysis = data.get("skin_analysis", {})
        skin_type = skin_analysis.get("type", "normal")
        concerns = skin_analysis.get("concerns", [])

        # A/B testing: –ø–æ–ª—É—á–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category_order = ab_framework.get_category_order_variant(user_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–æ–∂–∏ –∏ –ø—Ä–æ–±–ª–µ–º
        base_categories = [
            (CAT_CLEANSE, BTN_CLEANSE),
            (CAT_TONE, BTN_TONE),
            (CAT_SERUM, BTN_SERUM),
            (CAT_MOIST, BTN_MOIST)
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        additional_categories = []
        if any(concern in ["aging", "dark_circles", "puffiness"] for concern in concerns):
            additional_categories.append((CAT_EYE, BTN_EYE))

        if any(concern in ["pigmentation", "sun_damage"] for concern in concerns):
            additional_categories.append((CAT_SPF, BTN_SPF))

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        all_categories = base_categories + additional_categories

        # A/B testing: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç—É
        available_categories = []
        for cat_slug in category_order:
            for cat_tuple in all_categories:
                if cat_tuple[0] == cat_slug:
                    available_categories.append(cat_tuple)
                    break

        # –ú–∞—Å–∫–∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
        available_categories.append((CAT_MASK, BTN_REMOVER))

        # A/B testing: –ª–æ–≥–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        ab_framework.log_button_click(user_id, "category_order_experiment", len(available_categories))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        buttons = []
        for slug, name in available_categories:
            buttons.append([InlineKeyboardButton(
                text=name,
                callback_data=f"c:cat:{slug}"
            )])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text=BTN_BACK, callback_data="back:skincare_results"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text(
            f"üõçÔ∏è **{HEAD_SKINCARE_PICK}**\n\n"
            f"{SUB_PICK}\n\n"
            f"**–í–∞—à —Ç–∏–ø –∫–æ–∂–∏:** {skin_type}\n"
            f"**–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:** {', '.join(concerns[:3]) if concerns else '–ù–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º'}",
            reply_markup=kb
        )

        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in start_skincare_picker: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–¥–±–æ—Ä–∞")


@router.callback_query(F.data.startswith("c:cat:"))
async def show_category_products(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 3:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        category_slug = parts[2]
        page = 1

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if len(parts) > 3 and parts[3].startswith("p"):
            try:
                page = int(parts[3][1:])
            except ValueError:
                page = 1

        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        track_category_opened(user_id, category_slug)

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products, total_pages = _get_products_by_category(user_id, category_slug, page)

        if not products:
            # –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            category_name = CATEGORY_MAPPING.get(category_slug, category_slug)

            # –ù–∞—Ö–æ–¥–∏–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            alternative_buttons = []
            try:
                from bot.handlers.user_profile_store import get_user_profile_store
                profile_store = get_user_profile_store()
                user_profile = profile_store.load_profile(user_id)

                if user_profile:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
                    catalog_path = os.getenv("CATALOG_PATH", "assets/fixed_catalog.yaml")
                    catalog_store = CatalogStore.instance(catalog_path)
                    catalog = catalog_store.get()

                    selector = SelectorV2()
                    result = selector.select_products_v2(
                        profile=user_profile,
                        catalog=catalog,
                        partner_code="S1"
                    )

                    skincare_data = result.get("skincare", {})

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
                    for alt_slug, alt_name in CATEGORY_MAPPING.items():
                        if alt_slug != category_slug:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–Ω–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–∞–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
                            alt_canonical = canon_slug(alt_slug)
                            alt_products = safe_get_skincare_data(skincare_data, alt_canonical)
                            if alt_products:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
                                alternative_buttons.append([
                                    InlineKeyboardButton(
                                        text=f"üîÑ {alt_name}",
                                        callback_data=f"c:cat:{alt_slug}"
                                    )
                                ])
            except Exception as e:
                print(f"‚ö†Ô∏è Error loading alternatives: {e}")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            buttons = alternative_buttons + [
                [InlineKeyboardButton(text=BTN_BACK, callback_data="c:back:categories")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="universal:home")]
            ]

            kb = InlineKeyboardMarkup(inline_keyboard=buttons)

            message_text = (
                f"üòî **{category_name}**\n\n"
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
            )

            if alternative_buttons:
                message_text += "**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:**\n"
            else:
                message_text += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –ø–æ–∑–∂–µ."

            await cb.message.edit_text(message_text, reply_markup=kb)
            await cb.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞")
            return

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        text_lines = [f"üõçÔ∏è **{CATEGORY_MAPPING.get(category_slug, category_slug)}**"]

        if total_pages > 1:
            text_lines.append(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}")

        text_lines.append("")

        buttons = []

        for i, product in enumerate(products, 1):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ç–æ–≤–∞—Ä–∞
            brand = product.get("brand", "")
            name = product.get("name", "")
            source_info = _format_source_info(product)

            text_lines.append(f"{i}. {brand} {name}")
            text_lines.append(f"   {source_info}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
            in_stock = product.get("in_stock", True)
            has_variants = len(product.get("variants", [])) > 1

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            if in_stock:
                if has_variants:
                    # –¢–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"üì¶ –í—ã–±—Ä–∞—Ç—å {i}",
                            callback_data=f"c:prd:{product.get('id', '')}"
                        )
                    ])
                else:
                    # –¢–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                            callback_data=f"c:add:{product.get('id', '')}:default"
                        )
                    ])
            else:
                # –¢–æ–≤–∞—Ä –Ω–µ –≤ –Ω–∞–ª–∏—á–∏–∏
                buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ {i}",
                        callback_data=f"c:oos:{product.get('id', '')}"
                    )
                ])

            text_lines.append("")

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text=BTN_PREV,
                callback_data=f"c:cat:{category_slug}:p{page-1}"
            ))

        nav_buttons.append(InlineKeyboardButton(
            text=BTN_BACK,
            callback_data="skincare_result:products"
        ))

        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text=BTN_NEXT,
                callback_data=f"c:cat:{category_slug}:p{page+1}"
            ))

        buttons.append(nav_buttons)

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb)
        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in show_category_products: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤")


@router.callback_query(F.data.startswith("c:prd:"))
async def show_product_variants(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 3:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        track_product_opened(user_id, product_id, "category_view")

        # Affiliate –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–æ–≤–∞—Ä–∞
        try:
            affiliate_manager.emit_analytics('product_opened', {
                'pid': product_id,
                'source': 'skincare_picker',
                'user_id': user_id
            })
        except Exception as e:
            print(f"[WARNING] Product open tracking error: {e}")

        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä (–ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –≤ –±—É–¥—É—â–µ–º –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞)
        # TODO: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ ID

        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
        variants = [
            {"id": "variant_30ml", "name": "30 –º–ª", "price": 2500, "in_stock": True},
            {"id": "variant_50ml", "name": "50 –º–ª", "price": 3200, "in_stock": True},
            {"id": "variant_100ml", "name": "100 –º–ª", "price": 4800, "in_stock": False}
        ]

        text_lines = ["üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≤–∞—Ä–∞**\n"]
        buttons = []

        for i, variant in enumerate(variants, 1):
            price_text = _format_price({"price": variant["price"], "currency": "RUB"})

            text_lines.append(f"{i}. {variant['name']} ‚Ä¢ {price_text}")

            if variant["in_stock"]:
                buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                        callback_data=f"c:add:{product_id}:{variant['id']}"
                    )
                ])
            else:
                text_lines[-1] += f" ({BADGE_OOS})"
                buttons.append([
                    InlineKeyboardButton(
                        text=f"üîÑ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã {i}",
                        callback_data=f"c:alt:{product_id}:{variant['id']}"
                    )
                ])

            text_lines.append("")

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        buttons.append([
            InlineKeyboardButton(text=BTN_BACK, callback_data="c:back:category")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb)
        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in show_product_variants: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")


@router.callback_query(F.data.startswith("c:add:"))
async def add_product_to_cart(cb: CallbackQuery, state: FSMContext) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 4:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        variant_id = parts[3] if parts[3] != "default" else None
        user_id = cb.from_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if not cart_service_available:
            await cb.answer(MSG_ADD_FAILED)
            return

        try:
            cart_store = store  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π store
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏
            product_data = None
            try:
                selector = SelectorV2()
                products = selector.select_products(user_id, category="all", limit=100)
                for prod in products:
                    if str(prod.get('id', '')) == product_id:
                        product_data = prod
                        break
            except Exception as e:
                print(f"Warning: Could not find product data for {product_id}: {e}")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
            ref_link = None
            if product_data:
                try:
                    ref_link = build_ref_link(product_data, "skincare_recommendation")
                except Exception as e:
                    print(f"Warning: Could not generate affiliate link: {e}")

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
            cart_item = cart_store.add_item(
                user_id=user_id,
                product_id=product_id,
                variant_id=variant_id,
                qty=1,
                ref_link=ref_link
            )

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            track_cart_event("product_added_to_cart", user_id,
                pid=product_id,
                vid=variant_id or "default",
                source=cart_item.ref_link or "unknown",
                price=cart_item.price,
                category=cart_item.category
            )

            # Affiliate –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ ref_link
                source = "unknown"
                if cart_item.ref_link:
                    if "goldapple" in cart_item.ref_link.lower():
                        source = "goldapple"
                    elif "wildberries" in cart_item.ref_link.lower() or "marketplace" in cart_item.ref_link.lower():
                        source = "ru_marketplace"
                    elif "official" in cart_item.ref_link.lower():
                        source = "ru_official"
                    elif "amazon" in cart_item.ref_link.lower() or "sephora" in cart_item.ref_link.lower():
                        source = "intl_authorized"

                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ checkout
                affiliate_manager.track_checkout_click(
                    items_count=1,
                    total=float(cart_item.price) if cart_item.price else 0,
                    currency='RUB',
                    source=source,
                    product_ids=[product_id]
                )

                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ checkout
                if cart_item.ref_link:
                    affiliate_manager.track_external_checkout_opened(
                        partner=source.title(),
                        url=cart_item.ref_link,
                        items_count=1
                    )

            except Exception as e:
                print(f"[WARNING] Affiliate tracking error: {e}")

            # A/B testing: –ª–æ–≥–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
            try:
                ab_framework.log_add_to_cart(user_id, "category_order_experiment", 1)
            except Exception as e:
                print(f"[WARNING] A/B tracking error: {e}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            variant_text = f" ({cart_item.variant_name})" if cart_item.variant_name else ""
            item_name = f"{cart_item.brand or ''} {cart_item.name or ''}".strip()
            message = MSG_VARIANT_ADDED.format(
                brand=cart_item.brand or "",
                name=cart_item.name or "",
                variant=cart_item.variant_name or "—Å—Ç–∞–Ω–¥–∞—Ä—Ç"
            )

            await cb.answer(message, show_alert=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "‚úì –í –∫–æ—Ä–∑–∏–Ω–µ"
            # TODO: –û–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ

        except CartServiceError as e:
            print(f"‚ùå Cart service error: {e}")
            await cb.answer(MSG_ADD_FAILED)

            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏
            track_skincare_error(user_id, e.code.value if hasattr(e, 'code') else "unknown", "cart_add")

    except Exception as e:
        print(f"‚ùå Unexpected error in add_product_to_cart: {e}")
        await cb.answer(MSG_ADD_FAILED)


@router.callback_query(F.data.startswith("c:oos:"))
async def show_out_of_stock_alternatives(cb: CallbackQuery, state: FSMContext) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    try:
        # –ü–∞—Ä—Å–∏–º callback
        parts = cb.data.split(":")
        if len(parts) < 3:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        user_id = cb.from_user.id

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("oos_shown", user_id, {"pid": product_id})

        # TODO: –ù–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –≤ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ

        # –ó–∞–≥–ª—É—à–∫–∞ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
        alternatives = [
            {"id": "alt_1", "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 1", "brand": "Brand A", "price": 2200},
            {"id": "alt_2", "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 2", "brand": "Brand B", "price": 2400},
            {"id": "alt_3", "name": "–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 3", "brand": "Brand C", "price": 2100}
        ]

        text_lines = [f"üîÑ **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –¥–ª—è —Ç–æ–≤–∞—Ä–∞**\n"]
        buttons = []

        for i, alt in enumerate(alternatives, 1):
            price_text = _format_price({"price": alt["price"], "currency": "RUB"})
            text_lines.append(f"{i}. {alt['brand']} {alt['name']} ‚Ä¢ {price_text}")

            buttons.append([
                InlineKeyboardButton(
                    text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å {i}",
                    callback_data=f"c:add:{alt['id']}:default"
                )
            ])

            text_lines.append("")

        buttons.append([
            InlineKeyboardButton(text=BTN_BACK, callback_data="c:back:category")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)

        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb)

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤
        track_alternatives_shown(user_id, product_id, "unknown", len(alternatives))

        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in show_out_of_stock_alternatives: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤")


@router.callback_query(F.data == "c:back:categories")
async def back_to_categories(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await start_skincare_picker(cb, state)


@router.callback_query(F.data == "c:back:category")
async def back_to_category(cb: CallbackQuery, state: FSMContext) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await start_skincare_picker(cb, state)


async def get_user_profile(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from bot.handlers.user_profile_store import get_user_profile_store
        store = get_user_profile_store()
        return await store.get_profile(user_id)
    except Exception as e:
        print(f"‚ùå Error getting user profile: {e}")
        return None


async def get_skincare_recommendations(user_id: int, profile):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if SELECTOR_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            selector = SelectorV2()
            result = selector.select_products_v2(profile, "skincare")
            return result.get("skincare", {})
        else:
            # –§–æ–ª–±—ç–∫ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            return {
                "cleanser": [
                    {"id": "test_cleanser", "brand": "Test Brand", "name": "Test Cleanser", "price": 1500, "currency": "RUB"}
                ],
                "toner": [
                    {"id": "test_toner", "brand": "Test Brand", "name": "Test Toner", "price": 1200, "currency": "RUB"}
                ]
            }
    except Exception as e:
        print(f"‚ùå Error getting skincare recommendations: {e}")
        return {}


@router.callback_query(F.data == "skincare:show_all")
async def skincare_show_all(cb: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π skincare"""
    try:
        print(f"üìã skincare:show_all callback from user {cb.from_user.id}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        user_id = cb.from_user.id
        profile = await get_user_profile(user_id)

        if not profile:
            await cb.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        recommendations = await get_skincare_recommendations(user_id, profile)

        if not recommendations:
            await cb.answer("‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
        text_lines = ["üõçÔ∏è **–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π**\n"]
        buttons = []

        total_products = 0
        for category, products in recommendations.items():
            if products:
                text_lines.append(f"\nüì¶ **{CAT_DISPLAY_NAMES.get(category, category.title())}**")
                for product in products:
                    total_products += 1
                    price_text = _format_price(product)
                    text_lines.append(f"‚Ä¢ {product['brand']} {product['name']} ‚Ä¢ {price_text}")

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                    buttons.append([
                        InlineKeyboardButton(
                            text=f"‚ûï –î–æ–±–∞–≤–∏—Ç—å",
                            callback_data=f"c:add:{product['id']}:default"
                        )
                    ])

        text_lines.append(f"\nüìä –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back:main"),
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="skincare:show_all")
        ])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await cb.message.edit_text("\n".join(text_lines), reply_markup=kb, parse_mode="Markdown")

        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        if ANALYTICS_AVAILABLE:
            analytics = get_analytics_tracker()
            analytics.track_event("skincare_show_all", user_id, {"total_products": total_products})

        await cb.answer()

    except Exception as e:
        print(f"‚ùå Error in skincare_show_all: {e}")
        await cb.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
