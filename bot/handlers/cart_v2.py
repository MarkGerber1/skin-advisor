"""
üõí Cart v2 Handler

New cart implementation with proper UX flow:
recommendations ‚Üí cart ‚Üí checkout
"""

import logging
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from engine.cart_store import CartStore, Cart, CartItem
from config.env import get_settings
from bot.utils.security import safe_send_message, safe_edit_message_text, sanitize_message
from engine.analytics import get_analytics_tracker
from i18n.ru import *

logger = logging.getLogger(__name__)
router = Router()

# Global instances
cart_store = CartStore()
analytics = get_analytics_tracker()

def format_price(amount_cents: int, currency: str = "RUB") -> str:
    """Format price for display"""
    amount_rub = amount_cents // 100
    return f"{amount_rub} {currency}"

def format_cart_item(item: CartItem) -> str:
    """Format cart item for display"""
    price_str = format_price(item.price, item.currency)
    total_str = format_price(item.price * item.qty, item.currency)
    return CART_ITEM_FMT.format(
        name=item.name,
        price=price_str,
        qty=item.qty,
        total=total_str
    )

def build_cart_keyboard(cart: Cart, user_id: int) -> InlineKeyboardMarkup:
    """Build cart keyboard with item controls"""
    keyboard = InlineKeyboardBuilder()

    # Item controls
    for key, item in cart.items.items():
        # Quantity controls for each item
        keyboard.row(
            InlineKeyboardButton(text=BTN_DEC, callback_data=f"cart:dec:{key}"),
            InlineKeyboardButton(text=str(item.qty), callback_data=f"cart:info:{key}"),
            InlineKeyboardButton(text=BTN_INC, callback_data=f"cart:inc:{key}"),
            InlineKeyboardButton(text=BTN_DEL, callback_data=f"cart:del:{key}")
        )

    # Cart actions
    keyboard.row(
        InlineKeyboardButton(text=BTN_BACK_RECO, callback_data="cart:back_reco"),
        InlineKeyboardButton(text=BTN_CHECKOUT, callback_data="cart:checkout")
    )

    keyboard.row(InlineKeyboardButton(text=BTN_CLEAR, callback_data="cart:clear"))

    return keyboard.as_markup()

async def render_cart(cart: Cart) -> str:
    """Render cart content as text"""
    if not cart.items:
        return CART_EMPTY

    text = f"{CART_TITLE}\n\n"

    # Items
    for i, (key, item) in enumerate(cart.items.items(), 1):
        text += f"{i}) {format_cart_item(item)}\n"

    # Total
    total_str = format_price(cart.subtotal, cart.currency)
    text += f"\n{CART_TOTAL.format(total=total_str)}"

    # Currency warning
    if cart.needs_review:
        text += "\n‚ö†Ô∏è –†–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"

    return text

@router.callback_query(F.data == "cart:open")
async def handle_cart_open(cb: CallbackQuery):
    """Open cart screen"""
    try:
        user_id = cb.from_user.id
        cart = await cart_store.get(user_id)

        text = await render_cart(cart)
        keyboard = build_cart_keyboard(cart, user_id)

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        analytics.cart_opened(user_id)
        await cb.answer()

    except Exception as e:
        logger.error(f"Error opening cart: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)

@router.callback_query(F.data.startswith("cart:inc:"))
async def handle_cart_inc(cb: CallbackQuery):
    """Increase item quantity"""
    try:
        key = cb.data.replace("cart:inc:", "")
        user_id = cb.from_user.id

        cart = await cart_store.set_qty(user_id, key, 99)  # Max qty check in set_qty
        text = await render_cart(cart)
        keyboard = build_cart_keyboard(cart, user_id)

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        analytics.cart_qty_changed(user_id, key, cart.items.get(key, CartItem("", "")).qty)
        await cb.answer("‚ûï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error increasing quantity: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("cart:dec:"))
async def handle_cart_dec(cb: CallbackQuery):
    """Decrease item quantity"""
    try:
        key = cb.data.replace("cart:dec:", "")
        user_id = cb.from_user.id

        # Get current quantity
        cart = await cart_store.get(user_id)
        current_qty = cart.items.get(key, CartItem("", "")).qty

        if current_qty <= 1:
            # Remove item instead of setting to 0
            cart = await cart_store.remove(user_id, key)
        else:
            cart = await cart_store.set_qty(user_id, key, current_qty - 1)

        text = await render_cart(cart)
        keyboard = build_cart_keyboard(cart, user_id)

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        new_qty = cart.items.get(key, CartItem("", "")).qty
        analytics.cart_qty_changed(user_id, key, new_qty)
        if new_qty == 0:
            analytics.cart_item_removed(user_id, key)

        await cb.answer("‚ûñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")

    except Exception as e:
        logger.error(f"Error decreasing quantity: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("cart:del:"))
async def handle_cart_del(cb: CallbackQuery):
    """Remove item from cart"""
    try:
        key = cb.data.replace("cart:del:", "")
        user_id = cb.from_user.id

        cart = await cart_store.remove(user_id, key)

        text = await render_cart(cart)
        keyboard = build_cart_keyboard(cart, user_id)

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        analytics.cart_item_removed(user_id, key)
        await cb.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")

    except Exception as e:
        logger.error(f"Error deleting item: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "cart:clear")
async def handle_cart_clear(cb: CallbackQuery):
    """Clear entire cart"""
    try:
        user_id = cb.from_user.id
        await cart_store.clear(user_id)

        text = CART_EMPTY
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=BTN_BACK_RECO, callback_data="cart:back_reco")]
        ])

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        analytics.cart_cleared(user_id)
        await cb.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")

    except Exception as e:
        logger.error(f"Error clearing cart: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏", show_alert=True)

@router.callback_query(F.data == "cart:checkout")
async def handle_cart_checkout(cb: CallbackQuery):
    """Start checkout process"""
    try:
        user_id = cb.from_user.id
        cart = await cart_store.get(user_id)

        if not cart.items:
            await cb.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
            return

        # Simple checkout - just show links
        text = f"{CHECKOUT_TITLE}\n\n"

        links = []
        for item in cart.items.values():
            links.append(f"‚Ä¢ {item.name}: {item.link}")

        text += f"{CHECKOUT_LINKS_READY}\n\n" + "\n".join(links)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:open")]
        ])

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        analytics.checkout_started(user_id, len(cart.items), cart.subtotal / 100)
        analytics.checkout_links_generated(user_id, len(links))

        await cb.answer("‚úÖ –°—Å—ã–ª–∫–∏ –≥–æ—Ç–æ–≤—ã")

    except Exception as e:
        logger.error(f"Error in checkout: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "cart:back_reco")
async def handle_cart_back_reco(cb: CallbackQuery):
    """Go back to recommendations"""
    try:
        # This should trigger showing recommendations again
        # For now, just show a placeholder
        text = "üíÑ –í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ä–µ–¥—Å—Ç–≤:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üß¥ –û—á–∏—â–µ–Ω–∏–µ", callback_data="rec:more:cleanser:1")],
            [InlineKeyboardButton(text="üíß –¢–æ–Ω–∏–∫", callback_data="rec:more:toner:1")],
            [InlineKeyboardButton(text="‚ú® –°—ã–≤–æ—Ä–æ—Ç–∫–∏", callback_data="rec:more:serum:1")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:open")]
        ])

        await safe_edit_message_text(
            cb.message.chat.id,
            cb.message.message_id,
            text,
            reply_markup=keyboard
        )

        await cb.answer("üíÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")

    except Exception as e:
        logger.error(f"Error going back to recommendations: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data.startswith("cart:add:"))
async def handle_cart_add(cb: CallbackQuery):
    """Add item to cart from recommendations"""
    try:
        # Format: cart:add:<pid>:<vid>
        parts = cb.data.split(":")
        if len(parts) < 4:
            await cb.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            return

        product_id = parts[2]
        variant_id = parts[3] if parts[3] != "none" else None
        user_id = cb.from_user.id

        # Create cart item (mock data - should come from real catalog)
        item = CartItem(
            product_id=product_id,
            variant_id=variant_id,
            name=f"–ü—Ä–æ–¥—É–∫—Ç {product_id}",
            price=1990,  # 19.90 RUB
            currency="RUB",
            qty=1,
            source="goldapple",
            link=f"https://goldapple.ru/products/{product_id}",
            meta={"category": "skincare"}
        )

        # Validate item exists and is available
        # TODO: Check against real catalog

        # Add to cart
        cart = await cart_store.add(user_id, item)

        analytics.cart_item_added(user_id, product_id, variant_id or "", "goldapple", item.price / 100)

        await cb.answer(MSG_ADDED, show_alert=False)

    except Exception as e:
        logger.error(f"Error adding to cart: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", show_alert=True)

# Export router
__all__ = ["router"]
