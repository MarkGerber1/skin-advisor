"""
üìÑ PDF v2 Minimal - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ ASCII text –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
"""

import os
from typing import Dict, Any
from pathlib import Path
from fpdf import FPDF


def generate_minimal_pdf(uid: int, snapshot: Dict[str, Any]) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π PDF –æ—Ç—á–µ—Ç (—Ç–æ–ª—å–∫–æ ASCII)"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        user_dir = Path("data") / "reports" / str(uid)
        user_dir.mkdir(parents=True, exist_ok=True)

        pdf_path = user_dir / "last_v2_minimal.pdf"

        # –°–æ–∑–¥–∞–µ–º PDF
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.multi_cell(0, 10, "PERSONAL BEAUTY REPORT", align="C")
        pdf.ln(10)

        # –†–µ–∑—é–º–µ (ASCII —Ç–æ–ª—å–∫–æ)
        pdf.multi_cell(0, 6, "1. SUMMARY")
        pdf.ln(5)

        profile = snapshot.get("profile", {})
        result = snapshot.get("result", {})

        # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if profile.get("undertone"):
            pdf.multi_cell(0, 5, f"Undertone: {profile['undertone']}")

        if profile.get("season"):
            pdf.multi_cell(0, 5, f"Season: {profile['season']}")

        if profile.get("skin_type"):
            pdf.multi_cell(0, 5, f"Skin type: {profile['skin_type']}")

        pdf.ln(5)

        # –ü—Ä–æ–¥—É–∫—Ç—ã –º–∞–∫–∏—è–∂–∞
        if "makeup" in result:
            pdf.multi_cell(0, 6, "2. MAKEUP RECOMMENDATIONS")
            pdf.ln(3)

            product_count = 0
            for section, products in result["makeup"].items():
                for product in products[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–æ–¥—É–∫—Ç–∞
                    product_count += 1
                    name = product.get("name", "Product").encode("ascii", "ignore").decode("ascii")
                    brand = product.get("brand", "").encode("ascii", "ignore").decode("ascii")

                    product_text = (
                        f"{product_count}. {brand} - {name}"
                        if brand
                        else f"{product_count}. {name}"
                    )

                    # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã
                    if len(product_text) > 80:
                        product_text = product_text[:77] + "..."

                    pdf.multi_cell(0, 5, product_text)

                    # –¶–µ–Ω–∞
                    price = product.get("price")
                    if price:
                        pdf.multi_cell(0, 5, f"   Price: {price} RUB")

                    # –°—Ç–∞—Ç—É—Å
                    if not product.get("in_stock", True):
                        pdf.multi_cell(0, 5, "   Status: OUT OF STOCK")

                    pdf.ln(2)

        # –£—Ö–æ–¥ –∑–∞ –∫–æ–∂–µ–π
        if "skincare" in result:
            pdf.multi_cell(0, 6, "3. SKINCARE ROUTINE")
            pdf.ln(3)

            routine_count = 0
            for routine_type, products in result["skincare"].items():
                if products:
                    routine_count += 1
                    routine_name = routine_type.replace("AM", "Morning").replace("PM", "Evening")
                    pdf.multi_cell(0, 5, f"3.{routine_count}. {routine_name} routine:")

                    for product in products[:2]:
                        name = (
                            product.get("name", "Product").encode("ascii", "ignore").decode("ascii")
                        )
                        brand = product.get("brand", "").encode("ascii", "ignore").decode("ascii")

                        product_text = f"  - {brand} {name}" if brand else f"  - {name}"

                        # –û–±—Ä–µ–∑–∞–µ–º –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–ª–∏–Ω—ã
                        if len(product_text) > 80:
                            product_text = product_text[:77] + "..."

                        pdf.multi_cell(0, 5, product_text)

                    pdf.ln(2)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        pdf.multi_cell(0, 6, "4. STATISTICS")
        pdf.ln(3)

        total_makeup = sum(len(products) for products in result.get("makeup", {}).values())
        total_skincare = sum(len(products) for products in result.get("skincare", {}).values())

        pdf.multi_cell(0, 5, f"Total makeup products: {total_makeup}")
        pdf.multi_cell(0, 5, f"Total skincare products: {total_skincare}")

        # –§—É—Ç–µ—Ä
        pdf.ln(10)
        pdf.multi_cell(0, 5, "Generated by Skin Advisor Bot", align="C")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        pdf.output(str(pdf_path))
        print(f"‚úÖ Generated minimal PDF for user {uid}: {pdf_path}")

        return str(pdf_path)

    except Exception as e:
        print(f"‚ùå Error generating minimal PDF for user {uid}: {e}")
        return ""


if __name__ == "__main__":
    # –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    print("üìÑ MINIMAL PDF GENERATOR TEST")
    print("=" * 40)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_snapshot = {
        "type": "detailed_palette",
        "profile": {"user_id": 12345, "undertone": "warm", "season": "autumn", "skin_type": "dry"},
        "result": {
            "makeup": {
                "base": [
                    {
                        "name": "Perfect Foundation",
                        "brand": "Test Brand",
                        "price": 1500,
                        "in_stock": True,
                    }
                ]
            },
            "skincare": {
                "AM": [
                    {
                        "name": "Gentle Cleanser",
                        "brand": "Test Brand",
                        "price": 1200,
                        "in_stock": True,
                    }
                ]
            },
        },
    }

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    pdf_path = generate_minimal_pdf(999, test_snapshot)

    if pdf_path and os.path.exists(pdf_path):
        file_size = os.path.getsize(pdf_path)
        print(f"‚úÖ Test PDF generated: {pdf_path}")
        print(f"üìä File size: {file_size} bytes")
        print("‚úÖ Minimal PDF generator working!")
    else:
        print("‚ùå Minimal PDF generation failed")
