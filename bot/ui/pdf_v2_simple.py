"""
üìÑ PDF v2 Simple - –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π, –Ω–æ —Ä–∞–±–æ—á–∏–π PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –†–µ–∑—é–º–µ ‚Üí –ü—Ä–æ–¥—É–∫—Ç—ã ‚Üí –¢–∞–±–ª–∏—Ü–∞
"""

import os
from typing import Dict, Any, Optional
from pathlib import Path
from fpdf import FPDF
import re


class SimplePDFGenerator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é"""

    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.font_size_title = 16
        self.font_size_section = 12
        self.font_size_text = 10

        # –û—Ç—Å—Ç—É–ø—ã (–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        self.margin = 20
        self.line_height = 6

        # Emoji mapping
        self.emoji_map = {
            "üé®": "[–ü–ê–õ–ò–¢–†–ê]",
            "üß¥": "[–£–•–û–î]",
            "‚ú®": "*",
            "üå∏": "[–í–ï–°–ù–ê]",
            "üåä": "[–õ–ï–¢–û]",
            "üçÇ": "[–û–°–ï–ù–¨]",
            "‚ùÑÔ∏è": "[–ó–ò–ú–ê]",
            "üíÑ": "[–ú–ê–ö–ò–Ø–ñ]",
            "üëÅÔ∏è": "[–ì–õ–ê–ó–ê]",
            "üí°": "!",
            "üî•": "*",
            "‚ùå": "X",
            "‚úÖ": "OK",
        }

    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è PDF"""
        if not text:
            return ""

        # –ó–∞–º–µ–Ω—è–µ–º emoji
        for emoji, replacement in self.emoji_map.items():
            text = text.replace(emoji, replacement)

        # –£–¥–∞–ª—è–µ–º markdown
        text = re.sub(r"\*\*(.*?)\*\*", r"\1", text)
        text = re.sub(r"\*(.*?)\*", r"\1", text)

        # –£–¥–∞–ª—è–µ–º unicode
        text = re.sub(r"[^\x00-\x7F\u0400-\u04FF]+", "", text)

        return text.strip()

    def generate_pdf(self, uid: int, snapshot: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            user_dir = Path("data") / "reports" / str(uid)
            user_dir.mkdir(parents=True, exist_ok=True)

            pdf_path = user_dir / "last_v2_simple.pdf"

            # –°–æ–∑–¥–∞–µ–º PDF
            pdf = FPDF()
            pdf.add_page()
            pdf.set_margins(self.margin, self.margin, self.margin)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
            try:
                # –ò—â–µ–º DejaVu —à—Ä–∏—Ñ—Ç
                font_paths = [
                    # Docker —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏ (–Ω–æ–≤—ã–µ)
                    "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf",
                    "/usr/share/fonts/dejavu/DejaVuSans.ttf",
                    "/usr/share/fonts-dejavu-core/DejaVuSans.ttf",
                    "/usr/share/fonts-dejavu/DejaVuSans.ttf",
                    # Docker —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ)
                    "/usr/share/fonts/TTF/DejaVuSans.ttf",
                    "/usr/share/fonts/truetype/ttf-dejavu/DejaVuSans.ttf",
                    # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏
                    "assets/fonts/DejaVuSans.ttf",
                    os.path.join(
                        os.path.dirname(__file__), "..", "..", "assets", "fonts", "DejaVuSans.ttf"
                    ),
                    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—É—Ç–∏ Windows
                    "C:/Windows/Fonts/DejaVuSans.ttf",
                    # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø—É—Ç–∏
                    ".skin-advisor/assets/DejaVuSans.ttf",
                ]

                font_found = False
                noto_found = False

                # –ò—â–µ–º DejaVu
                for font_path in font_paths:
                    if os.path.exists(font_path):
                        try:
                            pdf.add_font("DejaVu", "", font_path)
                            pdf.set_font("DejaVu", size=self.font_size_text)
                            font_found = True
                            print(f"‚úÖ Simple PDF: Using DejaVu font from: {font_path}")
                            break
                        except Exception as e:
                            print(f"‚ö†Ô∏è Simple PDF: Failed to load DejaVu from {font_path}: {e}")

                # –ï—Å–ª–∏ DejaVu –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º Noto Sans
                if not font_found:
                    noto_paths = [
                        "/usr/share/fonts/truetype/noto/NotoSans-Regular.ttf",
                        "/usr/share/fonts/noto/NotoSans-Regular.ttf",
                        "/usr/share/fonts/opentype/noto/NotoSans-Regular.ttf",
                        "assets/fonts/NotoSans-Regular.ttf",
                        os.path.join(
                            os.path.dirname(__file__),
                            "..",
                            "..",
                            "assets",
                            "fonts",
                            "NotoSans-Regular.ttf",
                        ),
                    ]

                    for noto_path in noto_paths:
                        if os.path.exists(noto_path):
                            try:
                                pdf.add_font("NotoSans", "", noto_path)
                                pdf.set_font("NotoSans", size=self.font_size_text)
                                noto_found = True
                                print(f"‚úÖ Simple PDF: Using Noto Sans font from: {noto_path}")
                                break
                            except Exception as e:
                                print(f"‚ö†Ô∏è Simple PDF: Failed to load Noto from {noto_path}: {e}")

                # –í—ã–±–∏—Ä–∞–µ–º —à—Ä–∏—Ñ—Ç
                if font_found:
                    pdf.set_font("DejaVu", size=self.font_size_text)
                elif noto_found:
                    pdf.set_font("NotoSans", size=self.font_size_text)
                else:
                    pdf.set_font("Arial", size=self.font_size_text)
                    print("‚ö†Ô∏è Simple PDF: Using Arial fallback (limited Cyrillic support)")

            except Exception as e:
                print(f"‚ö†Ô∏è Simple PDF: Font error: {e}, using Arial")
                pdf.set_font("Arial", size=self.font_size_text)

            # –î–∞–Ω–Ω—ã–µ
            report_type = snapshot.get("type", "report")
            profile = snapshot.get("profile", {})
            result = snapshot.get("result", {})

            # 1. –ó–ê–ì–û–õ–û–í–û–ö
            pdf.set_font_size(self.font_size_title)
            title_map = {
                "detailed_palette": "–û–¢–ß–ï–¢ –ü–û –¶–í–ï–¢–û–¢–ò–ü–£",
                "palette": "–û–¢–ß–ï–¢ –ü–û –ü–ê–õ–ò–¢–†–ï",
                "detailed_skincare": "–ü–û–†–¢–†–ï–¢ –õ–ò–¶–ê",
                "skincare": "–£–•–û–î –ó–ê –ö–û–ñ–ï–ô",
            }
            title = self._clean_text(title_map.get(report_type, "–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢"))

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º multi_cell –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            pdf.multi_cell(0, 10, title, align="C")
            pdf.ln(10)

            # 2. –†–ï–ó–Æ–ú–ï
            pdf.set_font_size(self.font_size_section)
            pdf.multi_cell(0, 8, "1. –†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê")
            pdf.ln(5)

            pdf.set_font_size(self.font_size_text)

            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            summary_parts = []

            if profile.get("undertone"):
                summary_parts.append(f"–ü–æ–¥—Ç–æ–Ω –ª–∏—Ü–∞: {profile['undertone']}")

            if profile.get("season"):
                season_names = {
                    "spring": "–Ø—Ä–∫–∞—è –í–µ—Å–Ω–∞",
                    "summer": "–ú—è–≥–∫–æ–µ –õ–µ—Ç–æ",
                    "autumn": "–ì–ª—É–±–æ–∫–∞—è –û—Å–µ–Ω—å",
                    "winter": "–•–æ–ª–æ–¥–Ω–∞—è –ó–∏–º–∞",
                }
                summary_parts.append(
                    f"–¶–≤–µ—Ç–æ—Ç–∏–ø: {season_names.get(profile['season'], profile['season'])}"
                )

            if profile.get("contrast"):
                summary_parts.append(f"–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: {profile['contrast']}")

            if profile.get("skin_type"):
                summary_parts.append(f"–¢–∏–ø –ª–∏—Ü–∞: {profile['skin_type']}")

            if profile.get("concerns"):
                concerns = ", ".join(profile["concerns"])
                summary_parts.append(f"–ü—Ä–æ–±–ª–µ–º—ã: {concerns}")

            if summary_parts:
                summary_text = self._clean_text(". ".join(summary_parts) + ".")
                pdf.multi_cell(0, self.line_height, summary_text)
                pdf.ln(5)

            # 3. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ê–ö–ò–Ø–ñ–£
            if "makeup" in result and result["makeup"]:
                pdf.set_font_size(self.font_size_section)
                pdf.multi_cell(0, 8, "2. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ê–ö–ò–Ø–ñ–£")
                pdf.ln(5)

                pdf.set_font_size(self.font_size_text)

                product_count = 0
                for section_name, products in result["makeup"].items():
                    if products:
                        section_title = {
                            "base": "–ë–∞–∑–æ–≤—ã–π –º–∞–∫–∏—è–∂",
                            "face": "–°–∫—É–ª—å–ø—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ",
                            "eyes": "–ú–∞–∫–∏—è–∂ –≥–ª–∞–∑",
                            "lips": "–ú–∞–∫–∏—è–∂ –≥—É–±",
                        }.get(section_name, section_name.title())

                        pdf.multi_cell(
                            0, self.line_height, f"2.{product_count + 1}. {section_title}:"
                        )
                        pdf.ln(2)

                        for product in products[:2]:  # –ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Å–µ–∫—Ü–∏—é
                            product_name = self._clean_text(product.get("name", "–ü—Ä–æ–¥—É–∫—Ç"))
                            brand = self._clean_text(product.get("brand", ""))

                            if brand:
                                product_text = f"‚Ä¢ {brand} - {product_name}"
                            else:
                                product_text = f"‚Ä¢ {product_name}"

                            # –¶–µ–Ω–∞
                            price = product.get("price")
                            if price:
                                currency = product.get("price_currency", "RUB")
                                product_text += f" ({price} {currency})"

                            # –°—Ç–∞—Ç—É—Å
                            if not product.get("in_stock", True):
                                product_text += " [–ù–ï–¢ –í –ù–ê–õ–ò–ß–ò–ò]"

                            pdf.multi_cell(0, self.line_height, product_text)

                            # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
                            explain = product.get("explain", "")
                            if explain:
                                explain_text = f"  –ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {self._clean_text(explain)}"
                                pdf.multi_cell(0, self.line_height, explain_text)

                            pdf.ln(2)

                        product_count += 1

                pdf.ln(5)

            # 4. –ü–†–û–ì–†–ê–ú–ú–ê –£–•–û–î–ê
            if "skincare" in result and result["skincare"]:
                pdf.set_font_size(self.font_size_section)
                pdf.multi_cell(0, 8, "3. –ü–†–û–ì–†–ê–ú–ú–ê –£–•–û–î–ê –ó–ê –ö–û–ñ–ï–ô")
                pdf.ln(5)

                pdf.set_font_size(self.font_size_text)

                routine_names = {
                    "AM": "–£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥",
                    "PM": "–í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥",
                    "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —É—Ö–æ–¥",
                }

                routine_count = 1
                for routine_type, products in result["skincare"].items():
                    if products:
                        routine_title = routine_names.get(routine_type, routine_type)
                        pdf.multi_cell(0, self.line_height, f"3.{routine_count}. {routine_title}:")
                        pdf.ln(2)

                        for product in products[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ routine
                            product_name = self._clean_text(product.get("name", "–°—Ä–µ–¥—Å—Ç–≤–æ"))
                            brand = self._clean_text(product.get("brand", ""))

                            if brand:
                                product_text = f"‚Ä¢ {brand} - {product_name}"
                            else:
                                product_text = f"‚Ä¢ {product_name}"

                            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                            actives = product.get("actives", [])
                            if actives:
                                product_text += f" (–∞–∫—Ç–∏–≤—ã: {', '.join(actives)})"

                            pdf.multi_cell(0, self.line_height, product_text)

                            # –≠—Ñ—Ñ–µ–∫—Ç
                            explain = product.get("explain", "")
                            if explain:
                                explain_text = f"  –≠—Ñ—Ñ–µ–∫—Ç: {self._clean_text(explain)}"
                                pdf.multi_cell(0, self.line_height, explain_text)

                            pdf.ln(2)

                        routine_count += 1

                pdf.ln(5)

            # 5. –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            pdf.set_font_size(self.font_size_section)
            pdf.multi_cell(0, 8, "4. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
            pdf.ln(5)

            pdf.set_font_size(self.font_size_text)

            stats = []
            if "makeup" in result:
                makeup_count = sum(len(products) for products in result["makeup"].values())
                stats.append(f"–ü—Ä–æ–¥—É–∫—Ç–æ–≤ –º–∞–∫–∏—è–∂–∞: {makeup_count}")

            if "skincare" in result:
                skincare_count = sum(len(products) for products in result["skincare"].values())
                stats.append(f"–°—Ä–µ–¥—Å—Ç–≤ —É—Ö–æ–¥–∞: {skincare_count}")

            # –ü–æ–¥—Å—á–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
            total_products = 0
            in_stock_products = 0

            for category in ["makeup", "skincare"]:
                if category in result:
                    for section, products in result[category].items():
                        for product in products:
                            total_products += 1
                            if product.get("in_stock", True):
                                in_stock_products += 1

            if total_products > 0:
                in_stock_percent = (in_stock_products / total_products) * 100
                stats.append(
                    f"–í –Ω–∞–ª–∏—á–∏–∏: {in_stock_products}/{total_products} ({in_stock_percent:.0f}%)"
                )

            for stat in stats:
                pdf.multi_cell(0, self.line_height, f"‚Ä¢ {stat}")

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            pdf.output(str(pdf_path))
            print(f"‚úÖ Generated simple PDF v2 for user {uid}: {pdf_path}")

            return str(pdf_path)

        except Exception as e:
            print(f"‚ùå Error generating simple PDF for user {uid}: {e}")
            return ""


def generate_simple_pdf_report(uid: int, snapshot: Dict[str, Any]) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ PDF"""
    generator = SimplePDFGenerator()
    return generator.generate_pdf(uid, snapshot)


if __name__ == "__main__":
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    print("üìÑ SIMPLE PDF V2 GENERATOR TEST")
    print("=" * 50)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_snapshot = {
        "type": "detailed_palette",
        "profile": {
            "user_id": 12345,
            "undertone": "warm",
            "season": "autumn",
            "contrast": "medium",
            "skin_type": "dry",
        },
        "result": {
            "makeup": {
                "base": [
                    {
                        "name": "Perfect Foundation",
                        "brand": "Test Brand",
                        "category": "foundation",
                        "price": 1500,
                        "price_currency": "RUB",
                        "in_stock": True,
                        "explain": "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ø–ª–æ–≥–æ –ø–æ–¥—Ç–æ–Ω–∞",
                    }
                ],
                "face": [
                    {
                        "name": "Warm Blush",
                        "brand": "Test Brand",
                        "category": "blush",
                        "price": 800,
                        "in_stock": True,
                        "explain": "–ø–æ–¥—á–µ—Ä–∫–Ω–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É–º—è–Ω–µ—Ü",
                    }
                ],
            },
            "skincare": {
                "AM": [
                    {
                        "name": "Gentle Cleanser",
                        "brand": "Test Brand",
                        "category": "cleanser",
                        "price": 1200,
                        "in_stock": True,
                        "actives": ["–≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"],
                        "explain": "–º—è–≥–∫–æ –æ—á–∏—â–∞–µ—Ç —Å—É—Ö—É—é –∫–æ–∂—É",
                    }
                ]
            },
        },
    }

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    generator = SimplePDFGenerator()
    pdf_path = generator.generate_pdf(999, test_snapshot)

    if pdf_path and os.path.exists(pdf_path):
        file_size = os.path.getsize(pdf_path)
        print(f"‚úÖ Test PDF generated: {pdf_path}")
        print(f"üìä File size: {file_size} bytes")
        print("‚úÖ Simple PDF v2 generator working correctly!")
    else:
        print("‚ùå Simple PDF generation failed")
