"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ—Å—Ç-—Ç–µ—Å—Ç–æ–≤–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–µ—Å—Ç–∞
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Optional


def create_post_test_navigation(
    test_type: str,  # "palette" –∏–ª–∏ "skincare"
    current_screen: Optional[str] = None,  # "description", "recommendations", "products", "cart"
    show_cart: bool = True,
    cart_count: int = 0
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è –ø–æ—Å—Ç-—Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    Args:
        test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ ("palette" –∏–ª–∏ "skincare")
        current_screen: –¢–µ–∫—É—â–∏–π —ç–∫—Ä–∞–Ω –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        show_cart: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã
        cart_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ

    Returns:
        InlineKeyboardMarkup —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    """
    prefix = "pl:" if test_type == "palette" else "sk:"

    buttons = []

    # –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    nav_row = []

    # –û–ø–∏—Å–∞–Ω–∏–µ
    desc_text = "üìã –û–ø–∏—Å–∞–Ω–∏–µ" if current_screen != "description" else "üìã –û–ø–∏—Å–∞–Ω–∏–µ ‚úì"
    nav_row.append(InlineKeyboardButton(
        text=desc_text,
        callback_data=f"{prefix}nav:description"
    ))

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    rec_text = "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏" if current_screen != "recommendations" else "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚úì"
    nav_row.append(InlineKeyboardButton(
        text=rec_text,
        callback_data=f"{prefix}nav:recommendations"
    ))

    buttons.append(nav_row)

    # –ß—Ç–æ –∫—É–ø–∏—Ç—å
    buy_text = "üõçÔ∏è –ß—Ç–æ –∫—É–ø–∏—Ç—å" if current_screen != "products" else "üõçÔ∏è –ß—Ç–æ –∫—É–ø–∏—Ç—å ‚úì"
    buttons.append([InlineKeyboardButton(
        text=buy_text,
        callback_data=f"{prefix}nav:products"
    )])

    # –ö–æ—Ä–∑–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å)
    if show_cart or cart_count > 0:
        cart_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})" if cart_count > 0 else "üõí –ö–æ—Ä–∑–∏–Ω–∞"
        if current_screen == "cart":
            cart_text += " ‚úì"
        buttons.append([InlineKeyboardButton(
            text=cart_text,
            callback_data="show_cart"
        )])

    # –í –º–µ–Ω—é
    buttons.append([InlineKeyboardButton(
        text="‚§¥Ô∏è –í –º–µ–Ω—é",
        callback_data="universal:home"
    )])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def create_product_buttons(
    test_type: str,
    product_id: str,
    has_ref_link: bool = False,
    in_cart: bool = False,
    variant_id: Optional[str] = None
) -> List[List[InlineKeyboardButton]]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: "–í –∫–æ—Ä–∑–∏–Ω—É" –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ "–ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ"

    Args:
        test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ –¥–ª—è –ø—Ä–µ—Ñ–∏–∫—Å–∞
        product_id: ID —Ç–æ–≤–∞—Ä–∞
        has_ref_link: –ï—Å—Ç—å –ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞
        in_cart: –¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        variant_id: ID –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Ç–æ–≤–∞—Ä–∞

    Returns:
        –°–ø–∏—Å–æ–∫ —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫
    """
    buttons = []

    # –ö–Ω–æ–ø–∫–∞ "–í –∫–æ—Ä–∑–∏–Ω—É"
    cart_callback = f"c:add:{product_id}:{variant_id or 'default'}"
    cart_text = "‚úì –í –∫–æ—Ä–∑–∏–Ω–µ" if in_cart else "üõí –í –∫–æ—Ä–∑–∏–Ω—É"

    if has_ref_link:
        # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        buttons.append([
            InlineKeyboardButton(text=cart_text, callback_data=cart_callback),
            InlineKeyboardButton(text="üåê –ö—É–ø–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", callback_data=f"buy:{product_id}")
        ])
    else:
        # –¢–æ–ª—å–∫–æ –∫–æ—Ä–∑–∏–Ω–∞
        buttons.append([InlineKeyboardButton(text=cart_text, callback_data=cart_callback)])

    return buttons


def create_cart_controls(
    item_count: int,
    total_price: float,
    currency: str = "RUB"
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π

    Args:
        item_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
        total_price: –û–±—â–∞—è —Å—É–º–º–∞
        currency: –í–∞–ª—é—Ç–∞

    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
    """
    buttons = []

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—Ä–∑–∏–Ω–µ
    if item_count > 0:
        price_text = f"{total_price:.0f} ‚ÇΩ" if currency == "RUB" else f"${total_price:.0f}"
        buttons.append([InlineKeyboardButton(
            text=f"üìä –ò—Ç–æ–≥–æ: {price_text} ({item_count} —à—Ç.)",
            callback_data="cart_info"
        )])

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ cart handler)
    buttons.append([
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="cart:add_item"),
        InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="cart:clear")
    ])

    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    buttons.append([InlineKeyboardButton(
        text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
        callback_data="cart:checkout"
    )])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data="nav:back_to_products"
    )])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
PALETTE_NAV = create_post_test_navigation("palette")
SKINCARE_NAV = create_post_test_navigation("skincare")
