from __future__ import annotations

from typing import Dict, List, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def _add_to_cart_button(item: Dict) -> InlineKeyboardButton | None:
    pid = item.get("id")
    if not pid:
        return None
    return InlineKeyboardButton(
        text=f"‚ûï –í –∫–æ—Ä–∑–∏–Ω—É: {item.get('brand','')} {item.get('name','')}",
        callback_data=f"cart:add:{pid}",
    )


def _price_row(it: Dict) -> str:
    value = int(it.get("price") or 0)
    currency = it.get("price_currency") or "‚ÇΩ"
    # –í —Ç–µ—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª ‚ÇΩ —Ä—è–¥–æ–º —Å —á–∏—Å–ª–æ–º
    if currency in ("RUB", "‚ÇΩ"):
        return f"{value} ‚ÇΩ"
    return f"{value} {currency}"


def _rows(items: List[Dict]) -> List[str]:
    lines: List[str] = []
    for it in items:
        lines.append(f"‚Äî {it.get('brand','')} {it.get('name','')} ‚Äî {_price_row(it)}")
    return lines


def _noop_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="noop")]])


def render_skincare_report(result: Dict) -> Tuple[str, InlineKeyboardMarkup]:
    s = result.get("skincare", {})
    am = s.get("AM", [])
    pm = s.get("PM", [])
    wk = s.get("weekly", [])

    text_lines: List[str] = [
        "üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥",
        "",
        "AM:",
        *(_rows(am) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "PM:",
        *(_rows(pm) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "Weekly:",
        *(_rows(wk) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
    ]

    links = [*(am or []), *(pm or []), *(wk or [])]
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤–æ–æ–±—â–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ noop-–∫–Ω–æ–ø–∫—É
    if not any(bool(it.get("ref_link")) for it in links):
        return "\n".join(text_lines), _noop_keyboard()

    buttons: List[List[InlineKeyboardButton]] = []
    for it in links[:5]:
        atc = _add_to_cart_button(it)
        if atc:
            buttons.append([atc])
        if it.get("ref_link"):
            buttons.append([InlineKeyboardButton(text=f"üõí {it['brand']} {it['name']}", url=it["ref_link"])])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return "\n".join(text_lines), kb


def render_makeup_report(result: Dict) -> Tuple[str, InlineKeyboardMarkup]:
    m = result.get("makeup", {})
    face = m.get("face", [])
    brows = m.get("brows", [])
    eyes = m.get("eyes", [])
    lips = m.get("lips", [])

    text_lines: List[str] = [
        "üé® –ú–∞–∫–∏—è–∂ –ø–æ –ø–∞–ª–∏—Ç—Ä–µ",
        "",
        "–õ–∏—Ü–æ:",
        *(_rows(face) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "–ë—Ä–æ–≤–∏:",
        *(_rows(brows) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "–ì–ª–∞–∑–∞:",
        *(_rows(eyes) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "–ì—É–±—ã:",
        *(_rows(lips) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
    ]

    links = [*(face or []), *(brows or []), *(eyes or []), *(lips or [])]
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ noop-–∫–Ω–æ–ø–∫—É
    if not any(bool(it.get("ref_link")) for it in links):
        return "\n".join(text_lines), _noop_keyboard()

    buttons: List[List[InlineKeyboardButton]] = []
    for it in links[:5]:
        atc = _add_to_cart_button(it)
        if atc:
            buttons.append([atc])
        if it.get("ref_link"):
            buttons.append([InlineKeyboardButton(text=f"üõí {it['brand']} {it['name']}", url=it["ref_link"])])

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return "\n".join(text_lines), kb







