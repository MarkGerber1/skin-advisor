from __future__ import annotations

from typing import Dict, List, Tuple
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton


def _add_to_cart_button(item: Dict) -> InlineKeyboardButton | None:
    pid = item.get("id")
    if not pid:
        return None
    return InlineKeyboardButton(
        text=f"‚ûï –í –∫–æ—Ä–∑–∏–Ω—É: {item.get('brand','')} {item.get('name','')}",
        callback_data=f"cart:add:{pid}",
    )


def _price_row(it: Dict) -> str:
    value = int(it.get("price") or 0)
    currency = it.get("price_currency") or "‚ÇΩ"
    # –í —Ç–µ—Å—Ç–∞—Ö –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–∏–º–≤–æ–ª ‚ÇΩ —Ä—è–¥–æ–º —Å —á–∏—Å–ª–æ–º
    if currency in ("RUB", "‚ÇΩ"):
        return f"{value} ‚ÇΩ"
    return f"{value} {currency}"


def _rows(items: List[Dict]) -> List[str]:
    lines: List[str] = []
    for it in items:
        lines.append(f"‚Äî {it.get('brand','')} {it.get('name','')} ‚Äî {_price_row(it)}")
    return lines


def _noop_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="noop")]]
    )


def render_skincare_report(result: Dict) -> Tuple[str, InlineKeyboardMarkup]:
    print(f"üß¥ render_skincare_report called with result keys: {list(result.keys())}")
    s = result.get("skincare", {})
    print(f"üß¥ Skincare data keys: {list(s.keys()) if s else 'No skincare data'}")
    
    # CRITICAL FIX: Use RUSSIAN keys that actually come from SelectorV2
    # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —Å —Ä—É—Å—Å–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
    cleanser = s.get("–æ—á–∏—â–∞—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ", [])
    toner = s.get("—Ç–æ–Ω–∏–∫", [])
    serum = s.get("—Å—ã–≤–æ—Ä–æ—Ç–∫–∞", [])
    moisturizer = s.get("—É–≤–ª–∞–∂–Ω—è—é—â–µ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ", [])
    eye_cream = s.get("–∫—Ä–µ–º –¥–ª—è –∫–æ–∂–∏ –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑", [])
    sunscreen = s.get("—Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º", [])
    mask = s.get("–º–∞—Å–∫–∞", [])
    
    print(f"üß¥ Found products: cleanser={len(cleanser)}, toner={len(toner)}, serum={len(serum)}, moisturizer={len(moisturizer)}, eye_cream={len(eye_cream)}, sunscreen={len(sunscreen)}, mask={len(mask)}")
    
    # Organize into AM/PM/Weekly for display
    am = cleanser + toner + serum + moisturizer + sunscreen  # Morning routine
    pm = cleanser + serum + moisturizer + eye_cream  # Evening routine  
    wk = mask  # Weekly treatments

    text_lines: List[str] = [
        "üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥",
        "",
        "AM:",
        *(_rows(am) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "PM:",
        *(_rows(pm) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "Weekly:",
        *(_rows(wk) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
    ]

    links = [*(am or []), *(pm or []), *(wk or [])]
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤–æ–æ–±—â–µ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ noop-–∫–Ω–æ–ø–∫—É
    if not any(bool(it.get("ref_link")) for it in links):
        return "\n".join(text_lines), _noop_keyboard()

    buttons: List[List[InlineKeyboardButton]] = []
    for it in links[:5]:
        atc = _add_to_cart_button(it)
        if atc:
            buttons.append([atc])
        if it.get("ref_link"):
            buttons.append(
                [InlineKeyboardButton(text=f"üõí {it['brand']} {it['name']}", url=it["ref_link"])]
            )

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return "\n".join(text_lines), kb


def render_makeup_report(result: Dict) -> Tuple[str, InlineKeyboardMarkup]:
    print(f"üé® render_makeup_report called with result keys: {list(result.keys())}")
    m = result.get("makeup", {})
    print(f"üíÑ Makeup data keys: {list(m.keys()) if m else 'No makeup data'}")
    
    # CRITICAL DEBUG: Show all makeup categories and their content counts
    if m:
        print("üîç DETAILED MAKEUP ANALYSIS:")
        for key, products in m.items():
            count = len(products) if products else 0
            print(f"  üì¶ EXACT KEY '{key}': {count} products")
            if products and count > 0:
                print(f"      First product: {products[0].get('name', 'No name')}")
        
        # CRITICAL: Let's use the ACTUAL keys that exist in the data
        print("üéØ USING ACTUAL KEYS FROM SELECTOR:")
        actual_keys = list(m.keys())
        print(f"Available keys: {actual_keys}")
    else:
        print("‚ùå No makeup data to analyze")
    
    # Map SelectorV2 categories to display groups
    # CRITICAL: SelectorV2 returns in CAPITALIZED keys: "–¢–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–º", "–ë—Ä–æ–≤–∏", "–ü–æ–º–∞–¥–∞", "–¢—É—à—å", "–¢–µ–Ω–∏ –¥–ª—è –≤–µ–∫"
    face_categories = ['–æ—Å–Ω–æ–≤–∞', '–∫–æ–Ω—Å–∏–ª–µ—Ä', '–∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä', '–ø—É–¥—Ä–∞', '—Ä—É–º—è–Ω–∞', '–±—Ä–æ–Ω–∑–∞—Ç–æ—Ä', '–∫–æ–Ω—Ç—É—Ä', '—Ö–∞–π–ª–∞–π—Ç–µ—Ä', '–¢–æ–Ω–∞–ª—å–Ω—ã–π –∫—Ä–µ–º']
    brows_categories = ['–±—Ä–æ–≤–∏', '–ë—Ä–æ–≤–∏']  
    eyes_categories = ['—Ç—É—à—å –¥–ª—è —Ä–µ—Å–Ω–∏—Ü', '–¢–µ–Ω–∏ –¥–ª—è –≤–µ–∫', '–ø–æ–¥–≤–æ–¥–∫–∞ –¥–ª—è –≥–ª–∞–∑', '–¢—É—à—å']
    lips_categories = ['–ø–æ–º–∞–¥–∞', '–±–ª–µ—Å–∫ –¥–ª—è –≥—É–±', 'lip_liner', '–ü–æ–º–∞–¥–∞']
    
    print(f"üîç Looking for face categories: {face_categories}")
    print(f"üîç Looking for brows categories: {brows_categories}")
    print(f"üîç Looking for eyes categories: {eyes_categories}")
    print(f"üîç Looking for lips categories: {lips_categories}")
    
    # SIMPLIFIED: Just use ALL available products from makeup data
    face = []
    brows = []
    eyes = []
    lips = []
    
    # If we have makeup data, distribute all products to appropriate categories
    if m:
        print("üéØ SIMPLIFIED APPROACH: Using all available makeup products")
        all_makeup_products = []
        for key, products in m.items():
            if products:
                print(f"üì¶ Adding {len(products)} products from '{key}'")
                all_makeup_products.extend(products)
        
        # Distribute products based on their category field
        for product in all_makeup_products:
            category = str(product.get('category', '')).lower()
            print(f"üîç Product category: '{category}' -> {product.get('name', 'No name')}")
            
            # Face products
            if any(term in category for term in ['—Ç–æ–Ω–∞–ª—å–Ω', '–æ—Å–Ω–æ–≤', '–∫–æ–Ω—Å–∏–ª', '–ø—É–¥—Ä', '—Ä—É–º—è–Ω', 'foundation', 'concealer', 'powder', 'blush']):
                face.append(product)
            # Brow products  
            elif any(term in category for term in ['–±—Ä–æ–≤', 'eyebrow', 'brow']):
                brows.append(product)
            # Eye products
            elif any(term in category for term in ['—Ç—É—à—å', '—Ç–µ–Ω–∏', '–ø–æ–¥–≤–æ–¥–∫', 'mascara', 'eyeshadow', 'eyeliner']):
                eyes.append(product)
            # Lip products
            elif any(term in category for term in ['–ø–æ–º–∞–¥', '–±–ª–µ—Å–∫', 'lipstick', 'lip']):
                lips.append(product)
            else:
                # Default to face if category unclear
                face.append(product)
    
    # Products already distributed above in the simplified approach
    
    print(f"üõçÔ∏è Products count: face={len(face)}, brows={len(brows)}, eyes={len(eyes)}, lips={len(lips)}")

    text_lines: List[str] = [
        "üé® –ú–∞–∫–∏—è–∂ –ø–æ –ø–∞–ª–∏—Ç—Ä–µ",
        "",
        "–õ–∏—Ü–æ:",
        *(_rows(face) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "–ë—Ä–æ–≤–∏:",
        *(_rows(brows) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "–ì–ª–∞–∑–∞:",
        *(_rows(eyes) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
        "",
        "–ì—É–±—ã:",
        *(_rows(lips) or ["‚Äî –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"]),
    ]

    links = [*(face or []), *(brows or []), *(eyes or []), *(lips or [])]
    print(f"üîó Total links found: {len(links)}")
    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ noop-–∫–Ω–æ–ø–∫—É
    ref_links_count = sum(1 for it in links if bool(it.get("ref_link")))
    print(f"üåê Products with ref_link: {ref_links_count}")
    if not any(bool(it.get("ref_link")) for it in links):
        print("‚ö†Ô∏è No ref_links found, returning noop keyboard")
        return "\n".join(text_lines), _noop_keyboard()

    buttons: List[List[InlineKeyboardButton]] = []
    for it in links[:5]:
        atc = _add_to_cart_button(it)
        if atc:
            buttons.append([atc])
        if it.get("ref_link"):
            buttons.append(
                [InlineKeyboardButton(text=f"üõí {it['brand']} {it['name']}", url=it["ref_link"])]
            )

    kb = InlineKeyboardMarkup(inline_keyboard=buttons)
    return "\n".join(text_lines), kb
