"""
Report Builder - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –æ—Ç—á—ë—Ç–∞ –∏ —Ä–µ–Ω–¥–µ—Ä—ã –¥–ª—è Telegram –∏ PDF.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1) –ó–∞–≥–æ–ª–æ–≤–æ–∫
2) –û–ø–∏—Å–∞–Ω–∏–µ
3) –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4) –ß—Ç–æ –∫—É–ø–∏—Ç—å (—Ç–æ–≤–∞—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –í –∫–æ—Ä–∑–∏–Ω—É)
5) –°–æ–≤–µ—Ç—ã
6) –î–µ–π—Å—Ç–≤–∏—è (–∫–Ω–æ–ø–∫–∏)
"""

from __future__ import annotations

from dataclasses import dataclass
from typing import Any, Dict, List, Tuple, Optional
import json
from pathlib import Path

from bot.utils.security import sanitize_message


@dataclass
class ReportBlocks:
    title: str
    description: str
    recommendations: Dict[str, List[str]]  # keys: morning/evening or sections
    to_buy: List[Dict[str, Any]]  # items with id, name, price, variant_id?
    tips: List[str]


def _plain(text: str) -> str:
    return sanitize_message(text or "")


def build_palette_report(profile: Dict[str, Any], picks: Dict[str, Any]) -> ReportBlocks:
    title = _plain("–û—Ç—á—ë—Ç –ø–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø—É –∏ –ø–∞–ª–∏—Ç—Ä–µ")
    description = _plain(
        f"–í–∞—à —Å–µ–∑–æ–Ω: {profile.get('season', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}. –ü–æ–¥—Ç–æ–Ω: {profile.get('undertone', '‚Äî')}"
    )
    recos = {
        "tones": [_plain(r) for r in picks.get("tones", ["–ü–æ–¥–±–µ—Ä–∏—Ç–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫ —Ç–æ–Ω–∞"])]
    }
    products = picks.get("products", [])[:15]
    tips = [
        _plain("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–∑—É –ø–æ–¥ –º–∞–∫–∏—è–∂ –¥–ª—è —Å—Ç–æ–π–∫–æ—Å—Ç–∏"),
        _plain("–°–æ—á–µ—Ç–∞–π—Ç–µ —Ç—ë–ø–ª—ã–µ –∏ —Ö–æ–ª–æ–¥–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ"),
    ]
    return ReportBlocks(title, description, recos, products, tips)


def build_skincare_report(profile: Dict[str, Any], picks: Dict[str, Any]) -> ReportBlocks:
    title = _plain("–û—Ç—á—ë—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π")
    skin = profile.get("skin_type") or profile.get("skinType") or "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
    description = _plain(f"–¢–∏–ø –∫–æ–∂–∏: {skin}")
    # –£—Ç—Ä–æ/–≤–µ—á–µ—Ä –∏–∑ picks['skincare']
    recos = {
        "morning": [
            _plain("–û—á–∏—â–µ–Ω–∏–µ"),
            _plain("–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ"),
            _plain("–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–∞"),
        ],
        "evening": [
            _plain("–û—á–∏—â–µ–Ω–∏–µ"),
            _plain("–°—ã–≤–æ—Ä–æ—Ç–∫–∞"),
            _plain("–ö—Ä–µ–º"),
        ],
    }
    products = picks.get("products", [])[:15]
    tips = [
        _plain("–ù–∞–Ω–æ—Å–∏—Ç–µ SPF –µ–∂–µ–¥–Ω–µ–≤–Ω–æ"),
        _plain("–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –ø—Ä–æ –∑–æ–Ω—É –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑"),
    ]
    return ReportBlocks(title, description, recos, products, tips)


def render_report_telegram(blocks: ReportBlocks) -> Tuple[str, List[List[Tuple[str, str]]]]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (label, callback)."""
    lines: List[str] = []
    lines.append(blocks.title)
    lines.append("")
    lines.append(blocks.description)
    lines.append("")
    lines.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    if blocks.recommendations.get("morning"):
        lines.append("–£—Ç—Ä–æ:")
        for item in blocks.recommendations["morning"]:
            lines.append(f"‚Ä¢ {item}")
    if blocks.recommendations.get("evening"):
        lines.append("–í–µ—á–µ—Ä:")
        for item in blocks.recommendations["evening"]:
            lines.append(f"‚Ä¢ {item}")
    if blocks.recommendations.get("tones"):
        lines.append("–ü–∞–ª–∏—Ç—Ä–∞:")
        for item in blocks.recommendations["tones"]:
            lines.append(f"‚Ä¢ {item}")

    lines.append("")
    lines.append("–ß—Ç–æ –∫—É–ø–∏—Ç—å:")
    for p in blocks.to_buy[:10]:
        name = _plain(p.get("name") or p.get("title") or "–¢–æ–≤–∞—Ä")
        price = p.get("price")
        currency = p.get("currency") or "RUB"
        price_str = f"{int(price)} ‚ÇΩ" if isinstance(price, (int, float)) else ""
        lines.append(f"‚Ä¢ {name} {price_str}")

    if blocks.tips:
        lines.append("")
        lines.append("–°–æ–≤–µ—Ç—ã:")
        for t in blocks.tips[:5]:
            lines.append(f"‚Ä¢ {t}")

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª–∞–¥–æ–∫ –∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard: List[List[Tuple[str, str]]] = [
        [("–û–ø–∏—Å–∞–Ω–∏–µ", "report_tab:desc"), ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "report_tab:reco")],
        [("–ß—Ç–æ –∫—É–ø–∏—Ç—å", "report_tab:buy")],
        [("üõí –ö–æ—Ä–∑–∏–Ω–∞", "cart:open"), ("üìÑ PDF", "report:latest")],
    ]

    return ("\n".join(lines), keyboard)


def render_report_pdf(blocks: ReportBlocks) -> Dict[str, Any]:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –±–ª–æ–∫–∏ –≤ snapshot –¥–ª—è pdf_v2.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–∏–≥–æ–¥–Ω—ã–π –¥–ª—è generate_structured_pdf_report.
    """
    snapshot: Dict[str, Any] = {
        "type": "report",
        "profile": {
            "summary": blocks.description,
        },
        "result": {
            "skincare": {},
            "makeup": {},
            "buy": [
                {
                    "name": _plain(p.get("name") or p.get("title") or "–¢–æ–≤–∞—Ä"),
                    "price": p.get("price"),
                    "currency": p.get("currency") or "RUB",
                    "id": p.get("id") or p.get("key"),
                    "variant_id": p.get("variant_id"),
                }
                for p in blocks.to_buy[:15]
            ],
            "tips": [t for t in blocks.tips[:5]],
        },
    }
    return snapshot


# Persistence helpers
def _reports_dir(uid: int) -> Path:
    return Path("data") / "reports" / str(uid)


def save_report_blocks(uid: int, report_type: str, blocks: ReportBlocks) -> str:
    d: Dict[str, Any] = {
        "type": report_type,
        "blocks": {
            "title": blocks.title,
            "description": blocks.description,
            "recommendations": blocks.recommendations,
            "to_buy": blocks.to_buy,
            "tips": blocks.tips,
        },
    }
    dir_path = _reports_dir(uid)
    dir_path.mkdir(parents=True, exist_ok=True)
    file_path = dir_path / "last_blocks.json"
    file_path.write_text(json.dumps(d, ensure_ascii=False, indent=2), encoding="utf-8")
    return str(file_path)


def load_report_blocks(uid: int) -> Optional[Tuple[str, ReportBlocks]]:
    file_path = _reports_dir(uid) / "last_blocks.json"
    if not file_path.exists():
        return None
    data = json.loads(file_path.read_text(encoding="utf-8"))
    b = data.get("blocks", {})
    blocks = ReportBlocks(
        title=b.get("title", "–û—Ç—á—ë—Ç"),
        description=b.get("description", ""),
        recommendations=b.get("recommendations", {}),
        to_buy=b.get("to_buy", []),
        tips=b.get("tips", []),
    )
    return data.get("type", "report"), blocks
