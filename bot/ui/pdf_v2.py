"""
üìÑ PDF v2 Report Generator - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
–°—Ç—Ä—É–∫—Ç—É—Ä–∞: –†–µ–∑—é–º–µ ‚Üí 15 –¥–µ–∫–æ—Ä (–æ—Ç—Ç–µ–Ω–æ–∫/–ø–æ—á–µ–º—É/–∫–∞–∫) ‚Üí 7 —É—Ö–æ–¥ ‚Üí —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
"""

import os
import json
from typing import Dict, Any, Optional, List, Tuple
from pathlib import Path
from fpdf import FPDF
import re

class StructuredPDFGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö PDF –æ—Ç—á–µ—Ç–æ–≤ v2"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ PDF
        self.font_size_title = 18
        self.font_size_section = 14
        self.font_size_text = 11
        self.font_size_small = 9
        
        # –¶–≤–µ—Ç–∞ (RGB)
        self.color_header = (41, 128, 185)      # –°–∏–Ω–∏–π
        self.color_section = (52, 73, 94)      # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π 
        self.color_text = (44, 62, 80)         # –ß–µ—Ä–Ω—ã–π
        self.color_accent = (231, 76, 60)      # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–æ–≤
        
        # –û—Ç—Å—Ç—É–ø—ã (—É–º–µ–Ω—å—à–µ–Ω—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º)
        self.margin_left = 15
        self.margin_top = 15
        self.margin_right = 15
        
        # Emoji mapping –¥–ª—è PDF
        self.emoji_map = {
            'üé®': '[–ü–ê–õ–ò–¢–†–ê]', 'üß¥': '[–£–•–û–î]', '‚ú®': '*', 'üå∏': '[–í–ï–°–ù–ê]',
            'üåä': '[–õ–ï–¢–û]', 'üçÇ': '[–û–°–ï–ù–¨]', '‚ùÑÔ∏è': '[–ó–ò–ú–ê]', 'üíÑ': '[–ú–ê–ö–ò–Ø–ñ]',
            'üëÅÔ∏è': '[–ì–õ–ê–ó–ê]', 'üí°': '!', 'üè†': '[–ú–ï–ù–Æ]', 'üìÑ': '[–û–¢–ß–ï–¢]',
            'üõçÔ∏è': '[–¢–û–í–ê–†–´]', 'üî•': '*', '‚ö†Ô∏è': '!', '‚ùå': 'X', '‚úÖ': 'OK',
            'üí∞': '[–¶–ï–ù–ê]', 'üéØ': '[–¶–ï–õ–¨]', 'üìä': '[–î–ê–ù–ù–´–ï]', 'üîó': '[–°–°–´–õ–ö–ê]'
        }
    
    def _setup_pdf(self) -> FPDF:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        pdf = FPDF(unit="mm", format="A4")
        pdf.add_page()
        pdf.set_margins(self.margin_left, self.margin_top, self.margin_right)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–∞
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å DejaVu —à—Ä–∏—Ñ—Ç
            font_paths = [
                ".skin-advisor/assets/DejaVuSans.ttf",
                "assets/fonts/DejaVuSans.ttf",
                os.path.join(os.path.dirname(__file__), "..", "..", ".skin-advisor", "assets", "DejaVuSans.ttf"),
            ]
            
            font_found = False
            for font_path in font_paths:
                if os.path.exists(font_path):
                    pdf.add_font("DejaVu", "", font_path)
                    pdf.add_font("DejaVu", "B", font_path)  # Bold variant
                    font_found = True
                    print(f"‚úÖ PDF v2: Using DejaVu font from: {font_path}")
                    break
            
            if not font_found:
                print("‚ö†Ô∏è PDF v2: DejaVu font not found, using Arial")
                pdf.set_font("Arial", size=self.font_size_text)
            else:
                pdf.set_font("DejaVu", size=self.font_size_text)
                
        except Exception as e:
            print(f"‚ö†Ô∏è PDF v2: Font setup error: {e}, using Arial")
            pdf.set_font("Arial", size=self.font_size_text)
        
        return pdf
    
    def _clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è PDF"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º markdown
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # **bold** -> bold
        text = re.sub(r'\*(.*?)\*', r'\1', text)      # *italic* -> italic
        
        # –ó–∞–º–µ–Ω—è–µ–º emoji
        for emoji, replacement in self.emoji_map.items():
            text = text.replace(emoji, replacement)
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è unicode —Å–∏–º–≤–æ–ª—ã
        text = re.sub(r'[^\x00-\x7F\u0400-\u04FF]+', '', text)
        
        return text.strip()
    
    def _add_header(self, pdf: FPDF, title: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞"""
        pdf.set_font_size(self.font_size_title)
        pdf.set_text_color(*self.color_header)
        
        clean_title = self._clean_text(title)
        pdf.cell(0, 12, clean_title, align='C')
        pdf.ln()
        pdf.ln(5)
        
        # –õ–∏–Ω–∏—è –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        pdf.set_draw_color(*self.color_header)
        pdf.line(self.margin_left, pdf.get_y(), 210 - self.margin_right, pdf.get_y())
        pdf.ln(8)
    
    def _add_section_header(self, pdf: FPDF, section_title: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω—É–∂–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        if pdf.get_y() > 250:
            pdf.add_page()
        
        pdf.set_font_size(self.font_size_section)
        pdf.set_text_color(*self.color_section)
        
        clean_title = self._clean_text(section_title)
        pdf.cell(0, 8, clean_title)
        pdf.ln()
        pdf.ln(3)
    
    def _add_text_block(self, pdf: FPDF, text: str, indent: int = 0):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏"""
        if not text:
            return
        
        pdf.set_font_size(self.font_size_text)
        pdf.set_text_color(*self.color_text)
        
        clean_text = self._clean_text(text)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∞–±–∑–∞—Ü—ã
        paragraphs = clean_text.split('\n')
        
        for paragraph in paragraphs:
            if paragraph.strip():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –Ω—É–∂–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if pdf.get_y() > 250:
                    pdf.add_page()
                
                # –û—Ç—Å—Ç—É–ø –¥–ª—è –ø–æ–¥–ø—É–Ω–∫—Ç–æ–≤
                if indent > 0:
                    pdf.set_x(self.margin_left + indent)
                
                # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
                pdf.multi_cell(0, 5, paragraph.strip())
                pdf.ln(2)
    
    def _add_product_card(self, pdf: FPDF, product: Dict[str, Any], category: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–¥—É–∫—Ç–∞"""
        if pdf.get_y() > 240:
            pdf.add_page()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–∞
        pdf.set_font_size(self.font_size_text)
        pdf.set_text_color(*self.color_accent)
        
        product_name = self._clean_text(product.get('name', '–ü—Ä–æ–¥—É–∫—Ç'))
        brand = self._clean_text(product.get('brand', ''))
        
        title = f"{brand} - {product_name}" if brand else product_name
        pdf.cell(0, 6, title, ln=True)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        pdf.set_font_size(self.font_size_small)
        pdf.set_text_color(*self.color_text)
        
        # –¶–µ–Ω–∞
        price = product.get('price')
        currency = product.get('price_currency', 'RUB')
        if price:
            pdf.cell(0, 4, f"–¶–µ–Ω–∞: {price} {currency}", ln=True)
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç
        explain = product.get('explain', '')
        if explain:
            explain_text = f"–ü–æ—á–µ–º—É –ø–æ–¥—Ö–æ–¥–∏—Ç: {self._clean_text(explain)}"
            pdf.multi_cell(0, 4, explain_text)
        
        # –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å (–¥–ª—è –º–∞–∫–∏—è–∂–∞)
        if category in ['foundation', 'concealer', 'powder', 'blush', 'bronzer', 'highlighter']:
            usage_tips = self._get_usage_tips(category)
            if usage_tips:
                pdf.set_font_size(self.font_size_small - 1)
                pdf.multi_cell(0, 4, f"–ö–∞–∫ –Ω–∞–Ω–æ—Å–∏—Ç—å: {usage_tips}")
        
        # –°—Ç–∞—Ç—É—Å –≤ –Ω–∞–ª–∏—á–∏–∏
        in_stock = product.get('in_stock', False)
        status_text = "–í –Ω–∞–ª–∏—á–∏–∏" if in_stock else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        pdf.set_text_color(*self.color_accent if not in_stock else (46, 125, 50))
        pdf.cell(0, 4, f"–°—Ç–∞—Ç—É—Å: {status_text}", ln=True)
        
        pdf.ln(3)
    
    def _get_usage_tips(self, category: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–≤–µ—Ç—ã –ø–æ –Ω–∞–Ω–µ—Å–µ–Ω–∏—é –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        tips = {
            'foundation': '–Ω–∞–Ω–æ—Å–∏—Ç–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ –ª–∏—Ü–∞ –∫ –∫—Ä–∞—è–º, —Ä–∞—Å—Ç—É—à–µ–≤—ã–≤–∞—è —Å–ø–æ–Ω–∂–µ–º',
            'concealer': '—Ç–æ—á–µ—á–Ω–æ –Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–æ–Ω—ã, —Ä–∞—Å—Ç—É—à—É–π—Ç–µ –ø–∞–ª—å—Ü–∞–º–∏',
            'powder': '–∑–∞–∫—Ä–µ–ø–∏—Ç–µ —Ç–æ–Ω–∞–ª—å–Ω—É—é –æ—Å–Ω–æ–≤—É –ø—É—à–∏—Å—Ç–æ–π –∫–∏—Å—Ç—å—é',
            'blush': '–Ω–∞ —è–±–ª–æ—á–∫–∏ —â–µ–∫, —Ä–∞—Å—Ç—É—à—É–π—Ç–µ –∫ –≤–∏—Å–∫–∞–º',
            'bronzer': '–Ω–∞ –≤—ã—Å—Ç—É–ø–∞—é—â–∏–µ —á–∞—Å—Ç–∏ –ª–∏—Ü–∞ (–ª–æ–±, –Ω–æ—Å, —Å–∫—É–ª—ã)',
            'highlighter': '–Ω–∞ —Å–∫—É–ª—ã, —Å–ø–∏–Ω–∫—É –Ω–æ—Å–∞, –ø–æ–¥ –±—Ä–æ–≤—å',
            'eyeshadow': '–Ω–∞—á–Ω–∏—Ç–µ —Å–æ —Å–≤–µ—Ç–ª—ã—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤, —Ç–µ–º–Ω—ã–µ - –≤ —Å–∫–ª–∞–¥–∫—É –≤–µ–∫–∞',
            'eyeliner': '–ø—Ä–æ–≤–µ–¥–∏—Ç–µ –ª–∏–Ω–∏—é –±–ª–∏–∑–∫–æ –∫ —Ä–µ—Å–Ω–∏—Ü–∞–º',
            'mascara': '–ø—Ä–æ–∫—Ä–∞—à–∏–≤–∞–π—Ç–µ –æ—Ç –∫–æ—Ä–Ω–µ–π –∫ –∫–æ–Ω—á–∏–∫–∞–º –∑–∏–≥–∑–∞–≥–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –¥–≤–∏–∂–µ–Ω–∏—è–º–∏',
            'lipstick': '–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ä–∞–Ω–¥–∞—à –¥–ª—è –∫–æ–Ω—Ç—É—Ä–∞, –∑–∞—Ç–µ–º –ø–æ–º–∞–¥—É'
        }
        return tips.get(category, '')
    
    def _add_summary_table(self, pdf: FPDF, profile: Dict[str, Any], products_summary: Dict[str, int]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        self._add_section_header(pdf, "–°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        pdf.set_font_size(self.font_size_text)
        pdf.set_text_color(*self.color_text)
        
        summary_data = [
            ("–ü–æ–¥—Ç–æ–Ω –∫–æ–∂–∏", profile.get('undertone', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')),
            ("–°–µ–∑–æ–Ω", profile.get('season', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')),
            ("–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å", profile.get('contrast', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')),
            ("–¢–∏–ø –∫–æ–∂–∏", profile.get('skin_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')),
        ]
        
        if profile.get('concerns'):
            concerns = ', '.join(profile.get('concerns', []))
            summary_data.append(("–ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏", concerns))
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        for label, value in summary_data:
            pdf.cell(60, 6, f"{label}:", border=1)
            pdf.cell(0, 6, self._clean_text(str(value)), border=1)
            pdf.ln()
        
        pdf.ln(5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
        if products_summary:
            pdf.cell(0, 6, "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:")
            pdf.ln()
            pdf.ln(2)
            
            for category, count in products_summary.items():
                pdf.cell(80, 5, f"{category.title()}:", border=1)
                pdf.cell(0, 5, f"{count} –ø—Ä–æ–¥—É–∫—Ç–æ–≤", border=1)
                pdf.ln()
    
    def generate_structured_pdf(self, uid: int, snapshot: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π PDF –æ—Ç—á–µ—Ç"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            user_dir = Path("data") / "reports" / str(uid)
            user_dir.mkdir(parents=True, exist_ok=True)
            
            pdf_path = user_dir / "last_v2.pdf"
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PDF
            pdf = self._setup_pdf()
            
            # –î–∞–Ω–Ω—ã–µ –∏–∑ snapshot
            report_type = snapshot.get('type', 'report')
            profile = snapshot.get('profile', {})
            result = snapshot.get('result', {})
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title_map = {
                'detailed_palette': '–û–¢–ß–ï–¢ –ü–û –¶–í–ï–¢–û–¢–ò–ü–£ –ò –ü–ê–õ–ò–¢–†–ï',
                'palette': '–û–¢–ß–ï–¢ –ü–û –ü–ê–õ–ò–¢–†–ï',
                'detailed_skincare': '–û–¢–ß–ï–¢ –ü–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ï –ö–û–ñ–ò',
                'skincare': '–û–¢–ß–ï–¢ –ü–û –£–•–û–î–£ –ó–ê –ö–û–ñ–ï–ô'
            }
            
            title = title_map.get(report_type, '–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢')
            self._add_header(pdf, title)
            
            # 1. –†–ï–ó–Æ–ú–ï
            self._add_section_header(pdf, "1. –†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê")
            self._add_summary_section(pdf, profile, report_type)
            
            # 2. –ú–ê–ö–ò–Ø–ñ (15 –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
            if 'makeup' in result:
                self._add_section_header(pdf, "2. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ú–ê–ö–ò–Ø–ñ–£")
                self._add_makeup_section(pdf, result['makeup'])
            
            # 3. –£–•–û–î (7 —à–∞–≥–æ–≤)  
            if 'skincare' in result:
                self._add_section_header(pdf, "3. –ü–†–û–ì–†–ê–ú–ú–ê –£–•–û–î–ê –ó–ê –ö–û–ñ–ï–ô")
                self._add_skincare_section(pdf, result['skincare'])
            
            # 4. –°–í–û–î–ù–ê–Ø –¢–ê–ë–õ–ò–¶–ê
            products_summary = self._calculate_products_summary(result)
            self._add_summary_table(pdf, profile, products_summary)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            pdf.output(str(pdf_path))
            print(f"‚úÖ Generated structured PDF v2 for user {uid}: {pdf_path}")
            
            return str(pdf_path)
            
        except Exception as e:
            print(f"‚ùå Error generating structured PDF for user {uid}: {e}")
            return ""
    
    def _add_summary_section(self, pdf: FPDF, profile: Dict[str, Any], report_type: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é —Ä–µ–∑—é–º–µ"""
        summary_parts = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        undertone = profile.get('undertone', '')
        season = profile.get('season', '')
        contrast = profile.get('contrast', '')
        skin_type = profile.get('skin_type', '')
        
        if undertone:
            summary_parts.append(f"–í–∞—à –ø–æ–¥—Ç–æ–Ω –∫–æ–∂–∏: {undertone}")
        
        if season:
            season_names = {
                'spring': '–Ø—Ä–∫–∞—è –í–µ—Å–Ω–∞', 'summer': '–ú—è–≥–∫–æ–µ –õ–µ—Ç–æ',
                'autumn': '–ì–ª—É–±–æ–∫–∞—è –û—Å–µ–Ω—å', 'winter': '–•–æ–ª–æ–¥–Ω–∞—è –ó–∏–º–∞'
            }
            summary_parts.append(f"–¶–≤–µ—Ç–æ—Ç–∏–ø: {season_names.get(season, season)}")
        
        if contrast:
            summary_parts.append(f"–ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: {contrast}")
        
        if skin_type:
            summary_parts.append(f"–¢–∏–ø –∫–æ–∂–∏: {skin_type}")
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∫–æ–∂–∏
        concerns = profile.get('concerns', [])
        if concerns:
            summary_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {', '.join(concerns)}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç
        summary_text = '. '.join(summary_parts) + '.'
        
        if summary_text.strip() != '.':
            self._add_text_block(pdf, summary_text)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –æ—Ç—á–µ—Ç–∞
        if report_type in ['detailed_palette', 'palette']:
            recommendation = (
                "–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –≤–∞—à–µ–≥–æ —Ü–≤–µ—Ç–æ—Ç–∏–ø–∞ –ø–æ–¥–æ–±—Ä–∞–Ω—ã –æ—Ç—Ç–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ "
                "–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç –≤–∞—à—É –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∫—Ä–∞—Å–æ—Ç—É –∏ —Å–æ–∑–¥–∞–¥—É—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –æ–±—Ä–∞–∑."
            )
            self._add_text_block(pdf, recommendation)
        
        elif report_type in ['detailed_skincare', 'skincare']:
            recommendation = (
                "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Ö–æ–¥–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤–∞—à–µ–π –∫–æ–∂–∏ "
                "–¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤–æ–≥–æ –∏ —Å–∏—è—é—â–µ–≥–æ –≤–∏–¥–∞."
            )
            self._add_text_block(pdf, recommendation)
    
    def _add_makeup_section(self, pdf: FPDF, makeup_data: Dict[str, List]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é –º–∞–∫–∏—è–∂–∞"""
        
        section_order = ['base', 'face', 'eyes', 'lips']
        section_names = {
            'base': '–ë–∞–∑–æ–≤—ã–π –º–∞–∫–∏—è–∂',
            'face': '–°–∫—É–ª—å–ø—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏—Ü–∞', 
            'eyes': '–ú–∞–∫–∏—è–∂ –≥–ª–∞–∑',
            'lips': '–ú–∞–∫–∏—è–∂ –≥—É–±'
        }
        
        for section in section_order:
            if section in makeup_data and makeup_data[section]:
                # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
                pdf.set_font_size(self.font_size_text)
                pdf.set_text_color(*self.color_section)
                pdf.cell(0, 6, f"2.{section_order.index(section) + 1}. {section_names[section]}")
                pdf.ln()
                pdf.ln(2)
                
                # –ü—Ä–æ–¥—É–∫—Ç—ã –≤ —Å–µ–∫—Ü–∏–∏
                for product in makeup_data[section][:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ —Å–µ–∫—Ü–∏—é
                    category = product.get('category', section)
                    self._add_product_card(pdf, product, category)
    
    def _add_skincare_section(self, pdf: FPDF, skincare_data: Dict[str, List]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é —É—Ö–æ–¥–∞"""
        
        # –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥
        if 'AM' in skincare_data and skincare_data['AM']:
            pdf.set_font_size(self.font_size_text)
            pdf.set_text_color(*self.color_section)
            pdf.cell(0, 6, "3.1. –£—Ç—Ä–µ–Ω–Ω–∏–π —É—Ö–æ–¥")
            pdf.ln()
            pdf.ln(2)
            
            for product in skincare_data['AM']:
                self._add_skincare_product_card(pdf, product, 'AM')
        
        # –í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥
        if 'PM' in skincare_data and skincare_data['PM']:
            pdf.set_font_size(self.font_size_text)
            pdf.set_text_color(*self.color_section)
            pdf.cell(0, 6, "3.2. –í–µ—á–µ—Ä–Ω–∏–π —É—Ö–æ–¥")
            pdf.ln()
            pdf.ln(2)
            
            for product in skincare_data['PM']:
                self._add_skincare_product_card(pdf, product, 'PM')
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —É—Ö–æ–¥
        if 'weekly' in skincare_data and skincare_data['weekly']:
            pdf.set_font_size(self.font_size_text)
            pdf.set_text_color(*self.color_section)
            pdf.cell(0, 6, "3.3. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π —É—Ö–æ–¥")
            pdf.ln()
            pdf.ln(2)
            
            for product in skincare_data['weekly']:
                self._add_skincare_product_card(pdf, product, 'weekly')
    
    def _add_skincare_product_card(self, pdf: FPDF, product: Dict[str, Any], routine_type: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Å—Ä–µ–¥—Å—Ç–≤–∞ —É—Ö–æ–¥–∞"""
        if pdf.get_y() > 240:
            pdf.add_page()
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞
        pdf.set_font_size(self.font_size_text)
        pdf.set_text_color(*self.color_accent)
        
        product_name = self._clean_text(product.get('name', '–°—Ä–µ–¥—Å—Ç–≤–æ'))
        brand = self._clean_text(product.get('brand', ''))
        
        title = f"{brand} - {product_name}" if brand else product_name
        pdf.cell(0, 6, title, ln=True)
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
        category = product.get('category', '')
        if category:
            frequency = self._get_skincare_frequency(category, routine_type)
            pdf.set_font_size(self.font_size_small)
            pdf.set_text_color(*self.color_text)
            pdf.cell(0, 4, f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {frequency}")
            pdf.ln()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        actives = product.get('actives', [])
        if actives:
            actives_text = f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {', '.join(actives)}"
            pdf.multi_cell(0, 4, self._clean_text(actives_text))
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explain = product.get('explain', '')
        if explain:
            explain_text = f"–≠—Ñ—Ñ–µ–∫—Ç: {self._clean_text(explain)}"
            pdf.multi_cell(0, 4, explain_text)
        
        # –¶–µ–Ω–∞ –∏ –Ω–∞–ª–∏—á–∏–µ
        price = product.get('price')
        if price:
            currency = product.get('price_currency', 'RUB')
            pdf.cell(0, 4, f"–¶–µ–Ω–∞: {price} {currency}", ln=True)
        
        in_stock = product.get('in_stock', False)
        status_text = "–í –Ω–∞–ª–∏—á–∏–∏" if in_stock else "–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        pdf.set_text_color(*self.color_accent if not in_stock else (46, 125, 50))
        pdf.cell(0, 4, f"–°—Ç–∞—Ç—É—Å: {status_text}", ln=True)
        
        pdf.ln(3)
    
    def _get_skincare_frequency(self, category: str, routine_type: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å—Ç–æ—Ç—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        frequency_map = {
            'cleanser': {'AM': '—É—Ç—Ä–æ–º', 'PM': '–≤–µ—á–µ—Ä–æ–º', 'weekly': '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'},
            'toner': {'AM': '—É—Ç—Ä–æ–º –ø–æ—Å–ª–µ –æ—á–∏—â–µ–Ω–∏—è', 'PM': '–≤–µ—á–µ—Ä–æ–º –ø–æ—Å–ª–µ –æ—á–∏—â–µ–Ω–∏—è', 'weekly': '–ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏'},
            'serum': {'AM': '—É—Ç—Ä–æ–º –ø–æ–¥ –∫—Ä–µ–º', 'PM': '–≤–µ—á–µ—Ä–æ–º –ø–æ–¥ –∫—Ä–µ–º', 'weekly': '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'},
            'moisturizer': {'AM': '—É—Ç—Ä–æ–º', 'PM': '–≤–µ—á–µ—Ä–æ–º', 'weekly': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ'},
            'spf': {'AM': '—É—Ç—Ä–æ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–ª–æ–µ–º', 'PM': '–Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å', 'weekly': '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ —É—Ç—Ä–æ–º'},
            'exfoliant': {'AM': '–Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å', 'PM': '2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'weekly': '1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é'},
            'mask': {'AM': '–Ω–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å', 'PM': '1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é', 'weekly': '1 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é'}
        }
        
        return frequency_map.get(category, {}).get(routine_type, '–ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    
    def _calculate_products_summary(self, result: Dict[str, Any]) -> Dict[str, int]:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º"""
        summary = {}
        
        # –ü–æ–¥—Å—á–µ—Ç –º–∞–∫–∏—è–∂–∞
        if 'makeup' in result:
            makeup_count = 0
            for section, products in result['makeup'].items():
                makeup_count += len(products)
            summary['–º–∞–∫–∏—è–∂'] = makeup_count
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Ö–æ–¥–∞
        if 'skincare' in result:
            skincare_count = 0
            for routine, products in result['skincare'].items():
                skincare_count += len(products)
            summary['—É—Ö–æ–¥'] = skincare_count
        
        return summary


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
_pdf_generator = None

def get_pdf_generator() -> StructuredPDFGenerator:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    global _pdf_generator
    if _pdf_generator is None:
        _pdf_generator = StructuredPDFGenerator()
    return _pdf_generator


def generate_structured_pdf_report(uid: int, snapshot: Dict[str, Any]) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ PDF"""
    generator = get_pdf_generator()
    return generator.generate_structured_pdf(uid, snapshot)


if __name__ == "__main__":
    # –¢–µ—Å—Ç PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ v2
    print("üìÑ PDF V2 GENERATOR TEST")
    print("=" * 40)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_snapshot = {
        "type": "detailed_palette",
        "profile": {
            "user_id": 12345,
            "undertone": "warm",
            "season": "autumn", 
            "contrast": "medium",
            "skin_type": "dry"
        },
        "result": {
            "makeup": {
                "base": [
                    {
                        "name": "Perfect Foundation",
                        "brand": "Test Brand",
                        "category": "foundation",
                        "price": 1500,
                        "price_currency": "RUB",
                        "in_stock": True,
                        "explain": "–∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–µ–ø–ª–æ–≥–æ –ø–æ–¥—Ç–æ–Ω–∞"
                    }
                ],
                "face": [
                    {
                        "name": "Warm Blush",
                        "brand": "Test Brand",
                        "category": "blush", 
                        "price": 800,
                        "in_stock": True,
                        "explain": "–ø–æ–¥—á–µ—Ä–∫–Ω–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É–º—è–Ω–µ—Ü"
                    }
                ]
            },
            "skincare": {
                "AM": [
                    {
                        "name": "Gentle Cleanser",
                        "brand": "Test Brand",
                        "category": "cleanser",
                        "price": 1200,
                        "in_stock": True,
                        "actives": ["–≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞"],
                        "explain": "–º—è–≥–∫–æ –æ—á–∏—â–∞–µ—Ç —Å—É—Ö—É—é –∫–æ–∂—É"
                    }
                ]
            }
        }
    }
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π PDF
    generator = StructuredPDFGenerator()
    pdf_path = generator.generate_structured_pdf(999, test_snapshot)
    
    if pdf_path:
        print(f"‚úÖ Test PDF generated: {pdf_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if os.path.exists(pdf_path):
            file_size = os.path.getsize(pdf_path)
            print(f"üìä File size: {file_size} bytes")
            print("‚úÖ PDF v2 generator working correctly!")
        else:
            print("‚ùå PDF file not found")
    else:
        print("‚ùå PDF generation failed")
