#!/usr/bin/env python3
"""
üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: SourcePrioritizer, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
"""

import pytest
import sys
import os

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from engine.source_prioritizer import SourcePrioritizer, SourceInfo


class TestSourcePrioritizer:
    """–¢–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def setup_method(self):
        self.prioritizer = SourcePrioritizer()
    
    def test_golden_apple_highest_priority(self):
        """–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
        golden_apple_urls = [
            "https://goldapple.ru/product/123",
            "https://goldenappletree.ru/product/456",
            "https://–∑–æ–ª–æ—Ç–æ–µ—è–±–ª–æ—á–∫–æ.—Ä—Ñ/—Ç–æ–≤–∞—Ä/789"
        ]
        
        for url in golden_apple_urls:
            priority = self.prioritizer.get_priority(url)
            assert priority == 1, f"–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1, –ø–æ–ª—É—á–µ–Ω {priority} –¥–ª—è {url}"
            
            source_info = self.prioritizer.get_source_info(url)
            assert source_info is not None
            assert source_info.category == "golden_apple"
    
    def test_russian_official_priority(self):
        """–†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2"""
        ru_official_urls = [
            "https://sephora.ru/product/123",
            "https://letu.ru/product/456", 
            "https://rive-gauche.ru/product/789"
        ]
        
        for url in ru_official_urls:
            priority = self.prioritizer.get_priority(url)
            assert priority == 2, f"–†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2, –ø–æ–ª—É—á–µ–Ω {priority} –¥–ª—è {url}"
            
            source_info = self.prioritizer.get_source_info(url)
            assert source_info is not None
            assert source_info.category == "ru_official"
    
    def test_russian_marketplace_priority(self):
        """–†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3"""
        ru_marketplace_urls = [
            "https://wildberries.ru/catalog/123",
            "https://ozon.ru/product/456",
            "https://market.yandex.ru/product/789"
        ]
        
        for url in ru_marketplace_urls:
            priority = self.prioritizer.get_priority(url)
            assert priority == 3, f"–†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3, –ø–æ–ª—É—á–µ–Ω {priority} –¥–ª—è {url}"
            
            source_info = self.prioritizer.get_source_info(url)
            assert source_info is not None
            assert source_info.category == "ru_marketplace"
    
    def test_foreign_priority(self):
        """–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4"""
        foreign_urls = [
            "https://sephora.com/product/123",
            "https://ulta.com/product/456",
            "https://beautylish.com/product/789"
        ]
        
        for url in foreign_urls:
            priority = self.prioritizer.get_priority(url)
            assert priority == 4, f"–ó–∞—Ä—É–±–µ–∂–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 4, –ø–æ–ª—É—á–µ–Ω {priority} –¥–ª—è {url}"
            
            source_info = self.prioritizer.get_source_info(url)
            assert source_info is not None
            assert source_info.category == "foreign"
    
    def test_unknown_source_lowest_priority(self):
        """–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
        unknown_urls = [
            "https://unknown-shop.com/product/123",
            "https://random-site.net/item/456",
            ""  # –ü—É—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞
        ]
        
        for url in unknown_urls:
            priority = self.prioritizer.get_priority(url)
            assert priority == 999, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç 999, –ø–æ–ª—É—á–µ–Ω {priority} –¥–ª—è {url}"
    
    def test_domain_extraction(self):
        """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞"""
        test_cases = [
            ("https://www.goldapple.ru/product/123", "goldapple.ru"),
            ("http://sephora.ru/beauty/456", "sephora.ru"),
            ("https://wildberries.ru/catalog/789?ref=abc", "wildberries.ru"),
            ("", None),
            ("invalid-url", None)
        ]
        
        for url, expected_domain in test_cases:
            actual_domain = self.prioritizer.get_domain_from_url(url)
            assert actual_domain == expected_domain, f"–î–ª—è {url} –æ–∂–∏–¥–∞–ª—Å—è –¥–æ–º–µ–Ω {expected_domain}, –ø–æ–ª—É—á–µ–Ω {actual_domain}"
    
    def test_sort_products_by_priority(self):
        """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        products = [
            {"name": "Product A", "link": "https://unknown-shop.com/a"},  # priority 999
            {"name": "Product B", "link": "https://goldapple.ru/b"},      # priority 1
            {"name": "Product C", "link": "https://wildberries.ru/c"},    # priority 3
            {"name": "Product D", "link": "https://sephora.ru/d"},        # priority 2
        ]
        
        sorted_products = self.prioritizer.sort_products_by_source_priority(products)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫: –∑–æ–ª–æ—Ç–æ–µ —è–±–ª–æ–∫–æ ‚Üí sephora.ru ‚Üí wildberries ‚Üí unknown
        expected_order = ["Product B", "Product D", "Product C", "Product A"]
        actual_order = [p["name"] for p in sorted_products]
        
        assert actual_order == expected_order, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_order}, –ø–æ–ª—É—á–µ–Ω–æ {actual_order}"
    
    def test_get_best_source_product(self):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å –ª—É—á—à–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º"""
        products = [
            {"name": "Wildberries Product", "link": "https://wildberries.ru/product"},
            {"name": "Golden Apple Product", "link": "https://goldapple.ru/product"},
            {"name": "Unknown Shop Product", "link": "https://unknown.com/product"},
        ]
        
        best_product = self.prioritizer.get_best_source_product(products)
        
        assert best_product is not None
        assert best_product["name"] == "Golden Apple Product"
    
    def test_group_by_source_category(self):
        """–¢–µ—Å—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        products = [
            {"name": "GA Product", "link": "https://goldapple.ru/1"},
            {"name": "Sephora Product", "link": "https://sephora.ru/2"},
            {"name": "WB Product", "link": "https://wildberries.ru/3"},
            {"name": "Ulta Product", "link": "https://ulta.com/4"},
            {"name": "Unknown Product", "link": "https://unknown.com/5"},
        ]
        
        groups = self.prioritizer.group_by_source_category(products)
        
        assert len(groups["golden_apple"]) == 1
        assert len(groups["ru_official"]) == 1
        assert len(groups["ru_marketplace"]) == 1
        assert len(groups["foreign"]) == 1
        assert len(groups["unknown"]) == 1
        
        assert groups["golden_apple"][0]["name"] == "GA Product"
        assert groups["ru_official"][0]["name"] == "Sephora Product"
        assert groups["ru_marketplace"][0]["name"] == "WB Product"
        assert groups["foreign"][0]["name"] == "Ulta Product"
        assert groups["unknown"][0]["name"] == "Unknown Product"
    
    def test_source_stats(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        products = [
            {"link": "https://goldapple.ru/1"},
            {"link": "https://goldapple.ru/2"},
            {"link": "https://sephora.ru/3"},
            {"link": "https://wildberries.ru/4"},
            {"link": "https://unknown.com/5"},
        ]
        
        stats = self.prioritizer.get_source_stats(products)
        
        assert stats["golden_apple"] == 2
        assert stats["ru_official"] == 1
        assert stats["ru_marketplace"] == 1
        assert stats["foreign"] == 0
        assert stats["unknown"] == 1
    
    def test_prioritized_links_single_product(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        product = {
            "name": "Test Product",
            "link": "https://wildberries.ru/product/123",
            "additional_links": [
                {"url": "https://goldapple.ru/product/123"},
                {"url": "https://unknown-shop.com/product/123"}
            ]
        }
        
        prioritized_links = self.prioritizer.get_prioritized_links(product)
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 —Å—Å—ã–ª–∫–∏, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        assert len(prioritized_links) == 3
        assert prioritized_links[0]["url"] == "https://goldapple.ru/product/123"  # priority 1
        assert prioritized_links[1]["url"] == "https://wildberries.ru/product/123"  # priority 3
        assert prioritized_links[2]["url"] == "https://unknown-shop.com/product/123"  # priority 999
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        assert prioritized_links[0]["source_name"] == "–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ"
        assert prioritized_links[0]["category"] == "golden_apple"


if __name__ == "__main__":
    pytest.main([__file__, "-v"])




