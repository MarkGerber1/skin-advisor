#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–æ–≤.
"""

import pytest
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from bot.ui.render import render_skincare_report, render_makeup_report


@pytest.fixture
def sample_skincare_result():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π."""
    return {
        "skincare": {
            "AM": [
                {
                    "id": "cleanser_1",
                    "brand": "Test Brand",
                    "name": "Gentle Cleanser",
                    "price": 500.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/cleanser1?aff=test",
                },
                {
                    "id": "serum_1",
                    "brand": "Test Brand",
                    "name": "Niacinamide Serum",
                    "price": 1200.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/serum1?aff=test",
                },
            ],
            "PM": [
                {
                    "id": "moisturizer_1",
                    "brand": "Test Brand",
                    "name": "Moisturizing Cream",
                    "price": 1500.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/moisturizer1?aff=test",
                }
            ],
            "weekly": [
                {
                    "id": "mask_1",
                    "brand": "Test Brand",
                    "name": "Hydrating Mask",
                    "price": 800.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/mask1?aff=test",
                }
            ],
        }
    }


@pytest.fixture
def sample_makeup_result():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞–∫–∏—è–∂–∞."""
    return {
        "makeup": {
            "face": [
                {
                    "id": "foundation_1",
                    "brand": "Test Brand",
                    "name": "Foundation",
                    "price": 2000.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/foundation1?aff=test",
                }
            ],
            "brows": [
                {
                    "id": "brow_1",
                    "brand": "Test Brand",
                    "name": "Brow Pencil",
                    "price": 1000.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/brow1?aff=test",
                }
            ],
            "eyes": [
                {
                    "id": "mascara_1",
                    "brand": "Test Brand",
                    "name": "Mascara",
                    "price": 1200.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/mascara1?aff=test",
                }
            ],
            "lips": [
                {
                    "id": "lipstick_1",
                    "brand": "Test Brand",
                    "name": "Lipstick",
                    "price": 1500.0,
                    "price_currency": "RUB",
                    "ref_link": "https://example.com/lipstick1?aff=test",
                }
            ],
        }
    }


def test_render_skincare_report(sample_skincare_result):
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π."""
    text, keyboard = render_skincare_report(sample_skincare_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    assert "üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥" in text
    assert "AM:" in text
    assert "PM:" in text
    assert "Weekly:" in text
    assert "Test Brand Gentle Cleanser" in text
    assert "500 ‚ÇΩ" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    assert keyboard is not None
    assert len(keyboard.inline_keyboard) > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
    buy_buttons = []
    for row in keyboard.inline_keyboard:
        for button in row:
            if button.url and "example.com" in button.url:
                buy_buttons.append(button)

    assert len(buy_buttons) > 0


def test_render_makeup_report(sample_makeup_result):
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞–∫–∏—è–∂—É."""
    text, keyboard = render_makeup_report(sample_makeup_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    assert "üé® –ú–∞–∫–∏—è–∂ –ø–æ –ø–∞–ª–∏—Ç—Ä–µ" in text
    assert "–õ–∏—Ü–æ:" in text
    assert "–ë—Ä–æ–≤–∏:" in text
    assert "–ì–ª–∞–∑–∞:" in text
    assert "–ì—É–±—ã:" in text
    assert "Test Brand Foundation" in text
    assert "2000 ‚ÇΩ" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    assert keyboard is not None
    assert len(keyboard.inline_keyboard) > 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–∫—É–ø–∫–∏
    buy_buttons = []
    for row in keyboard.inline_keyboard:
        for button in row:
            if button.url and "example.com" in button.url:
                buy_buttons.append(button)

    assert len(buy_buttons) > 0


def test_render_empty_skincare():
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ –∫–æ–∂–µ–π."""
    empty_result = {"skincare": {"AM": [], "PM": [], "weekly": []}}

    text, keyboard = render_skincare_report(empty_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    assert "üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥" in text
    assert "AM:" in text
    assert "PM:" in text
    assert "Weekly:" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
    assert "‚Äî" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å")
    assert keyboard is not None
    assert len(keyboard.inline_keyboard) == 1
    assert keyboard.inline_keyboard[0][0].callback_data == "noop"


def test_render_empty_makeup():
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–∞–∫–∏—è–∂—É."""
    empty_result = {"makeup": {"face": [], "brows": [], "eyes": [], "lips": []}}

    text, keyboard = render_makeup_report(empty_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    assert "üé® –ú–∞–∫–∏—è–∂ –ø–æ –ø–∞–ª–∏—Ç—Ä–µ" in text
    assert "–õ–∏—Ü–æ:" in text
    assert "–ë—Ä–æ–≤–∏:" in text
    assert "–ì–ª–∞–∑–∞:" in text
    assert "–ì—É–±—ã:" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤
    assert "‚Äî" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å")
    assert keyboard is not None
    assert len(keyboard.inline_keyboard) == 1
    assert keyboard.inline_keyboard[0][0].callback_data == "noop"


def test_render_without_ref_links(sample_skincare_result):
    """–¢–µ—Å—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –±–µ–∑ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫."""
    # –£–±–∏—Ä–∞–µ–º ref_link –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
    for category in sample_skincare_result["skincare"].values():
        for product in category:
            product.pop("ref_link", None)

    text, keyboard = render_skincare_report(sample_skincare_result)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
    assert "üìã –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —É—Ö–æ–¥" in text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–Ω–æ–ø–∫–∞ "–û–±–Ω–æ–≤–∏—Ç—å")
    assert keyboard is not None
    assert len(keyboard.inline_keyboard) == 1
    assert keyboard.inline_keyboard[0][0].callback_data == "noop"
