#!/usr/bin/env python3
"""
üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: —Ç–µ—Å—Ç—ã ‚Üí —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É ‚Üí –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
"""

import pytest
import tempfile
import shutil
import os
import sys
from unittest.mock import AsyncMock, MagicMock, patch

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from engine.cart_store import CartStore, CartItem
from engine.source_prioritizer import SourcePrioritizer
from engine.models import UserProfile


class TestCartFlowIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã"""
    
    def setup_method(self):
        """–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.cart_store = CartStore(base_dir=self.temp_dir)
        self.prioritizer = SourcePrioritizer()
        self.user_id = 12345
    
    def teardown_method(self):
        """–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        shutil.rmtree(self.temp_dir)
    
    def test_end_to_end_cart_flow(self):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ‚Üí –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ‚Üí —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω–æ–π"""
        
        # 1. –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        mock_recommendations = [
            {
                "id": "lipstick-mac-001",
                "brand": "MAC",
                "name": "Ruby Woo",
                "category": "lipstick",
                "price": 2500.0,
                "price_currency": "‚ÇΩ",
                "link": "https://goldapple.ru/mac-ruby-woo",
                "ref_link": "https://goldapple.ru/mac-ruby-woo?ref=S1",
                "source_priority": 1,
                "source_name": "–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ",
                "source_category": "golden_apple"
            },
            {
                "id": "foundation-fenty-001", 
                "brand": "Fenty Beauty",
                "name": "Pro Filt'r Foundation",
                "category": "foundation",
                "price": 3200.0,
                "price_currency": "‚ÇΩ",
                "link": "https://sephora.ru/fenty-foundation",
                "ref_link": "https://sephora.ru/fenty-foundation?ref=S1",
                "source_priority": 2,
                "source_name": "Sephora Russia",
                "source_category": "ru_official"
            }
        ]
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É (–∏–º–∏—Ç–∏—Ä—É–µ–º user action)
        lipstick_item = CartItem(
            product_id="lipstick-mac-001",
            qty=2,
            brand="MAC",
            name="Ruby Woo",
            price=2500.0,
            price_currency="‚ÇΩ",
            ref_link="https://goldapple.ru/mac-ruby-woo?ref=S1",
            category="lipstick",
            variant_id="shade-ruby-woo",
            variant_name="Ruby Woo",
            variant_type="shade"
        )
        
        foundation_item = CartItem(
            product_id="foundation-fenty-001",
            qty=1,
            brand="Fenty Beauty", 
            name="Pro Filt'r Foundation",
            price=3200.0,
            price_currency="‚ÇΩ",
            ref_link="https://sephora.ru/fenty-foundation?ref=S1",
            category="foundation",
            variant_id="shade-150",
            variant_name="150",
            variant_type="shade"
        )
        
        self.cart_store.add(self.user_id, lipstick_item)
        self.cart_store.add(self.user_id, foundation_item)
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart_items = self.cart_store.get(self.user_id)
        assert len(cart_items) == 2
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ –æ—Ç—Ç–µ–Ω–æ–∫ –ø–æ–º–∞–¥—ã
        lipstick_same_shade = CartItem(
            product_id="lipstick-mac-001",
            qty=1,
            variant_id="shade-ruby-woo",
            brand="MAC",
            name="Ruby Woo"
        )
        self.cart_store.add(self.user_id, lipstick_same_shade)
        
        cart_items = self.cart_store.get(self.user_id)
        assert len(cart_items) == 2  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–º–∞–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ qty —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
        lipstick_in_cart = next((item for item in cart_items 
                               if item.get_composite_key() == "lipstick-mac-001:shade-ruby-woo"), None)
        assert lipstick_in_cart is not None
        assert lipstick_in_cart.qty == 3  # 2 + 1
        
        # 5. –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–æ–π –æ—Ç—Ç–µ–Ω–æ–∫ —Ç–æ–π –∂–µ –ø–æ–º–∞–¥—ã
        lipstick_different_shade = CartItem(
            product_id="lipstick-mac-001",
            qty=1,
            variant_id="shade-velvet-teddy",
            variant_name="Velvet Teddy",
            variant_type="shade",
            brand="MAC",
            name="Velvet Teddy"
        )
        self.cart_store.add(self.user_id, lipstick_different_shade)
        
        cart_items = self.cart_store.get(self.user_id)
        assert len(cart_items) == 3  # –î–æ–±–∞–≤–∏–ª—Å—è –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        self.cart_store.set_qty(self.user_id, "lipstick-mac-001", 5, "shade-ruby-woo")
        
        cart_items = self.cart_store.get(self.user_id)
        lipstick_ruby = next((item for item in cart_items 
                            if item.get_composite_key() == "lipstick-mac-001:shade-ruby-woo"), None)
        assert lipstick_ruby.qty == 5
        
        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        self.cart_store.remove(self.user_id, "lipstick-mac-001", "shade-velvet-teddy")
        
        cart_items = self.cart_store.get(self.user_id)
        assert len(cart_items) == 2  # Velvet Teddy —É–¥–∞–ª–µ–Ω
        
        # 8. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∫–æ—Ä–∑–∏–Ω—É
        composite_keys = [item.get_composite_key() for item in cart_items]
        assert "lipstick-mac-001:shade-ruby-woo" in composite_keys
        assert "foundation-fenty-001:shade-150" in composite_keys
        assert "lipstick-mac-001:shade-velvet-teddy" not in composite_keys
    
    def test_source_prioritization_in_recommendations(self):
        """–¢–µ—Å—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"""
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        products_mixed_sources = [
            {"name": "Product A", "link": "https://unknown-shop.com/a"},
            {"name": "Product B", "link": "https://goldapple.ru/b"},
            {"name": "Product C", "link": "https://wildberries.ru/c"}, 
            {"name": "Product D", "link": "https://sephora.ru/d"},
        ]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        sorted_products = self.prioritizer.sort_products_by_source_priority(products_mixed_sources)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ
        assert sorted_products[0]["name"] == "Product B"
        assert sorted_products[1]["name"] == "Product D"  # Sephora RU
        assert sorted_products[2]["name"] == "Product C"  # Wildberries
        assert sorted_products[3]["name"] == "Product A"  # Unknown
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        best_product = self.prioritizer.get_best_source_product(products_mixed_sources)
        assert best_product["name"] == "Product B"  # –ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ
    
    def test_cart_with_multiple_variants_persistence(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        items = [
            CartItem(product_id="lipstick-001", variant_id="red-01", qty=1, brand="Brand A"),
            CartItem(product_id="lipstick-001", variant_id="pink-02", qty=2, brand="Brand A"),
            CartItem(product_id="foundation-001", variant_id="light-120", qty=1, brand="Brand B"),
            CartItem(product_id="mascara-001", qty=1, brand="Brand C"),  # –ë–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        ]
        
        for item in items:
            self.cart_store.add(self.user_id, item)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä CartStore (—Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫)
        new_cart_store = CartStore(base_dir=self.temp_dir)
        loaded_items = new_cart_store.get(self.user_id)
        
        assert len(loaded_items) == 4
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        composite_keys = [item.get_composite_key() for item in loaded_items]
        
        assert "lipstick-001:red-01" in composite_keys
        assert "lipstick-001:pink-02" in composite_keys
        assert "foundation-001:light-120" in composite_keys
        assert "mascara-001:default" in composite_keys
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        items_dict = {item.get_composite_key(): item for item in loaded_items}
        assert items_dict["lipstick-001:pink-02"].qty == 2
        assert items_dict["foundation-001:light-120"].qty == 1
    
    def test_legacy_cart_migration(self):
        """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ legacy –∫–æ—Ä–∑–∏–Ω—ã"""
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ—Ä–∑–∏–Ω—É –±–µ–∑ –ø–æ–ª–µ–π variant_*
        import json
        
        legacy_data = {
            "old-product-001": {
                "product_id": "old-product-001",
                "qty": 2,
                "brand": "Legacy Brand",
                "name": "Legacy Product",
                "price": 100.0,
                "price_currency": "‚ÇΩ",
                "ref_link": "https://goldapple.ru/legacy",
                "explain": "Legacy explanation",
                "category": "legacy",
                "in_stock": True,
                "added_at": "2024-01-01T12:00:00"
                # –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: variant_id, variant_name, variant_type
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º legacy –¥–∞–Ω–Ω—ã–µ
        legacy_cart_path = self.cart_store._path(self.user_id)
        with open(legacy_cart_path, "w", encoding="utf-8") as f:
            json.dump(legacy_data, f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        migrated_items = self.cart_store.get(self.user_id)
        
        assert len(migrated_items) == 1
        item = migrated_items[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ variant –ø–æ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –∫–∞–∫ None
        assert item.variant_id is None
        assert item.variant_name is None
        assert item.variant_type is None
        assert item.get_composite_key() == "old-product-001:default"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        assert item.product_id == "old-product-001"
        assert item.qty == 2
        assert item.brand == "Legacy Brand"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∫ legacy —Ç–æ–≤–∞—Ä—É
        new_variant = CartItem(
            product_id="old-product-001",
            variant_id="new-variant",
            qty=1,
            brand="Legacy Brand"
        )
        self.cart_store.add(self.user_id, new_variant)
        
        all_items = self.cart_store.get(self.user_id)
        assert len(all_items) == 2  # Legacy + –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç


if __name__ == "__main__":
    pytest.main([__file__, "-v"])

