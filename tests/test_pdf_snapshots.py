"""
üì∏ PDF Snapshot Tests - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã PDF –æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
"""

import os
import json
import hashlib
from typing import Dict, Any, List, Optional
from pathlib import Path
import tempfile
import pytest

class PDFSnapshotTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–Ω–∞–ø—à–æ—Ç–æ–≤ PDF —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, snapshots_dir: str = "tests/snapshots"):
        self.snapshots_dir = Path(snapshots_dir)
        self.snapshots_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–Ω–∞–ø—à–æ—Ç–æ–≤
        self.metadata_file = self.snapshots_dir / "pdf_snapshots.json"
        self.metadata = self._load_metadata()
    
    def _load_metadata(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç–æ–≤"""
        if self.metadata_file.exists():
            try:
                with open(self.metadata_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception:
                return {}
        return {}
    
    def _save_metadata(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–Ω–∞–ø—à–æ—Ç–æ–≤"""
        with open(self.metadata_file, 'w', encoding='utf-8') as f:
            json.dump(self.metadata, f, indent=2, ensure_ascii=False)
    
    def _extract_pdf_text(self, pdf_path: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF (—É–ø—Ä–æ—â–µ–Ω–Ω–æ - —á–µ—Ä–µ–∑ fpdf)"""
        try:
            # –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω—É–∂–µ–Ω PyPDF2 –∏–ª–∏ pdfplumber
            # –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∏ —Ä–∞–∑–º–µ—Ä
            if os.path.exists(pdf_path):
                file_size = os.path.getsize(pdf_path)
                with open(pdf_path, 'rb') as f:
                    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–∞–π—Ç—ã –¥–ª—è —Ö–µ—à–∞
                    content = f.read(min(1024, file_size))
                    if file_size > 1024:
                        f.seek(-512, 2)  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 512 –±–∞–π—Ç
                        content += f.read()
                
                return hashlib.md5(content).hexdigest()
            else:
                return ""
        except Exception as e:
            print(f"Error extracting PDF content: {e}")
            return ""
    
    def _get_pdf_metadata(self, pdf_path: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª–∞"""
        if not os.path.exists(pdf_path):
            return {"exists": False}
        
        file_size = os.path.getsize(pdf_path)
        content_hash = self._extract_pdf_text(pdf_path)
        
        return {
            "exists": True,
            "file_size": file_size,
            "content_hash": content_hash,
            "size_category": self._categorize_file_size(file_size)
        }
    
    def _categorize_file_size(self, size: int) -> str:
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
        if size < 10000:  # < 10KB
            return "small"
        elif size < 100000:  # < 100KB  
            return "medium"
        elif size < 500000:  # < 500KB
            return "large"
        else:
            return "very_large"
    
    def create_snapshot(self, test_name: str, pdf_path: str, test_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–Ω–∞–ø—à–æ—Ç PDF —Ñ–∞–π–ª–∞"""
        
        snapshot_id = f"{test_name}_{hashlib.md5(test_name.encode()).hexdigest()[:8]}"
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF
        pdf_metadata = self._get_pdf_metadata(pdf_path)
        
        # –°–æ–∑–¥–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç
        snapshot = {
            "test_name": test_name,
            "snapshot_id": snapshot_id,
            "created_at": import_time_time(),
            "pdf_metadata": pdf_metadata,
            "test_data_hash": hashlib.md5(json.dumps(test_data or {}, sort_keys=True).encode()).hexdigest(),
            "expectations": {
                "min_file_size": max(1000, pdf_metadata.get("file_size", 0) * 0.8),  # -20%
                "max_file_size": pdf_metadata.get("file_size", 0) * 1.2,  # +20%
                "expected_size_category": pdf_metadata.get("size_category", "medium")
            }
        }
        
        # –ö–æ–ø–∏—Ä—É–µ–º PDF —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–Ω–∞–ø—à–æ—Ç–æ–≤
        if pdf_metadata.get("exists"):
            snapshot_pdf_path = self.snapshots_dir / f"{snapshot_id}.pdf"
            import shutil
            shutil.copy2(pdf_path, snapshot_pdf_path)
            snapshot["snapshot_file"] = str(snapshot_pdf_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        self.metadata[snapshot_id] = snapshot
        self._save_metadata()
        
        print(f"‚úÖ Created PDF snapshot: {test_name} -> {snapshot_id}")
        return snapshot
    
    def verify_snapshot(self, test_name: str, pdf_path: str, test_data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PDF –ø—Ä–æ—Ç–∏–≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞"""
        
        snapshot_id = f"{test_name}_{hashlib.md5(test_name.encode()).hexdigest()[:8]}"
        
        if snapshot_id not in self.metadata:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–Ω–∞–ø—à–æ—Ç –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            return self.create_snapshot(test_name, pdf_path, test_data)
        
        snapshot = self.metadata[snapshot_id]
        expectations = snapshot.get("expectations", {})
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        current_metadata = self._get_pdf_metadata(pdf_path)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        verification_result = {
            "test_name": test_name,
            "snapshot_id": snapshot_id,
            "passed": True,
            "issues": [],
            "current_metadata": current_metadata,
            "expected_metadata": snapshot.get("pdf_metadata", {}),
            "expectations": expectations
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        if not current_metadata.get("exists"):
            verification_result["passed"] = False
            verification_result["issues"].append("PDF file does not exist")
            return verification_result
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        current_size = current_metadata.get("file_size", 0)
        min_size = expectations.get("min_file_size", 0)
        max_size = expectations.get("max_file_size", float('inf'))
        
        if current_size < min_size:
            verification_result["passed"] = False
            verification_result["issues"].append(f"File size too small: {current_size} < {min_size}")
        
        if current_size > max_size:
            verification_result["passed"] = False
            verification_result["issues"].append(f"File size too large: {current_size} > {max_size}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        expected_category = expectations.get("expected_size_category")
        current_category = current_metadata.get("size_category")
        
        if expected_category and current_category != expected_category:
            verification_result["passed"] = False
            verification_result["issues"].append(f"Size category changed: {current_category} != {expected_category}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        expected_hash = snapshot.get("pdf_metadata", {}).get("content_hash")
        current_hash = current_metadata.get("content_hash")
        
        if expected_hash and current_hash != expected_hash:
            # –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
            verification_result["issues"].append(f"Content hash changed: {current_hash} != {expected_hash}")
        
        return verification_result
    
    def run_comprehensive_test(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        
        print("üì∏ RUNNING PDF SNAPSHOT TESTS")
        print("=" * 50)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º PDF –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        try:
            import sys
            sys.path.append('.')
            from bot.ui.pdf_v2 import StructuredPDFGenerator
        except ImportError as e:
            print(f"‚ùå Cannot import PDF generator: {e}")
            return {"error": "Import failed"}
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_scenarios = self._get_test_scenarios()
        
        results = {
            "total_tests": len(test_scenarios),
            "passed": 0,
            "failed": 0,
            "test_results": []
        }
        
        generator = StructuredPDFGenerator()
        
        for scenario in test_scenarios:
            print(f"\nüß™ Testing: {scenario['name']}")
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                with tempfile.TemporaryDirectory() as temp_dir:
                    test_uid = 99999  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                    
                    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
                    original_generate = generator.generate_structured_pdf
                    
                    def test_generate(uid, snapshot):
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF
                        test_user_dir = Path(temp_dir) / "reports" / str(uid)
                        test_user_dir.mkdir(parents=True, exist_ok=True)
                        
                        test_pdf_path = test_user_dir / "test.pdf"
                        
                        # –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                        try:
                            pdf = generator._setup_pdf()
                            generator._add_header(pdf, "TEST REPORT")
                            generator._add_summary_section(pdf, snapshot.get('profile', {}), snapshot.get('type', 'test'))
                            
                            if 'makeup' in snapshot.get('result', {}):
                                generator._add_makeup_section(pdf, snapshot['result']['makeup'])
                            
                            if 'skincare' in snapshot.get('result', {}):
                                generator._add_skincare_section(pdf, snapshot['result']['skincare'])
                            
                            pdf.output(str(test_pdf_path))
                            return str(test_pdf_path)
                        except Exception as e:
                            print(f"PDF generation error: {e}")
                            return ""
                    
                    generator.generate_structured_pdf = test_generate
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
                    pdf_path = generator.generate_structured_pdf(test_uid, scenario['data'])
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
                    generator.generate_structured_pdf = original_generate
                    
                    if pdf_path and os.path.exists(pdf_path):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞–ø—à–æ—Ç
                        verification = self.verify_snapshot(scenario['name'], pdf_path, scenario['data'])
                        
                        results["test_results"].append(verification)
                        
                        if verification["passed"]:
                            results["passed"] += 1
                            print(f"‚úÖ {scenario['name']}: PASSED")
                        else:
                            results["failed"] += 1
                            print(f"‚ùå {scenario['name']}: FAILED")
                            for issue in verification["issues"]:
                                print(f"  - {issue}")
                    else:
                        results["failed"] += 1
                        print(f"‚ùå {scenario['name']}: PDF generation failed")
                        
            except Exception as e:
                results["failed"] += 1
                print(f"‚ùå {scenario['name']}: Test error: {e}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        print(f"\nüìä SNAPSHOT TEST RESULTS:")
        print(f"Total tests: {results['total_tests']}")
        print(f"Passed: {results['passed']}")
        print(f"Failed: {results['failed']}")
        print(f"Success rate: {results['passed']/results['total_tests']*100:.1f}%")
        
        return results
    
    def _get_test_scenarios(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è PDF"""
        
        return [
            {
                "name": "basic_palette_report",
                "data": {
                    "type": "detailed_palette",
                    "profile": {
                        "user_id": 12345,
                        "undertone": "warm",
                        "season": "autumn",
                        "contrast": "medium"
                    },
                    "result": {
                        "makeup": {
                            "base": [
                                {
                                    "name": "Foundation Warm Beige",
                                    "brand": "Test Brand",
                                    "category": "foundation",
                                    "price": 1500,
                                    "in_stock": True,
                                    "explain": "–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–ø–ª–æ–≥–æ –ø–æ–¥—Ç–æ–Ω–∞"
                                }
                            ]
                        }
                    }
                }
            },
            {
                "name": "basic_skincare_report", 
                "data": {
                    "type": "detailed_skincare",
                    "profile": {
                        "user_id": 12346,
                        "skin_type": "dry",
                        "concerns": ["dryness", "aging"]
                    },
                    "result": {
                        "skincare": {
                            "AM": [
                                {
                                    "name": "Hydrating Cleanser",
                                    "brand": "Test Brand",
                                    "category": "cleanser",
                                    "price": 1200,
                                    "in_stock": True,
                                    "actives": ["hyaluronic acid"],
                                    "explain": "–º—è–≥–∫–æ –æ—á–∏—â–∞–µ—Ç —Å—É—Ö—É—é –∫–æ–∂—É"
                                }
                            ]
                        }
                    }
                }
            },
            {
                "name": "comprehensive_report",
                "data": {
                    "type": "detailed_palette",
                    "profile": {
                        "user_id": 12347,
                        "undertone": "cool",
                        "season": "winter",
                        "contrast": "high",
                        "skin_type": "combo",
                        "concerns": ["acne", "pigmentation"]
                    },
                    "result": {
                        "makeup": {
                            "base": [
                                {"name": "Cool Foundation", "brand": "Brand A", "category": "foundation", "price": 2000, "in_stock": True, "explain": "–¥–ª—è —Ö–æ–ª–æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ç–æ–Ω–∞"},
                                {"name": "Light Concealer", "brand": "Brand B", "category": "concealer", "price": 800, "in_stock": True, "explain": "–º–∞—Å–∫–∏—Ä—É–µ—Ç –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞"}
                            ],
                            "eyes": [
                                {"name": "Cool Eyeshadow", "brand": "Brand C", "category": "eyeshadow", "price": 1200, "in_stock": False, "explain": "–∑–∏–º–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏"}
                            ]
                        },
                        "skincare": {
                            "AM": [
                                {"name": "Gentle Foam", "brand": "Brand D", "category": "cleanser", "price": 1000, "in_stock": True, "actives": ["salicylic acid"], "explain": "–¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∫–æ–∂–∏"}
                            ],
                            "PM": [
                                {"name": "Retinol Serum", "brand": "Brand E", "category": "serum", "price": 2500, "in_stock": True, "actives": ["retinol"], "explain": "–ø—Ä–æ—Ç–∏–≤ –ø–∏–≥–º–µ–Ω—Ç–∞—Ü–∏–∏"}
                            ]
                        }
                    }
                }
            }
        ]


def import_time_time():
    """–ò–º–ø–æ—Ä—Ç time.time —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        import time
        return time.time()
    except:
        return 0


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–Ω–∞–ø—à–æ—Ç–æ–≤
    tester = PDFSnapshotTester()
    results = tester.run_comprehensive_test()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results.get("passed", 0) == results.get("total_tests", 1):
        print("\nüéâ ALL SNAPSHOT TESTS PASSED!")
        exit(0)
    else:
        print(f"\nüí• {results.get('failed', 0)} TESTS FAILED!")
        exit(1)






