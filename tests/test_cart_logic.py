#!/usr/bin/env python3
"""
üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –ª–æ–≥–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
–ü–æ–∫—Ä—ã–≤–∞–µ—Ç: –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã, –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""

import pytest
import tempfile
import shutil
import os
from dataclasses import asdict
from unittest.mock import AsyncMock, MagicMock

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from engine.cart_store import CartStore, CartItem
from bot.handlers.cart import _find_product_in_recommendations


class TestCartStore:
    """–¢–µ—Å—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
    
    def setup_method(self):
        """–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.cart_store = CartStore(base_dir=self.temp_dir)
        self.user_id = 12345
    
    def teardown_method(self):
        """–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        shutil.rmtree(self.temp_dir)
    
    def test_add_new_item(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
        item = CartItem(
            product_id="test_product_1",
            qty=2,
            brand="Test Brand",
            name="Test Product",
            price=100.0,
            price_currency="‚ÇΩ"
        )
        
        self.cart_store.add(self.user_id, item)
        items = self.cart_store.get(self.user_id)
        
        assert len(items) == 1
        assert "test_product_1" in items
        assert items["test_product_1"].qty == 2
        assert items["test_product_1"].brand == "Test Brand"
    
    def test_idempotency_same_product(self):
        """–¢–µ—Å—Ç –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ —Ç–æ–≤–∞—Ä–∞ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç qty"""
        item1 = CartItem(product_id="test_product_1", qty=1, brand="Brand", name="Product")
        item2 = CartItem(product_id="test_product_1", qty=3, brand="Brand", name="Product")
        
        self.cart_store.add(self.user_id, item1)
        self.cart_store.add(self.user_id, item2)
        
        items = self.cart_store.get(self.user_id)
        
        assert len(items) == 1  # –ù–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        assert items["test_product_1"].qty == 4  # 1 + 3
    
    def test_different_products(self):
        """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
        item1 = CartItem(product_id="product_1", qty=1, brand="Brand A", name="Product A")
        item2 = CartItem(product_id="product_2", qty=2, brand="Brand B", name="Product B")
        
        self.cart_store.add(self.user_id, item1)
        self.cart_store.add(self.user_id, item2)
        
        items = self.cart_store.get(self.user_id)
        
        assert len(items) == 2
        assert items["product_1"].qty == 1
        assert items["product_2"].qty == 2
    
    def test_remove_item(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        item = CartItem(product_id="test_product", qty=5, brand="Brand", name="Product")
        
        self.cart_store.add(self.user_id, item)
        assert len(self.cart_store.get(self.user_id)) == 1
        
        self.cart_store.remove(self.user_id, "test_product")
        assert len(self.cart_store.get(self.user_id)) == 0
    
    def test_set_quantity(self):
        """–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
        item = CartItem(product_id="test_product", qty=2, brand="Brand", name="Product")
        
        self.cart_store.add(self.user_id, item)
        self.cart_store.set_qty(self.user_id, "test_product", 10)
        
        items = self.cart_store.get(self.user_id)
        assert items["test_product"].qty == 10
    
    def test_set_quantity_zero_removes_item(self):
        """–¢–µ—Å—Ç —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ qty=0 —É–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä"""
        item = CartItem(product_id="test_product", qty=5, brand="Brand", name="Product")
        
        self.cart_store.add(self.user_id, item)
        self.cart_store.set_qty(self.user_id, "test_product", 0)
        
        items = self.cart_store.get(self.user_id)
        assert len(items) == 0
    
    def test_clear_cart(self):
        """–¢–µ—Å—Ç –æ—á–∏—Å—Ç–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã"""
        item1 = CartItem(product_id="product_1", qty=1, brand="Brand", name="Product 1")
        item2 = CartItem(product_id="product_2", qty=2, brand="Brand", name="Product 2")
        
        self.cart_store.add(self.user_id, item1)
        self.cart_store.add(self.user_id, item2)
        assert len(self.cart_store.get(self.user_id)) == 2
        
        self.cart_store.clear(self.user_id)
        assert len(self.cart_store.get(self.user_id)) == 0
    
    def test_persistence(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        item = CartItem(product_id="persistent_item", qty=3, brand="Brand", name="Persistent")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä
        self.cart_store.add(self.user_id, item)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
        new_store = CartStore(base_dir=self.temp_dir)
        items = new_store.get(self.user_id)
        
        assert len(items) == 1
        assert items["persistent_item"].qty == 3
        assert items["persistent_item"].brand == "Brand"
    
    def test_thread_safety(self):
        """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç thread safety (–ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ lock —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)"""
        assert hasattr(self.cart_store, '_lock')
        assert self.cart_store._lock is not None


class TestSourcePrioritization:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
    
    def test_golden_apple_priority(self):
        """–ó–æ–ª–æ—Ç–æ–µ –Ø–±–ª–æ–∫–æ –¥–æ–ª–∂–Ω–æ –∏–º–µ—Ç—å –Ω–∞–∏–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"""
        sources = [
            {"domain": "sephora.com", "ref_link": "https://sephora.com/product/123"},
            {"domain": "goldenappletree.ru", "ref_link": "https://goldenappletree.ru/product/123"},
            {"domain": "wildberries.ru", "ref_link": "https://wildberries.ru/catalog/123"},
        ]
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å SourcePrioritizer
        # prioritizer = SourcePrioritizer()
        # sorted_sources = prioritizer.sort_by_priority(sources)
        # assert sorted_sources[0]["domain"] == "goldenappletree.ru"
        
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —ç—Ç–∞–ø–µ
        pytest.skip("SourcePrioritizer not implemented yet")
    
    def test_russian_official_priority(self):
        """–†–æ—Å—Å–∏–π—Å–∫–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤"""
        sources = [
            {"domain": "wildberries.ru", "ref_link": "https://wildberries.ru/catalog/123"},
            {"domain": "sephora.ru", "ref_link": "https://sephora.ru/product/123"},
            {"domain": "ozon.ru", "ref_link": "https://ozon.ru/product/123"},
        ]
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é
        pytest.skip("SourcePrioritizer not implemented yet")


class TestProductVariants:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ (–±—É–¥—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)"""
    
    def test_different_shades_separate_items(self):
        """–†–∞–∑–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        # TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É variant_id –≤ CartItem
        pytest.skip("Variant support not implemented yet")
    
    def test_same_variant_idempotency(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å qty"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á product_id:variant_id
        pytest.skip("Variant support not implemented yet")


class TestProductRecommendationSearch:
    """–¢–µ—Å—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"""
    
    @pytest.mark.asyncio
    async def test_find_existing_product(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"""
        # TODO: –ú–æ–∫–Ω—É—Ç—å FSM coordinator –∏ selector
        pytest.skip("Requires FSM coordinator mocking")
    
    @pytest.mark.asyncio
    async def test_product_not_found(self):
        """–¢–µ—Å—Ç –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"""
        # TODO: –ú–æ–∫–Ω—É—Ç—å –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        pytest.skip("Requires FSM coordinator mocking")


if __name__ == "__main__":
    pytest.main([__file__, "-v"])



