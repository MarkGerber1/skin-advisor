"""
üéØ E2E Functional Testing - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ —Å—Ç—Ä–æ–≥–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
"""

import sys

sys.path.append(".")

from tests.test_e2e_scenarios import E2EScenarioTester, E2EScenarioGenerator


def run_functional_e2e_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã —Å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫—Ä–∏—Ç–µ—Ä–∏—è–º–∏"""

    print("üéØ RUNNING FUNCTIONAL E2E TESTS")
    print("=" * 50)
    print("Focus: End-to-end system functionality verification")

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = E2EScenarioTester()
    generator = E2EScenarioGenerator()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    basic_scenarios = generator.generate_basic_scenarios()
    ambivalent_scenarios = generator.generate_ambivalent_scenarios()

    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –≤—ã–±–æ—Ä–∫—É (–ø–æ 2 –∏–∑ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞)
    functional_scenarios = [
        basic_scenarios[0],  # Spring low warm
        basic_scenarios[8],  # Summer low neutral
        basic_scenarios[16],  # Autumn low cool
        basic_scenarios[28],  # Winter medium cool
        basic_scenarios[35],  # Winter high neutral
        ambivalent_scenarios[0],  # Spring-Summer border
        ambivalent_scenarios[1],  # Warm high contrast anomaly
    ]

    print(f"Selected {len(functional_scenarios)} functional scenarios:")
    for i, scenario in enumerate(functional_scenarios, 1):
        print(f"  {i}. {scenario.scenario_id}: {scenario.name}")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    for scenario in functional_scenarios:
        scenario.expected_outcomes.update(
            {
                "min_makeup_products": 1,  # –ú–∏–Ω–∏–º—É–º 1 –ø—Ä–æ–¥—É–∫—Ç –º–∞–∫–∏—è–∂–∞
                "min_skincare_steps": 0,  # –£—Ö–æ–¥ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
                "pdf_generation": True,  # PDF –¥–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                "affiliate_links": True,  # –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
                "system_stability": True,  # –°–∏—Å—Ç–µ–º–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø–∞–¥–∞—Ç—å
            }
        )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print(f"\nüöÄ Starting functional E2E execution...")

    passed = 0
    failed = 0
    critical_failures = 0
    results = []

    for scenario in functional_scenarios:
        try:
            result = tester.run_single_scenario(scenario)
            results.append(result)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ (–ø–∞–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã)
            has_critical_error = any("Critical test error" in issue for issue in result.issues)

            if has_critical_error:
                critical_failures += 1
                print(f"    ‚ö†Ô∏è CRITICAL FAILURE detected!")

            if result.passed:
                passed += 1
                print(f"    ‚úÖ Functional requirements met")
            else:
                failed += 1
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                pdf_ok = result.verification_details.get("pdf_generation", "").startswith("SUCCESS")
                profile_ok = result.verification_details.get("profile_creation") == "SUCCESS"
                selection_ok = result.verification_details.get("product_selection") == "SUCCESS"

                print(f"    üìä Component status:")
                print(f"       Profile creation: {'‚úÖ' if profile_ok else '‚ùå'}")
                print(f"       Product selection: {'‚úÖ' if selection_ok else '‚ùå'}")
                print(f"       PDF generation: {'‚úÖ' if pdf_ok else '‚ùå'}")

        except Exception as e:
            critical_failures += 1
            print(f"    üí• CRITICAL EXCEPTION: {e}")
            results.append(
                {
                    "scenario_id": scenario.scenario_id,
                    "passed": False,
                    "issues": [f"Critical exception: {e}"],
                }
            )
            failed += 1

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    success_rate = (passed / len(functional_scenarios)) * 100
    stability_rate = (
        (len(functional_scenarios) - critical_failures) / len(functional_scenarios)
    ) * 100

    print(f"\nüìä FUNCTIONAL E2E RESULTS:")
    print(f"Total scenarios: {len(functional_scenarios)}")
    print(f"Passed: {passed}")
    print(f"Failed: {failed}")
    print(f"Critical failures: {critical_failures}")
    print(f"Success rate: {success_rate:.1f}%")
    print(f"Stability rate: {stability_rate:.1f}%")

    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print(f"\nüîç COMPONENT ANALYSIS:")

    pdf_success = sum(
        1
        for r in results
        if hasattr(r, "verification_details")
        and r.verification_details.get("pdf_generation", "").startswith("SUCCESS")
    )
    profile_success = sum(
        1
        for r in results
        if hasattr(r, "verification_details")
        and r.verification_details.get("profile_creation") == "SUCCESS"
    )
    selection_success = sum(
        1
        for r in results
        if hasattr(r, "verification_details")
        and r.verification_details.get("product_selection") == "SUCCESS"
    )

    print(
        f"Profile Creation: {profile_success}/{len(functional_scenarios)} ({profile_success/len(functional_scenarios)*100:.1f}%)"
    )
    print(
        f"Product Selection: {selection_success}/{len(functional_scenarios)} ({selection_success/len(functional_scenarios)*100:.1f}%)"
    )
    print(
        f"PDF Generation: {pdf_success}/{len(functional_scenarios)} ({pdf_success/len(functional_scenarios)*100:.1f}%)"
    )

    # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if stability_rate >= 90 and pdf_success >= len(functional_scenarios) * 0.8:
        print(f"\nüéâ SYSTEM FUNCTIONALLY READY!")
        print(f"Core components working, acceptable for production")
        return {
            "status": "FUNCTIONAL",
            "success_rate": success_rate,
            "stability_rate": stability_rate,
            "ready_for_production": True,
        }
    elif stability_rate >= 70:
        print(f"\n‚ö†Ô∏è SYSTEM PARTIALLY FUNCTIONAL")
        print(f"Some issues detected but core functionality works")
        return {
            "status": "PARTIAL",
            "success_rate": success_rate,
            "stability_rate": stability_rate,
            "ready_for_production": False,
        }
    else:
        print(f"\nüí• SYSTEM NOT FUNCTIONAL")
        print(f"Critical issues prevent production readiness")
        return {
            "status": "CRITICAL",
            "success_rate": success_rate,
            "stability_rate": stability_rate,
            "ready_for_production": False,
        }


if __name__ == "__main__":
    try:
        results = run_functional_e2e_tests()

        if results["ready_for_production"]:
            print(f"\nüöÄ SYSTEM READY FOR PRODUCTION")
            exit(0)
        else:
            print(f"\n‚ö†Ô∏è SYSTEM NEEDS ATTENTION BEFORE PRODUCTION")
            exit(1)

    except Exception as e:
        print(f"\n‚ùå FUNCTIONAL E2E EXECUTION FAILED: {e}")
        exit(1)
