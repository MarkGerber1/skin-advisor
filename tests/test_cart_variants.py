#!/usr/bin/env python3
"""
üß™ –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: variant_id, –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, —Å–æ—Å—Ç–∞–≤–Ω–æ–π –∫–ª—é—á
"""

import pytest
import tempfile
import shutil
import os
import sys

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from engine.cart_store import CartStore, CartItem


class TestCartVariants:
    """–¢–µ—Å—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def setup_method(self):
        """–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.cart_store = CartStore(base_dir=self.temp_dir)
        self.user_id = 12345
    
    def teardown_method(self):
        """–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"""
        shutil.rmtree(self.temp_dir)
    
    def test_composite_key_generation(self):
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        # –¢–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        item_no_variant = CartItem(product_id="lipstick-001")
        assert item_no_variant.get_composite_key() == "lipstick-001:default"
        
        # –¢–æ–≤–∞—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
        item_with_variant = CartItem(
            product_id="lipstick-001",
            variant_id="shade-red-01",
            variant_name="Classic Red",
            variant_type="shade"
        )
        assert item_with_variant.get_composite_key() == "lipstick-001:shade-red-01"
    
    def test_different_variants_separate_items(self):
        """–†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        lipstick_red = CartItem(
            product_id="lipstick-001",
            qty=1,
            brand="MAC",
            name="Ruby Woo",
            variant_id="shade-red-01",
            variant_name="Ruby Woo",
            variant_type="shade"
        )
        
        lipstick_pink = CartItem(
            product_id="lipstick-001",
            qty=2,
            brand="MAC", 
            name="Velvet Teddy",
            variant_id="shade-pink-02",
            variant_name="Velvet Teddy",
            variant_type="shade"
        )
        
        self.cart_store.add(self.user_id, lipstick_red)
        self.cart_store.add(self.user_id, lipstick_pink)
        
        items = self.cart_store.get(self.user_id)
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        assert len(items) == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
        items_dict = {item.get_composite_key(): item for item in items}
        assert "lipstick-001:shade-red-01" in items_dict
        assert "lipstick-001:shade-pink-02" in items_dict
        assert items_dict["lipstick-001:shade-red-01"].qty == 1
        assert items_dict["lipstick-001:shade-pink-02"].qty == 2
    
    def test_same_variant_idempotency(self):
        """–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≥–æ –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å qty"""
        lipstick_red = CartItem(
            product_id="lipstick-001",
            qty=2,
            brand="MAC",
            name="Ruby Woo",
            variant_id="shade-red-01",
            variant_name="Ruby Woo",
            variant_type="shade"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        self.cart_store.add(self.user_id, lipstick_red)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ
        lipstick_red_again = CartItem(
            product_id="lipstick-001",
            qty=3,
            brand="MAC",
            name="Ruby Woo",
            variant_id="shade-red-01",
            variant_name="Ruby Woo", 
            variant_type="shade"
        )
        self.cart_store.add(self.user_id, lipstick_red_again)
        
        items = self.cart_store.get(self.user_id)
        
        # –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 1 –ø–æ–∑–∏—Ü–∏—è
        assert len(items) == 1
        assert items[0].qty == 5  # 2 + 3
        assert items[0].get_composite_key() == "lipstick-001:shade-red-01"
    
    def test_product_without_variant_vs_with_variant(self):
        """–¢–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏"""
        # –¢–æ–≤–∞—Ä –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (default)
        foundation_default = CartItem(
            product_id="foundation-001",
            qty=1,
            brand="Fenty",
            name="Pro Filt'r"
        )
        
        # –¢–æ—Ç –∂–µ —Ç–æ–≤–∞—Ä —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º
        foundation_shade = CartItem(
            product_id="foundation-001",
            qty=1,
            brand="Fenty",
            name="Pro Filt'r",
            variant_id="shade-120",
            variant_name="120",
            variant_type="shade"
        )
        
        self.cart_store.add(self.user_id, foundation_default)
        self.cart_store.add(self.user_id, foundation_shade)
        
        items = self.cart_store.get(self.user_id)
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø–æ–∑–∏—Ü–∏–∏
        assert len(items) == 2
        
        items_dict = {item.get_composite_key(): item for item in items}
        assert "foundation-001:default" in items_dict
        assert "foundation-001:shade-120" in items_dict
    
    def test_remove_specific_variant(self):
        """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        lipstick_red = CartItem(
            product_id="lipstick-001",
            variant_id="shade-red-01",
            qty=1
        )
        lipstick_pink = CartItem(
            product_id="lipstick-001", 
            variant_id="shade-pink-02",
            qty=2
        )
        
        self.cart_store.add(self.user_id, lipstick_red)
        self.cart_store.add(self.user_id, lipstick_pink)
        assert len(self.cart_store.get(self.user_id)) == 2
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        self.cart_store.remove(self.user_id, "lipstick-001", "shade-red-01")
        
        items = self.cart_store.get(self.user_id)
        assert len(items) == 1
        assert items[0].get_composite_key() == "lipstick-001:shade-pink-02"
    
    def test_set_qty_specific_variant(self):
        """–¢–µ—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        lipstick_red = CartItem(product_id="lipstick-001", variant_id="shade-red-01", qty=1)
        lipstick_pink = CartItem(product_id="lipstick-001", variant_id="shade-pink-02", qty=2)
        
        self.cart_store.add(self.user_id, lipstick_red)
        self.cart_store.add(self.user_id, lipstick_pink)
        
        # –ò–∑–º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞—Å–Ω–æ–π –ø–æ–º–∞–¥—ã
        self.cart_store.set_qty(self.user_id, "lipstick-001", 10, "shade-red-01")
        
        items = self.cart_store.get(self.user_id)
        items_dict = {item.get_composite_key(): item for item in items}
        
        assert items_dict["lipstick-001:shade-red-01"].qty == 10
        assert items_dict["lipstick-001:shade-pink-02"].qty == 2  # –ù–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    
    def test_legacy_data_compatibility(self):
        """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–ª–µ–π variant_*
        import json
        legacy_data = {
            "old-product-001": {
                "product_id": "old-product-001",
                "qty": 3,
                "brand": "Legacy Brand",
                "name": "Legacy Product",
                "price": 100.0,
                "price_currency": "‚ÇΩ",
                "ref_link": "",
                "explain": "",
                "category": "test",
                "in_stock": True,
                "added_at": "2024-01-01T12:00:00"
                # –ù–µ—Ç –ø–æ–ª–µ–π variant_id, variant_name, variant_type
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º legacy –¥–∞–Ω–Ω—ã–µ
        path = self.cart_store._path(self.user_id)
        with open(path, "w", encoding="utf-8") as f:
            json.dump(legacy_data, f)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
        items = self.cart_store.get(self.user_id)
        
        assert len(items) == 1
        item = items[0]
        assert item.product_id == "old-product-001"
        assert item.qty == 3
        assert item.variant_id is None
        assert item.variant_name is None
        assert item.variant_type is None
        assert item.get_composite_key() == "old-product-001:default"


if __name__ == "__main__":
    pytest.main([__file__, "-v"])



