"""
üß™ E2E Sample Runner - –ó–∞–ø—É—Å–∫ –ø—Ä–æ–±–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ E2E —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ —Ç–µ—Å—Ç–æ–≤
"""

import sys
sys.path.append('.')

from tests.test_e2e_scenarios import E2EScenarioTester, E2EScenarioGenerator

def run_sample_e2e_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–µ E2E —Ç–µ—Å—Ç—ã (5 –±–∞–∑–æ–≤—ã—Ö + 1 –∞–º–±–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã–π)"""
    
    print("üß™ RUNNING SAMPLE E2E TESTS")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = E2EScenarioTester()
    generator = E2EScenarioGenerator()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    basic_scenarios = generator.generate_basic_scenarios()
    ambivalent_scenarios = generator.generate_ambivalent_scenarios()
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å–Ω—É—é –≤—ã–±–æ—Ä–∫—É
    sample_scenarios = [
        basic_scenarios[0],   # Spring low warm
        basic_scenarios[12],  # Summer medium neutral  
        basic_scenarios[24],  # Autumn high cool
        basic_scenarios[35],  # Winter high neutral
        basic_scenarios[18],  # Autumn low neutral
        ambivalent_scenarios[0]  # Spring-Summer border case
    ]
    
    print(f"Selected {len(sample_scenarios)} scenarios for testing:")
    for i, scenario in enumerate(sample_scenarios, 1):
        print(f"  {i}. {scenario.scenario_id}: {scenario.name}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    print(f"\nüöÄ Starting sample E2E execution...")
    
    passed = 0
    failed = 0
    results = []
    
    for scenario in sample_scenarios:
        result = tester.run_single_scenario(scenario)
        results.append(result)
        
        if result.passed:
            passed += 1
        else:
            failed += 1
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä SAMPLE E2E RESULTS:")
    print(f"Total scenarios: {len(sample_scenarios)}")
    print(f"Passed: {passed}")
    print(f"Failed: {failed}")
    print(f"Success rate: {(passed/len(sample_scenarios)*100):.1f}%")
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–º—Å—è —Ç–µ—Å—Ç–∞–º
    if failed > 0:
        print(f"\n‚ùå Failed scenarios:")
        for result in results:
            if not result.passed:
                print(f"  - {result.scenario_id}:")
                for issue in result.issues[:2]:
                    print(f"    ‚Ä¢ {issue}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    if failed > 0:
        failure_analysis = tester.get_failure_analysis()
        if "most_common_issues" in failure_analysis:
            print(f"\nüîç Most common issues:")
            for issue, count in failure_analysis["most_common_issues"]:
                print(f"  - {issue}: {count} times")
    
    return {
        "total": len(sample_scenarios),
        "passed": passed,
        "failed": failed,
        "success_rate": passed/len(sample_scenarios)*100,
        "results": results
    }

if __name__ == "__main__":
    try:
        results = run_sample_e2e_tests()
        
        if results["success_rate"] >= 50:  # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
            print(f"\nüéâ SAMPLE E2E TESTS ACCEPTABLE!")
            print(f"System demonstrates basic functionality")
            print(f"Ready for full E2E execution (39 scenarios)")
            exit(0)
        else:
            print(f"\nüí• SAMPLE E2E TESTS NEED ATTENTION")
            print(f"Critical system failures detected")
            exit(1)
            
    except Exception as e:
        print(f"\n‚ùå SAMPLE E2E EXECUTION FAILED: {e}")
        exit(1)
