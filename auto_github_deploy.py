#!/usr/bin/env python
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ GitHub
"""

import subprocess
import sys
import os
from datetime import datetime
from pathlib import Path

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, cwd=".")

        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–•")
            if result.stdout.strip():
                print(f"   üìÑ {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå {description} - –û–®–ò–ë–ö–ê")
            if result.stderr.strip():
                print(f"   ‚ö†Ô∏è  {result.stderr.strip()}")
            return False

    except Exception as e:
        print(f"‚ùå {description} - –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        return False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .git –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(".git"):
        print("‚ùå –≠—Ç–æ –Ω–µ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Git")
        return False

    if result.stdout.strip():
        print(f"‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        return False

    print("‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è")
    return True

def check_remote():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")

    result = subprocess.run("git remote -v", shell=True, capture_output=True, text=True)
    if result.returncode != 0 or "origin" not in result.stdout:
        print("‚ùå –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("   üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π:")
        print("   git remote add origin https://github.com/YOUR_USERNAME/YOUR_REPO.git")
        return False

    if "github.com" not in result.stdout:
        print("‚ö†Ô∏è  –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞ GitHub")
        return False

    print("‚úÖ –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return True

def generate_commit_message():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M")
    return f"üöÄ Auto-deploy: {timestamp}"

def push_to_github():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç push –Ω–∞ GitHub"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ GitHub...")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É
    branch_result = subprocess.run("git branch --show-current", shell=True, capture_output=True, text=True)
    if branch_result.returncode != 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é –≤–µ—Ç–∫—É")
        return False

    current_branch = branch_result.stdout.strip()
    print(f"   üìç –¢–µ–∫—É—â–∞—è –≤–µ—Ç–∫–∞: {current_branch}")

    # Push
    push_command = f"git push origin {current_branch}"
    return run_command(push_command, f"Push –Ω–∞ GitHub (–≤–µ—Ç–∫–∞ {current_branch})")

def create_summary_report():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
    print("\nüìä –û–¢–ß–ï–¢ –û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ò:")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∫–æ–º–º–∏—Ç–µ
        commit_result = subprocess.run("git log -1 --oneline", shell=True, capture_output=True, text=True)
        if commit_result.returncode == 0:
            print(f"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: {commit_result.stdout.strip()}")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        remote_result = subprocess.run("git remote get-url origin", shell=True, capture_output=True, text=True)
        if remote_result.returncode == 0:
            repo_url = remote_result.stdout.strip()
            print(f"   üîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: {repo_url}")

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ GitHub
            if "github.com" in repo_url:
                if repo_url.startswith("https://"):
                    github_url = repo_url
                else:
                    # SSH —Ñ–æ—Ä–º–∞—Ç: git@github.com:username/repo.git
                    parts = repo_url.split(":")[1].split("/")
                    username = parts[0]
                    repo = parts[1].replace(".git", "")
                    github_url = f"https://github.com/{username}/{repo}"

                print(f"   üåê GitHub URL: {github_url}")

    except Exception as e:
        print(f"   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ù–ê GITHUB ===\n")

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if not check_git_status():
        print("\n‚ùå –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ!")
        print("   üí° –ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: git add . && git commit -m 'message'")
        return False

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if not check_remote():
        return False

    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º
    print("\nüîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º...")
    fetch_result = run_command("git fetch origin", "Fetch –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")

    if fetch_result:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        status_result = subprocess.run("git status -uno", shell=True, capture_output=True, text=True)
        if "behind" in status_result.stdout:
            print("‚ö†Ô∏è  –õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ—Ç—Å—Ç–∞–µ—Ç –æ—Ç —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ")
            print("   üí° –û–±–Ω–æ–≤–∏—Ç–µ: git pull origin main")

    # –®–∞–≥ 4: Push –Ω–∞ GitHub
    success = push_to_github()

    if success:
        print("\nüéâ –ü–†–û–ï–ö–¢ –£–°–ü–ï–®–ù–û –ó–ê–ì–†–£–ñ–ï–ù –ù–ê GITHUB!")
        create_summary_report()

        print("\nüìã –î–ê–õ–¨–ù–ï–ô–®–ò–ï –®–ê–ì–ò:")
        print("1. ‚úÖ –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ GitHub")
        print("2. üîÑ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Railway –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è")
        print("3. üöÄ –ò–ª–∏ —Ä–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Railway CLI")
        print("4. üìä –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ Railway Dashboard")

        return True
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ù–ê GITHUB!")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   - –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")
        print("   - –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ GitHub (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
        print("   - –ü—Ä–∞–≤–∞ –Ω–∞ push –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
