#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è Telegram –∏ PDF
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç SVG –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏ –∏ Pillow –¥–ª—è —Ä–∞—Å—Ç—Ä–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import os
import io
from typing import Dict, List, Optional, Tuple
from datetime import datetime
from dataclasses import dataclass
import base64

try:
    from PIL import Image, ImageDraw, ImageFont
    PILLOW_AVAILABLE = True
except ImportError:
    PILLOW_AVAILABLE = False
    print("‚ö†Ô∏è Pillow not available, PNG generation disabled")

try:
    import cairosvg
    CAIRO_AVAILABLE = True
except ImportError:
    CAIRO_AVAILABLE = False
    print("‚ö†Ô∏è CairoSVG not available, SVG to PNG conversion disabled")

from engine.models import UserProfile, Season, Undertone


@dataclass
class CardConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏"""
    width: int = 800
    height: int = 600
    background_color: str = "#FFFFFF"
    primary_color: str = "#C26A8D"
    secondary_color: str = "#F4DCE4"
    accent_color: str = "#C9B7FF"
    text_color: str = "#121212"
    muted_color: str = "#6B6B6B"
    font_family: str = "Arial"
    font_size_title: int = 32
    font_size_subtitle: int = 24
    font_size_body: int = 18
    font_size_caption: int = 14


class VisualCardGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    def __init__(self):
        self.config = CardConfig()
        self._ensure_output_dirs()

    def _ensure_output_dirs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        os.makedirs("output/cards", exist_ok=True)

    def _get_user_output_dir(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        date_str = datetime.now().strftime("%Y%m%d")
        user_dir = f"output/cards/{user_id}/{date_str}"
        os.makedirs(user_dir, exist_ok=True)
        return user_dir

    def _create_svg_template(self, title: str, subtitle: str = "") -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ SVG —à–∞–±–ª–æ–Ω–∞"""
        return f'''<?xml version="1.0" encoding="UTF-8"?>
<svg width="{self.config.width}" height="{self.config.height}" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="100%" height="100%" fill="{self.config.background_color}"/>

  <!-- Header gradient -->
  <defs>
    <linearGradient id="headerGradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:{self.config.primary_color};stop-opacity:1" />
      <stop offset="100%" style="stop-color:{self.config.accent_color};stop-opacity:1" />
    </linearGradient>
  </defs>

  <!-- Header -->
  <rect x="0" y="0" width="100%" height="120" fill="url(#headerGradient)"/>
  <text x="50%" y="50" font-family="{self.config.font_family}" font-size="{self.config.font_size_title}"
        fill="white" text-anchor="middle" dominant-baseline="middle" font-weight="bold">{title}</text>

  <!-- Subtitle -->
  {f'<text x="50%" y="90" font-family="{self.config.font_family}" font-size="{self.config.font_size_subtitle}" fill="white" text-anchor="middle" opacity="0.9">{subtitle}</text>' if subtitle else ''}
</svg>'''

    def generate_makeup_card(self, profile: UserProfile, result_data: Dict) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ "–¢–æ–Ω&–°–∏—è–Ω–∏–µ"

        Args:
            profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞

        Returns:
            Dict —Å –ø—É—Ç—è–º–∏ –∫ SVG –∏ PNG —Ñ–∞–π–ª–∞–º
        """
        season_names = {
            Season.SPRING: "üå∏ –Ø—Ä–∫–∞—è –í–µ—Å–Ω–∞",
            Season.SUMMER: "üåä –ú—è–≥–∫–æ–µ –õ–µ—Ç–æ",
            Season.AUTUMN: "üçÇ –ì–ª—É–±–æ–∫–∞—è –û—Å–µ–Ω—å",
            Season.WINTER: "‚ùÑÔ∏è –•–æ–ª–æ–¥–Ω–∞—è –ó–∏–º–∞"
        }

        undertone_names = {
            Undertone.WARM: "–¢–µ–ø–ª—ã–π",
            Undertone.COOL: "–•–æ–ª–æ–¥–Ω—ã–π",
            Undertone.NEUTRAL: "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"
        }

        season = season_names.get(profile.season, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
        undertone = undertone_names.get(profile.undertone, "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")

        # –°–æ–∑–¥–∞–Ω–∏–µ SVG
        svg_content = self._create_svg_template("–í–∞—à —Ü–≤–µ—Ç–æ—Ç–∏–ø", season)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥—Ç–æ–Ω–µ
        svg_content += f'''
  <!-- Undertone info -->
  <text x="50" y="160" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}" font-weight="bold">–ü–æ–¥—Ç–æ–Ω –∫–æ–∂–∏: {undertone}</text>

  <!-- Palette visualization -->
  <text x="50" y="200" font-family="{self.config.font_family}" font-size="{self.config.font_size_subtitle}"
        fill="{self.config.primary_color}" font-weight="bold">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–∞–ª–∏—Ç—Ä–∞:</text>

  <!-- Color swatches -->
  <rect x="50" y="220" width="80" height="80" fill="{self.config.primary_color}" rx="8"/>
  <text x="90" y="270" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.text_color}" text-anchor="middle">–û—Å–Ω–æ–≤–Ω–æ–π</text>

  <rect x="150" y="220" width="80" height="80" fill="{self.config.secondary_color}" rx="8"/>
  <text x="190" y="270" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.text_color}" text-anchor="middle">–í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π</text>

  <rect x="250" y="220" width="80" height="80" fill="{self.config.accent_color}" rx="8"/>
  <text x="290" y="270" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.text_color}" text-anchor="middle">–ê–∫—Ü–µ–Ω—Ç</text>

  <!-- Makeup recommendations -->
  <text x="50" y="320" font-family="{self.config.font_family}" font-size="{self.config.font_size_subtitle}"
        fill="{self.config.primary_color}" font-weight="bold">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–∫–∏—è–∂—É:</text>

  <text x="50" y="350" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –¢–æ–Ω: {self._get_foundation_recommendation(profile)}</text>
  <text x="50" y="375" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –†—É–º—è–Ω–∞: {self._get_blush_recommendation(profile)}</text>
  <text x="50" y="400" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –¢–µ–Ω–∏: {self._get_eyeshadow_recommendation(profile)}</text>
  <text x="50" y="425" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –ü–æ–º–∞–¥–∞: {self._get_lipstick_recommendation(profile)}</text>

  <!-- Footer -->
  <text x="50" y="480" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.muted_color}">Beauty Care ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</text>
  <text x="50" y="500" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.muted_color}">–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /theme –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º</text>

</svg>'''

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        user_id = getattr(profile, 'user_id', 0)
        output_dir = self._get_user_output_dir(user_id)

        svg_path = f"{output_dir}/makeup_card.svg"
        png_path = f"{output_dir}/makeup_card.png"

        with open(svg_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if CAIRO_AVAILABLE and PILLOW_AVAILABLE:
            try:
                cairosvg.svg2png(bytestring=svg_content.encode('utf-8'),
                                write_to=png_path,
                                output_width=self.config.width,
                                output_height=self.config.height)
            except Exception as e:
                print(f"‚ùå Error converting SVG to PNG: {e}")

        return {
            'svg': svg_path,
            'png': png_path if os.path.exists(png_path) else None
        }

    def generate_skincare_card(self, profile: UserProfile, result_data: Dict) -> Dict[str, str]:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ "–ü–æ—Ä—Ç—Ä–µ—Ç –ª–∏—Ü–∞"
        """
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–∂–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
        skin_type = result_data.get('skin_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')
        concerns = result_data.get('concerns', [])
        sensitivity = result_data.get('sensitivity', 'normal')

        # –°–æ–∑–¥–∞–Ω–∏–µ SVG
        svg_content = self._create_svg_template("–í–∞—à —Ç–∏–ø –∫–æ–∂–∏", skin_type)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–∂–∏
        svg_content += f'''
  <!-- Skin analysis -->
  <text x="50" y="160" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}" font-weight="bold">–ê–Ω–∞–ª–∏–∑ –∫–æ–∂–∏:</text>

  <text x="70" y="185" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.muted_color}">‚Ä¢ –¢–∏–ø: {skin_type}</text>
  <text x="70" y="210" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.muted_color}">‚Ä¢ –ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {sensitivity}</text>
  <text x="70" y="235" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.muted_color}">‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: {", ".join(concerns) if concerns else "–ù–µ—Ç"}</text>

  <!-- Care routine -->
  <text x="50" y="280" font-family="{self.config.font_family}" font-size="{self.config.font_size_subtitle}"
        fill="{self.config.primary_color}" font-weight="bold">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —É—Ö–æ–¥:</text>

  <text x="50" y="310" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}" font-weight="bold">–£—Ç—Ä–µ–Ω–Ω–∏–π —Ä–∏—Ç—É–∞–ª:</text>
  <text x="70" y="335" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –û—á–∏—â–µ–Ω–∏–µ: {self._get_cleansing_recommendation(skin_type)}</text>
  <text x="70" y="360" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ: {self._get_moisturizing_recommendation(skin_type)}</text>
  <text x="70" y="385" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ SPF: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–∏–Ω–∏–º—É–º SPF 30</text>

  <text x="50" y="420" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}" font-weight="bold">–í–µ—á–µ—Ä–Ω–∏–π —Ä–∏—Ç—É–∞–ª:</text>
  <text x="70" y="445" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –î–µ–º–∞–∫–∏—è–∂: {self._get_removal_recommendation(skin_type)}</text>
  <text x="70" y="470" font-family="{self.config.font_family}" font-size="{self.config.font_size_body}"
        fill="{self.config.text_color}">‚Ä¢ –£—Ö–æ–¥: {self._get_night_care_recommendation(skin_type)}</text>

  <!-- Footer -->
  <text x="50" y="520" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.muted_color}">Beauty Care ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ö–æ–¥</text>
  <text x="50" y="540" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}"
        fill="{self.config.muted_color}">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Å–Ω–æ–≤–∞–Ω—ã –Ω–∞ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ</text>

</svg>'''

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        user_id = getattr(profile, 'user_id', 0)
        output_dir = self._get_user_output_dir(user_id)

        svg_path = f"{output_dir}/skincare_card.svg"
        png_path = f"{output_dir}/skincare_card.png"

        with open(svg_path, 'w', encoding='utf-8') as f:
            f.write(svg_content)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SVG –≤ PNG –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        if CAIRO_AVAILABLE and PILLOW_AVAILABLE:
            try:
                cairosvg.svg2png(bytestring=svg_content.encode('utf-8'),
                                write_to=png_path,
                                output_width=self.config.width,
                                output_height=self.config.height)
            except Exception as e:
                print(f"‚ùå Error converting SVG to PNG: {e}")

        return {
            'svg': svg_path,
            'png': png_path if os.path.exists(png_path) else None
        }

    def generate_radial_chart(self, data: Dict[str, float], title: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–¥–∏–∞–ª—å–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è PDF
        """
        if not data:
            return ""

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è SVG —Ä–∞–¥–∏–∞–ª—å–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        center_x, center_y = 200, 200
        radius = 150

        svg = f'''<svg width="400" height="400" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <radialGradient id="chartBg" cx="50%" cy="50%" r="50%">
      <stop offset="0%" style="stop-color:{self.config.secondary_color};stop-opacity:0.3" />
      <stop offset="100%" style="stop-color:{self.config.background_color};stop-opacity:0.1" />
    </radialGradient>
  </defs>

  <!-- Background circle -->
  <circle cx="{center_x}" cy="{center_y}" r="{radius}" fill="url(#chartBg)" stroke="{self.config.border}" stroke-width="2"/>

  <!-- Title -->
  <text x="200" y="30" text-anchor="middle" font-family="{self.config.font_family}"
        font-size="{self.config.font_size_subtitle}" fill="{self.config.primary_color}" font-weight="bold">{title}</text>'''

        # –ö—Ä—É–≥–∏ –¥–ª—è —à–∫–∞–ª—ã (5 —É—Ä–æ–≤–Ω–µ–π)
        for i in range(1, 6):
            r = radius * i / 5
            opacity = 0.1 + (i * 0.15)
            svg += f'<circle cx="{center_x}" cy="{center_y}" r="{r}" fill="none" stroke="{self.config.muted_color}" stroke-width="1" opacity="{opacity}"/>'

            # –ú–µ—Ç–∫–∏ —à–∫–∞–ª—ã
            if i < 5:
                label = f"{i*20}%"
                svg += f'<text x="{center_x}" y="{center_y - r - 5}" text-anchor="middle" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}" fill="{self.config.muted_color}">{label}</text>'

        # –†–∞–¥–∏–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        angle_step = 360 / len(data)
        colors = [self.config.primary_color, self.config.accent_color, self.config.secondary_color]

        for i, (label, value) in enumerate(data.items()):
            angle = (i * angle_step - 90) * 3.14159 / 180  # –≤ —Ä–∞–¥–∏–∞–Ω—ã
            color = colors[i % len(colors)]

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∫ —Ä–∞–¥–∏—É—Å—É
            normalized_radius = radius * min(value / 100, 1.0)

            x2 = center_x + normalized_radius * (1 if i % 2 == 0 else -1)
            y2 = center_y + normalized_radius * (1 if i % 2 == 0 else -1)

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–∏–Ω–∏—è
            svg += f'<line x1="{center_x}" y1="{center_y}" x2="{x2}" y2="{y2}" stroke="{color}" stroke-width="3" stroke-linecap="round"/>'

            # –¢–æ—á–∫–∞ –Ω–∞ –∫–æ–Ω—Ü–µ –ª–∏–Ω–∏–∏
            svg += f'<circle cx="{x2}" cy="{y2}" r="4" fill="{color}" stroke="white" stroke-width="2"/>'

            # –ú–µ—Ç–∫–∞
            label_radius = radius + 40
            label_x = center_x + label_radius * (1 if i % 2 == 0 else -1)
            label_y = center_y + label_radius * (1 if i % 2 == 0 else -1)
            svg += f'<text x="{label_x}" y="{label_y}" text-anchor="middle" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}" fill="{self.config.text_color}" font-weight="bold">{label}</text>'

            # –ó–Ω–∞—á–µ–Ω–∏–µ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π
            value_x = x2 + 10 * (1 if i % 2 == 0 else -1)
            value_y = y2 - 10
            svg += f'<text x="{value_x}" y="{value_y}" text-anchor="middle" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}" fill="{color}" font-weight="bold">{int(value)}%</text>'

        svg += '</svg>'
        return svg

    def generate_bar_chart(self, data: Dict[str, float], title: str, ylabel: str = "–ó–Ω–∞—á–µ–Ω–∏–µ") -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è PDF
        """
        if not data:
            return ""

        # SVG —Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        width, height = 400, 300
        chart_width, chart_height = 350, 200
        left_margin, top_margin = 40, 60

        svg = f'''<svg width="{width}" height="{height}" xmlns="http://www.w3.org/2000/svg">
  <!-- Title -->
  <text x="{width//2}" y="25" text-anchor="middle" font-family="{self.config.font_family}"
        font-size="{self.config.font_size_subtitle}" fill="{self.config.primary_color}" font-weight="bold">{title}</text>

  <!-- Y-axis label -->
  <text x="15" y="{height//2}" text-anchor="middle" font-family="{self.config.font_family}"
        font-size="{self.config.font_size_caption}" fill="{self.config.muted_color}" transform="rotate(-90,15,{height//2})">{ylabel}</text>'''

        # –°–µ—Ç–∫–∞ –∏ –æ—Å–∏
        max_value = max(data.values()) if data else 100
        bar_width = chart_width / len(data) * 0.8
        bar_spacing = chart_width / len(data) * 0.2

        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ —Å–µ—Ç–∫–∏
        for i in range(0, 6):
            y = top_margin + chart_height - (chart_height * i / 5)
            value = max_value * i / 5
            svg += f'<line x1="{left_margin}" y1="{y}" x2="{left_margin + chart_width}" y2="{y}" stroke="{self.config.muted_color}" stroke-width="1" opacity="0.3"/>'
            svg += f'<text x="{left_margin - 5}" y="{y + 3}" text-anchor="end" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}" fill="{self.config.muted_color}">{int(value)}</text>'

        # –°—Ç–æ–ª–±—Ü—ã
        colors = [self.config.primary_color, self.config.accent_color, self.config.secondary_color]
        for i, (label, value) in enumerate(data.items()):
            bar_height = (value / max_value) * chart_height
            bar_x = left_margin + i * (bar_width + bar_spacing)
            bar_y = top_margin + chart_height - bar_height

            color = colors[i % len(colors)]

            # –°—Ç–æ–ª–±–µ—Ü
            svg += f'<rect x="{bar_x}" y="{bar_y}" width="{bar_width}" height="{bar_height}" fill="{color}" rx="3"/>'

            # –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–æ–º
            svg += f'<text x="{bar_x + bar_width/2}" y="{bar_y - 5}" text-anchor="middle" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}" fill="{color}" font-weight="bold">{int(value)}</text>'

            # –ú–µ—Ç–∫–∞ –æ—Å–∏ X
            svg += f'<text x="{bar_x + bar_width/2}" y="{top_margin + chart_height + 15}" text-anchor="middle" font-family="{self.config.font_family}" font-size="{self.config.font_size_caption}" fill="{self.config.text_color}">{label}</text>'

        svg += '</svg>'
        return svg

    def _get_foundation_recommendation(self, profile: UserProfile) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è"""
        if profile.undertone == Undertone.WARM:
            return "–¢–µ–ø–ª—ã–µ –±–µ–∂–µ–≤—ã–µ —Ç–æ–Ω–∞ —Å –∑–æ–ª–æ—Ç–∏—Å—Ç—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º"
        elif profile.undertone == Undertone.COOL:
            return "–•–æ–ª–æ–¥–Ω—ã–µ —Ä–æ–∑–æ–≤—ã–µ —Ç–æ–Ω–∞ —Å –≥–æ–ª—É–±—ã–º –ø–æ–¥—Ç–æ–Ω–æ–º"
        else:
            return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ç–æ–Ω–∞"

    def _get_blush_recommendation(self, profile: UserProfile) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä—É–º—è–Ω–∞–º"""
        if profile.season == Season.SPRING:
            return "–ü–µ—Ä—Å–∏–∫–æ–≤—ã–µ –∏ –∞–±—Ä–∏–∫–æ—Å–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏"
        elif profile.season == Season.SUMMER:
            return "–ù–µ–∂–Ω–æ-—Ä–æ–∑–æ–≤—ã–µ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞"
        elif profile.season == Season.AUTUMN:
            return "–¢–µ—Ä—Ä–∞–∫–æ—Ç–æ–≤—ã–µ –∏ –±—Ä–æ–Ω–∑–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏"
        elif profile.season == Season.WINTER:
            return "–Ø—Ä–∫–æ-—Ä–æ–∑–æ–≤—ã–µ –∏ –º–∞–ª–∏–Ω–æ–≤—ã–µ —Ç–æ–Ω–∞"
        else:
            return "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –±–µ–∂–µ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏"

    def _get_eyeshadow_recommendation(self, profile: UserProfile) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–Ω—è–º"""
        if profile.season == Season.SPRING:
            return "–ó–æ–ª–æ—Ç–∏—Å—Ç—ã–µ, –ø–µ—Ä—Å–∏–∫–æ–≤—ã–µ –∏ –ª–∞–≤–∞–Ω–¥–æ–≤—ã–µ —Ç–æ–Ω–∞"
        elif profile.season == Season.SUMMER:
            return "–ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª—É–±—ã–µ, —Ä–æ–∑–æ–≤—ã–µ –∏ —Å–µ—Ä—ã–µ"
        elif profile.season == Season.AUTUMN:
            return "–¢–µ–ø–ª—ã–µ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ, –º–µ–¥–Ω—ã–µ –∏ —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ"
        elif profile.season == Season.WINTER:
            return "–î—Ä–∞–º–∞—Ç–∏—á–Ω—ã–µ —á–µ—Ä–Ω—ã–µ, —Å–µ—Ä–µ–±—Ä—è–Ω—ã–µ –∏ —Å–∏–Ω–∏–µ"
        else:
            return "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –±–µ–∂–µ–≤—ã–µ –∏ –∫–æ—Ä–∏—á–Ω–µ–≤—ã–µ —Ç–æ–Ω–∞"

    def _get_lipstick_recommendation(self, profile: UserProfile) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–º–∞–¥–µ"""
        if profile.season == Season.SPRING:
            return "–ù–µ–∂–Ω—ã–µ –∫–æ—Ä–∞–ª–ª–æ–≤—ã–µ –∏ –ø–µ—Ä—Å–∏–∫–æ–≤—ã–µ —Ç–æ–Ω–∞"
        elif profile.season == Season.SUMMER:
            return "–†–æ–∑–æ–≤—ã–µ –Ω—é–¥–æ–≤—ã–µ –∏ –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏"
        elif profile.season == Season.AUTUMN:
            return "–ë–æ—Ä–¥–æ–≤—ã–µ, –≤–∏–Ω–Ω—ã–µ –∏ —à–æ–∫–æ–ª–∞–¥–Ω—ã–µ —Ç–æ–Ω–∞"
        elif profile.season == Season.WINTER:
            return "–ö—Ä–∞—Å–Ω—ã–µ, –±–æ—Ä–¥–æ–≤—ã–µ –∏ —Å–ª–∏–≤–æ–≤—ã–µ –æ—Ç—Ç–µ–Ω–∫–∏"
        else:
            return "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –±–µ–∂–µ–≤—ã–µ –Ω—é–¥–æ–≤—ã–µ —Ç–æ–Ω–∞"

    def _get_cleansing_recommendation(self, skin_type: str) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—â–µ–Ω–∏—é"""
        if skin_type.lower() in ['–∂–∏—Ä–Ω–∞—è', '–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è']:
            return "–ì–µ–ª–∏ –∏ –ø–µ–Ω–∫–∏ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –æ—á–∏—â–µ–Ω–∏—è"
        elif skin_type.lower() in ['—Å—É—Ö–∞—è', '—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è']:
            return "–ú—è–≥–∫–∏–µ –∫—Ä–µ–º—ã –∏ –º–æ–ª–æ—á–∫–æ –¥–ª—è –¥–µ–ª–∏–∫–∞—Ç–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω–∏—è"
        else:
            return "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –æ—á–∏—â–µ–Ω–∏–µ–º –∏ —É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ–º"

    def _get_moisturizing_recommendation(self, skin_type: str) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–≤–ª–∞–∂–Ω–µ–Ω–∏—é"""
        if skin_type.lower() in ['—Å—É—Ö–∞—è']:
            return "–ü–ª–æ—Ç–Ω—ã–µ –∫—Ä–µ–º—ã —Å –º–∞—Å–ª–∞–º–∏ –∏ –≥–∏–∞–ª—É—Ä–æ–Ω–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π"
        elif skin_type.lower() in ['–∂–∏—Ä–Ω–∞—è']:
            return "–õ–µ–≥–∫–∏–µ –≥–µ–ª–∏ –∏ —Ñ–ª—é–∏–¥—ã –±–µ–∑ –º–∞—Å–µ–ª"
        elif skin_type.lower() == '–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è':
            return "–õ–µ–≥–∫–∏–µ –∫—Ä–µ–º—ã –¥–ª—è T-–∑–æ–Ω—ã, –ø–ª–æ—Ç–Ω—ã–µ –¥–ª—è —â–µ–∫"
        else:
            return "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —É–≤–ª–∞–∂–Ω—è—é—â–∏–µ –∫—Ä–µ–º—ã"

    def _get_removal_recommendation(self, skin_type: str) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω—è—Ç–∏—é –º–∞–∫–∏—è–∂–∞"""
        if skin_type.lower() in ['—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è']:
            return "–ú—è–≥–∫–∏–µ –º–∏—Ü–µ–ª–ª—è—Ä–Ω—ã–µ –≤–æ–¥—ã –∏ –∫—Ä–µ–º—ã"
        else:
            return "–î–≤—É—Ö—Ñ–∞–∑–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ –≥–∏–¥—Ä–æ—Ñ–∏–ª—å–Ω—ã–µ –º–∞—Å–ª–∞"

    def _get_night_care_recommendation(self, skin_type: str) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–µ—á–µ—Ä–Ω–µ–º—É —É—Ö–æ–¥—É"""
        if skin_type.lower() in ['—Å—É—Ö–∞—è']:
            return "–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–µ–º—ã —Å —Ä–µ—Ç–∏–Ω–æ–ª–æ–º –∏ –º–∞—Å–ª–∞–º–∏"
        elif skin_type.lower() in ['–∂–∏—Ä–Ω–∞—è']:
            return "–õ–µ–≥–∫–∏–µ —Å—ã–≤–æ—Ä–æ—Ç–∫–∏ —Å —Å–∞–ª–∏—Ü–∏–ª–æ–≤–æ–π –∫–∏—Å–ª–æ—Ç–æ–π"
        else:
            return "–†–µ–≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–µ –∫—Ä–µ–º—ã –∏ –º–∞—Å–∫–∏"


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def generate_visual_cards(user_id: int, test_type: str, profile: UserProfile, result_data: Dict) -> Dict[str, str]:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫

    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_type: –¢–∏–ø —Ç–µ—Å—Ç–∞ ('makeup' –∏–ª–∏ 'skincare')
        profile: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result_data: –î–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    Returns:
        Dict —Å –ø—É—Ç—è–º–∏ –∫ —Ñ–∞–π–ª–∞–º
    """
    generator = VisualCardGenerator()

    if test_type == 'makeup':
        return generator.generate_makeup_card(profile, result_data)
    elif test_type == 'skincare':
        return generator.generate_skincare_card(profile, result_data)
    else:
        raise ValueError(f"Unsupported test type: {test_type}")


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üé® Visual Card Generator")
    print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python report/cards.py")
    print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤")
